
ATmega328P_Inconard_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001782  00001816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c4  00800142  00800142  00001858  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006660  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001681  00000000  00000000  00008490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c03  00000000  00000000  00009b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011ac  00000000  00000000  0000c714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022bb  00000000  00000000  0000d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c53  00000000  00000000  0000fb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000520  00000000  00000000  000137ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__ctors_end>
       4:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_1>
       8:	0c 94 46 08 	jmp	0x108c	; 0x108c <__vector_2>
       c:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_3>
      10:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_4>
      14:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_5>
      18:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_6>
      1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      2c:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__vector_11>
      30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      44:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_17>
      48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	49 6e       	ori	r20, 0xE9	; 233
      6a:	69 74       	andi	r22, 0x49	; 73
      6c:	69 61       	ori	r22, 0x19	; 25
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	7a 69       	ori	r23, 0x9A	; 154
      72:	6e 67       	ori	r22, 0x7E	; 126
      74:	20 73       	andi	r18, 0x30	; 48
      76:	75 63       	ori	r23, 0x35	; 53
      78:	63 65       	ori	r22, 0x53	; 83
      7a:	73 73       	andi	r23, 0x33	; 51
      7c:	66 75       	andi	r22, 0x56	; 86
      7e:	6c 2e       	mov	r6, r28
	...

00000081 <_ZZN8NRF24L017setModeEbE3__c_1>:
      81:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
      91:	61 69 6c 65 64 20 66 6f 72 20 6e 52 46 32 34 4c     ailed for nRF24L
      a1:	30 31 2e 20 43 68 65 63 6b 20 63 6f 6e 6e 65 63     01. Check connec
      b1:	74 69 6f 6e 73 00                                   tions.

000000b7 <_ZZN8NRF24L017setModeEbE3__c_0>:
      b7:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      c7:	31 20 69 6e 20 54 72 61 6e 73 6d 69 74 20 4d 6f     1 in Transmit Mo
      d7:	64 65 2e 2e 2e 00                                   de....

000000dd <_ZZN8NRF24L017setModeEbE3__c>:
      dd:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      ed:	31 20 69 6e 20 52 65 63 65 69 76 65 20 4d 6f 64     1 in Receive Mod
      fd:	65 2e 2e 2e 00                                      e....

00000102 <_ZZN8NRF24L0110initializeEvE3__c_0>:
     102:	4d 61 73 74 65 72 20 52 58 20 50 61 79 6c 6f 61     Master RX Payloa
     112:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     122:	3a 20 00                                            : .

00000125 <_ZZN8NRF24L0110initializeEvE3__c>:
     125:	4d 61 73 74 65 72 20 54 58 20 50 61 79 6c 6f 61     Master TX Payloa
     135:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     145:	3a 20 00                                            : .

00000148 <_ZZ4mainE3__c_0>:
     148:	44 6f 6e 65 00                                      Done.

0000014d <_ZZ4mainE3__c>:
     14d:	50 6f 77 65 72 69 6e 67 20 6f 6e 2e 2e 2e 00        Powering on....

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf ef       	ldi	r28, 0xFF	; 255
     162:	d8 e0       	ldi	r29, 0x08	; 8
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	a0 e0       	ldi	r26, 0x00	; 0
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	e2 e8       	ldi	r30, 0x82	; 130
     170:	f7 e1       	ldi	r31, 0x17	; 23
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	a2 34       	cpi	r26, 0x42	; 66
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	22 e0       	ldi	r18, 0x02	; 2
     180:	a2 e4       	ldi	r26, 0x42	; 66
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a6 30       	cpi	r26, 0x06	; 6
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <main>
     192:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <_exit>

00000196 <__bad_interrupt>:
     196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <_Z6wakeUpv>:
	MCUSR &= ~(1<<WDRF);
	/* Start timed sequence */
	WDTCR = (1<<WDCE) | (1<<WDE);
	/* Set new prescaler (time-out) value = 64K cycles (~0.5 s) */
	WDTCR = prescale;
	asm volatile("sei"::);
     19a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     19e:	08 95       	ret

000001a0 <_Z10allowSleepb>:
     1a0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
     1a4:	08 95       	ret

000001a6 <_Z14SPI_MasterInitv>:
     1a6:	24 98       	cbi	0x04, 4	; 4
     1a8:	84 b1       	in	r24, 0x04	; 4
     1aa:	8c 62       	ori	r24, 0x2C	; 44
     1ac:	84 b9       	out	0x04, r24	; 4
     1ae:	2a 9a       	sbi	0x05, 2	; 5
     1b0:	8c b5       	in	r24, 0x2c	; 44
     1b2:	82 65       	ori	r24, 0x52	; 82
     1b4:	8c bd       	out	0x2c, r24	; 44
     1b6:	08 95       	ret

000001b8 <_Z12initSPISlavev>:
     1b8:	84 b1       	in	r24, 0x04	; 4
     1ba:	83 7d       	andi	r24, 0xD3	; 211
     1bc:	84 b9       	out	0x04, r24	; 4
     1be:	24 9a       	sbi	0x04, 4	; 4
     1c0:	8c b5       	in	r24, 0x2c	; 44
     1c2:	8f 7e       	andi	r24, 0xEF	; 239
     1c4:	8c bd       	out	0x2c, r24	; 44
     1c6:	8c b5       	in	r24, 0x2c	; 44
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	8c bd       	out	0x2c, r24	; 44
     1cc:	08 95       	ret

000001ce <_Z9enableSPIb>:
     1ce:	88 23       	and	r24, r24
     1d0:	21 f0       	breq	.+8      	; 0x1da <_Z9enableSPIb+0xc>
     1d2:	8c b5       	in	r24, 0x2c	; 44
     1d4:	80 64       	ori	r24, 0x40	; 64
     1d6:	8c bd       	out	0x2c, r24	; 44
     1d8:	08 95       	ret
     1da:	8c b5       	in	r24, 0x2c	; 44
     1dc:	8f 7b       	andi	r24, 0xBF	; 191
     1de:	8c bd       	out	0x2c, r24	; 44
     1e0:	08 95       	ret

000001e2 <_Z18enableSPIInterruptb>:
     1e2:	88 23       	and	r24, r24
     1e4:	21 f0       	breq	.+8      	; 0x1ee <_Z18enableSPIInterruptb+0xc>
     1e6:	8c b5       	in	r24, 0x2c	; 44
     1e8:	80 68       	ori	r24, 0x80	; 128
     1ea:	8c bd       	out	0x2c, r24	; 44
     1ec:	08 95       	ret
     1ee:	8c b5       	in	r24, 0x2c	; 44
     1f0:	8f 77       	andi	r24, 0x7F	; 127
     1f2:	8c bd       	out	0x2c, r24	; 44
     1f4:	08 95       	ret

000001f6 <_Z18SPI_MasterTransmitc>:
     1f6:	8e bd       	out	0x2e, r24	; 46
     1f8:	0d b4       	in	r0, 0x2d	; 45
     1fa:	07 fe       	sbrs	r0, 7
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <_Z18SPI_MasterTransmitc+0x2>
     1fe:	8e b5       	in	r24, 0x2e	; 46
     200:	08 95       	ret

00000202 <_Z11Init_CTC_T1hj>:
     202:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     206:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     20a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     20e:	87 70       	andi	r24, 0x07	; 7
     210:	88 60       	ori	r24, 0x08	; 8
     212:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     21c:	78 94       	sei
     21e:	08 95       	ret

00000220 <_Z11setPinStatehhb>:
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	e9 f0       	breq	.+58     	; 0x25e <_Z11setPinStatehhb+0x3e>
     224:	18 f0       	brcs	.+6      	; 0x22c <_Z11setPinStatehhb+0xc>
     226:	82 30       	cpi	r24, 0x02	; 2
     228:	99 f1       	breq	.+102    	; 0x290 <_Z11setPinStatehhb+0x70>
     22a:	08 95       	ret
     22c:	44 23       	and	r20, r20
     22e:	59 f0       	breq	.+22     	; 0x246 <_Z11setPinStatehhb+0x26>
     230:	25 b1       	in	r18, 0x05	; 5
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	02 c0       	rjmp	.+4      	; 0x23c <_Z11setPinStatehhb+0x1c>
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <_Z11setPinStatehhb+0x18>
     240:	82 2b       	or	r24, r18
     242:	85 b9       	out	0x05, r24	; 5
     244:	08 95       	ret
     246:	25 b1       	in	r18, 0x05	; 5
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <_Z11setPinStatehhb+0x32>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	6a 95       	dec	r22
     254:	e2 f7       	brpl	.-8      	; 0x24e <_Z11setPinStatehhb+0x2e>
     256:	80 95       	com	r24
     258:	82 23       	and	r24, r18
     25a:	85 b9       	out	0x05, r24	; 5
     25c:	08 95       	ret
     25e:	44 23       	and	r20, r20
     260:	59 f0       	breq	.+22     	; 0x278 <_Z11setPinStatehhb+0x58>
     262:	28 b1       	in	r18, 0x08	; 8
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	02 c0       	rjmp	.+4      	; 0x26e <_Z11setPinStatehhb+0x4e>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	6a 95       	dec	r22
     270:	e2 f7       	brpl	.-8      	; 0x26a <_Z11setPinStatehhb+0x4a>
     272:	82 2b       	or	r24, r18
     274:	88 b9       	out	0x08, r24	; 8
     276:	08 95       	ret
     278:	28 b1       	in	r18, 0x08	; 8
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <_Z11setPinStatehhb+0x64>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	6a 95       	dec	r22
     286:	e2 f7       	brpl	.-8      	; 0x280 <_Z11setPinStatehhb+0x60>
     288:	80 95       	com	r24
     28a:	82 23       	and	r24, r18
     28c:	88 b9       	out	0x08, r24	; 8
     28e:	08 95       	ret
     290:	44 23       	and	r20, r20
     292:	59 f0       	breq	.+22     	; 0x2aa <_Z11setPinStatehhb+0x8a>
     294:	2b b1       	in	r18, 0x0b	; 11
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <_Z11setPinStatehhb+0x80>
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	6a 95       	dec	r22
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <_Z11setPinStatehhb+0x7c>
     2a4:	82 2b       	or	r24, r18
     2a6:	8b b9       	out	0x0b, r24	; 11
     2a8:	08 95       	ret
     2aa:	2b b1       	in	r18, 0x0b	; 11
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <_Z11setPinStatehhb+0x96>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	6a 95       	dec	r22
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <_Z11setPinStatehhb+0x92>
     2ba:	80 95       	com	r24
     2bc:	82 23       	and	r24, r18
     2be:	8b b9       	out	0x0b, r24	; 11
     2c0:	08 95       	ret

000002c2 <_Z15setPinDirectionhhb>:
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	e9 f0       	breq	.+58     	; 0x300 <_Z15setPinDirectionhhb+0x3e>
     2c6:	18 f0       	brcs	.+6      	; 0x2ce <_Z15setPinDirectionhhb+0xc>
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	99 f1       	breq	.+102    	; 0x332 <_Z15setPinDirectionhhb+0x70>
     2cc:	08 95       	ret
     2ce:	44 23       	and	r20, r20
     2d0:	59 f0       	breq	.+22     	; 0x2e8 <_Z15setPinDirectionhhb+0x26>
     2d2:	24 b1       	in	r18, 0x04	; 4
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <_Z15setPinDirectionhhb+0x1c>
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	6a 95       	dec	r22
     2e0:	e2 f7       	brpl	.-8      	; 0x2da <_Z15setPinDirectionhhb+0x18>
     2e2:	82 2b       	or	r24, r18
     2e4:	84 b9       	out	0x04, r24	; 4
     2e6:	08 95       	ret
     2e8:	24 b1       	in	r18, 0x04	; 4
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <_Z15setPinDirectionhhb+0x32>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	6a 95       	dec	r22
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <_Z15setPinDirectionhhb+0x2e>
     2f8:	80 95       	com	r24
     2fa:	82 23       	and	r24, r18
     2fc:	84 b9       	out	0x04, r24	; 4
     2fe:	08 95       	ret
     300:	44 23       	and	r20, r20
     302:	59 f0       	breq	.+22     	; 0x31a <_Z15setPinDirectionhhb+0x58>
     304:	27 b1       	in	r18, 0x07	; 7
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 c0       	rjmp	.+4      	; 0x310 <_Z15setPinDirectionhhb+0x4e>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	6a 95       	dec	r22
     312:	e2 f7       	brpl	.-8      	; 0x30c <_Z15setPinDirectionhhb+0x4a>
     314:	82 2b       	or	r24, r18
     316:	87 b9       	out	0x07, r24	; 7
     318:	08 95       	ret
     31a:	27 b1       	in	r18, 0x07	; 7
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	02 c0       	rjmp	.+4      	; 0x326 <_Z15setPinDirectionhhb+0x64>
     322:	88 0f       	add	r24, r24
     324:	99 1f       	adc	r25, r25
     326:	6a 95       	dec	r22
     328:	e2 f7       	brpl	.-8      	; 0x322 <_Z15setPinDirectionhhb+0x60>
     32a:	80 95       	com	r24
     32c:	82 23       	and	r24, r18
     32e:	87 b9       	out	0x07, r24	; 7
     330:	08 95       	ret
     332:	44 23       	and	r20, r20
     334:	59 f0       	breq	.+22     	; 0x34c <_Z15setPinDirectionhhb+0x8a>
     336:	2a b1       	in	r18, 0x0a	; 10
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	02 c0       	rjmp	.+4      	; 0x342 <_Z15setPinDirectionhhb+0x80>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	6a 95       	dec	r22
     344:	e2 f7       	brpl	.-8      	; 0x33e <_Z15setPinDirectionhhb+0x7c>
     346:	82 2b       	or	r24, r18
     348:	8a b9       	out	0x0a, r24	; 10
     34a:	08 95       	ret
     34c:	2a b1       	in	r18, 0x0a	; 10
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	02 c0       	rjmp	.+4      	; 0x358 <_Z15setPinDirectionhhb+0x96>
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	6a 95       	dec	r22
     35a:	e2 f7       	brpl	.-8      	; 0x354 <_Z15setPinDirectionhhb+0x92>
     35c:	80 95       	com	r24
     35e:	82 23       	and	r24, r18
     360:	8a b9       	out	0x0a, r24	; 10
     362:	08 95       	ret

00000364 <_Z11getPinStatehh>:
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	69 f0       	breq	.+26     	; 0x382 <_Z11getPinStatehh+0x1e>
     368:	18 f0       	brcs	.+6      	; 0x370 <_Z11getPinStatehh+0xc>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	99 f0       	breq	.+38     	; 0x394 <_Z11getPinStatehh+0x30>
     36e:	1b c0       	rjmp	.+54     	; 0x3a6 <_Z11getPinStatehh+0x42>
     370:	83 b1       	in	r24, 0x03	; 3
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	02 c0       	rjmp	.+4      	; 0x37a <_Z11getPinStatehh+0x16>
     376:	95 95       	asr	r25
     378:	87 95       	ror	r24
     37a:	6a 95       	dec	r22
     37c:	e2 f7       	brpl	.-8      	; 0x376 <_Z11getPinStatehh+0x12>
     37e:	81 70       	andi	r24, 0x01	; 1
     380:	08 95       	ret
     382:	86 b1       	in	r24, 0x06	; 6
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	02 c0       	rjmp	.+4      	; 0x38c <_Z11getPinStatehh+0x28>
     388:	95 95       	asr	r25
     38a:	87 95       	ror	r24
     38c:	6a 95       	dec	r22
     38e:	e2 f7       	brpl	.-8      	; 0x388 <_Z11getPinStatehh+0x24>
     390:	81 70       	andi	r24, 0x01	; 1
     392:	08 95       	ret
     394:	89 b1       	in	r24, 0x09	; 9
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <_Z11getPinStatehh+0x3a>
     39a:	95 95       	asr	r25
     39c:	87 95       	ror	r24
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <_Z11getPinStatehh+0x36>
     3a2:	81 70       	andi	r24, 0x01	; 1
     3a4:	08 95       	ret
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	08 95       	ret

000003aa <_Z10USART_Initj>:
     3aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     3ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     3b2:	88 e1       	ldi	r24, 0x18	; 24
     3b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     3b8:	8e e0       	ldi	r24, 0x0E	; 14
     3ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     3be:	08 95       	ret

000003c0 <_Z14USART_Transmith>:
     3c0:	e0 ec       	ldi	r30, 0xC0	; 192
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	90 81       	ld	r25, Z
     3c6:	95 ff       	sbrs	r25, 5
     3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <_Z14USART_Transmith+0x4>
     3ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     3ce:	08 95       	ret

000003d0 <_Z13milliHappenedv>:
}


void milliHappened(){
	time += 1;
     3d0:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <time>
     3d4:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <time+0x1>
     3d8:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <time+0x2>
     3dc:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <time+0x3>
     3e0:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <time+0x4>
     3e4:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <time+0x5>
     3e8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <time+0x6>
     3ec:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <time+0x7>
     3f0:	a1 e0       	ldi	r26, 0x01	; 1
     3f2:	0e 94 9e 0b 	call	0x173c	; 0x173c <__adddi3_s8>
     3f6:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <time>
     3fa:	30 93 46 01 	sts	0x0146, r19	; 0x800146 <time+0x1>
     3fe:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <time+0x2>
     402:	50 93 48 01 	sts	0x0148, r21	; 0x800148 <time+0x3>
     406:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <time+0x4>
     40a:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <time+0x5>
     40e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <time+0x6>
     412:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <time+0x7>
	if(cdown != 0){
     416:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cdown>
     41a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <cdown+0x1>
     41e:	89 2b       	or	r24, r25
     420:	49 f0       	breq	.+18     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		cdown -= 1;
     422:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cdown>
     426:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <cdown+0x1>
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <cdown+0x1>
     430:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cdown>
     434:	08 95       	ret

00000436 <__vector_6>:
	}
	count1 += 1;
}*/


ISR(WDT_vect){
     436:	1f 92       	push	r1
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	0f 92       	push	r0
     43e:	11 24       	eor	r1, r1
     440:	8f 93       	push	r24
	MCUSR &= ~(1 << SE);
     442:	84 b7       	in	r24, 0x34	; 52
     444:	8e 7f       	andi	r24, 0xFE	; 254
     446:	84 bf       	out	0x34, r24	; 52
     448:	8f 91       	pop	r24
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <_Z10numToArrayy>:
	USART_Transmit('\n');
	while(*p != 0){
		USART_Transmit(*p);
		p++;
	}
}
     454:	0f 93       	push	r16
     456:	ee e8       	ldi	r30, 0x8E	; 142
     458:	f1 e0       	ldi	r31, 0x01	; 1
     45a:	a6 e9       	ldi	r26, 0x96	; 150
     45c:	b1 e0       	ldi	r27, 0x01	; 1
     45e:	21 93       	st	Z+, r18
     460:	08 e0       	ldi	r16, 0x08	; 8
     462:	0e 94 82 0b 	call	0x1704	; 0x1704 <__lshrdi3>
     466:	ea 17       	cp	r30, r26
     468:	fb 07       	cpc	r31, r27
     46a:	c9 f7       	brne	.-14     	; 0x45e <_Z10numToArrayy+0xa>
     46c:	8e e8       	ldi	r24, 0x8E	; 142
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <_Z10hexToASCIIh>:
     474:	8a 30       	cpi	r24, 0x0A	; 10
     476:	10 f0       	brcs	.+4      	; 0x47c <_Z10hexToASCIIh+0x8>
     478:	89 5c       	subi	r24, 0xC9	; 201
     47a:	08 95       	ret
     47c:	80 5d       	subi	r24, 0xD0	; 208
     47e:	08 95       	ret

00000480 <_Z11hexToStringh>:
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	18 2f       	mov	r17, r24
     488:	82 95       	swap	r24
     48a:	8f 70       	andi	r24, 0x0F	; 15
     48c:	0e 94 3a 02 	call	0x474	; 0x474 <_Z10hexToASCIIh>
     490:	c6 e9       	ldi	r28, 0x96	; 150
     492:	d1 e0       	ldi	r29, 0x01	; 1
     494:	88 83       	st	Y, r24
     496:	81 2f       	mov	r24, r17
     498:	8f 70       	andi	r24, 0x0F	; 15
     49a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <_ZZ11hexToStringhE4temp>
     49e:	0e 94 3a 02 	call	0x474	; 0x474 <_Z10hexToASCIIh>
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	1a 82       	std	Y+2, r1	; 0x02
     4a6:	ce 01       	movw	r24, r28
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	08 95       	ret

000004b0 <_Z11printNumbery>:
     4b0:	2f 92       	push	r2
     4b2:	3f 92       	push	r3
     4b4:	4f 92       	push	r4
     4b6:	5f 92       	push	r5
     4b8:	6f 92       	push	r6
     4ba:	7f 92       	push	r7
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
     4d8:	c7 56       	subi	r28, 0x67	; 103
     4da:	d1 09       	sbc	r29, r1
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	a6 96       	adiw	r28, 0x26	; 38
     4e8:	2f af       	std	Y+63, r18	; 0x3f
     4ea:	a6 97       	sbiw	r28, 0x26	; 38
     4ec:	83 2e       	mov	r8, r19
     4ee:	74 2e       	mov	r7, r20
     4f0:	65 2e       	mov	r6, r21
     4f2:	56 2e       	mov	r5, r22
     4f4:	47 2e       	mov	r4, r23
     4f6:	38 2e       	mov	r3, r24
     4f8:	29 2e       	mov	r2, r25
     4fa:	a0 e0       	ldi	r26, 0x00	; 0
     4fc:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__cmpdi2_s8>
     500:	21 f4       	brne	.+8      	; 0x50a <_Z11printNumbery+0x5a>
     502:	80 e3       	ldi	r24, 0x30	; 48
     504:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
     508:	52 c0       	rjmp	.+164    	; 0x5ae <_Z11printNumbery+0xfe>
     50a:	91 2c       	mov	r9, r1
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	8c 0f       	add	r24, r28
     512:	9d 1f       	adc	r25, r29
     514:	89 0d       	add	r24, r9
     516:	91 1d       	adc	r25, r1
     518:	a8 96       	adiw	r28, 0x28	; 40
     51a:	9f af       	std	Y+63, r25	; 0x3f
     51c:	8e af       	std	Y+62, r24	; 0x3e
     51e:	a8 97       	sbiw	r28, 0x28	; 40
     520:	0f 2e       	mov	r0, r31
     522:	fa e0       	ldi	r31, 0x0A	; 10
     524:	af 2e       	mov	r10, r31
     526:	f0 2d       	mov	r31, r0
     528:	b1 2c       	mov	r11, r1
     52a:	c1 2c       	mov	r12, r1
     52c:	d1 2c       	mov	r13, r1
     52e:	e1 2c       	mov	r14, r1
     530:	f1 2c       	mov	r15, r1
     532:	00 e0       	ldi	r16, 0x00	; 0
     534:	10 e0       	ldi	r17, 0x00	; 0
     536:	a6 96       	adiw	r28, 0x26	; 38
     538:	2f ad       	ldd	r18, Y+63	; 0x3f
     53a:	a6 97       	sbiw	r28, 0x26	; 38
     53c:	38 2d       	mov	r19, r8
     53e:	47 2d       	mov	r20, r7
     540:	56 2d       	mov	r21, r6
     542:	65 2d       	mov	r22, r5
     544:	74 2d       	mov	r23, r4
     546:	83 2d       	mov	r24, r3
     548:	92 2d       	mov	r25, r2
     54a:	0e 94 08 0b 	call	0x1610	; 0x1610 <__umoddi3>
     54e:	20 5d       	subi	r18, 0xD0	; 208
     550:	a8 96       	adiw	r28, 0x28	; 40
     552:	ee ad       	ldd	r30, Y+62	; 0x3e
     554:	ff ad       	ldd	r31, Y+63	; 0x3f
     556:	a8 97       	sbiw	r28, 0x28	; 40
     558:	20 83       	st	Z, r18
     55a:	a6 96       	adiw	r28, 0x26	; 38
     55c:	2f ad       	ldd	r18, Y+63	; 0x3f
     55e:	a6 97       	sbiw	r28, 0x26	; 38
     560:	38 2d       	mov	r19, r8
     562:	47 2d       	mov	r20, r7
     564:	56 2d       	mov	r21, r6
     566:	65 2d       	mov	r22, r5
     568:	74 2d       	mov	r23, r4
     56a:	83 2d       	mov	r24, r3
     56c:	92 2d       	mov	r25, r2
     56e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__udivdi3>
     572:	a6 96       	adiw	r28, 0x26	; 38
     574:	2f af       	std	Y+63, r18	; 0x3f
     576:	a6 97       	sbiw	r28, 0x26	; 38
     578:	83 2e       	mov	r8, r19
     57a:	74 2e       	mov	r7, r20
     57c:	65 2e       	mov	r6, r21
     57e:	56 2e       	mov	r5, r22
     580:	47 2e       	mov	r4, r23
     582:	38 2e       	mov	r3, r24
     584:	29 2e       	mov	r2, r25
     586:	93 94       	inc	r9
     588:	a0 e0       	ldi	r26, 0x00	; 0
     58a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__cmpdi2_s8>
     58e:	09 f0       	breq	.+2      	; 0x592 <_Z11printNumbery+0xe2>
     590:	bd cf       	rjmp	.-134    	; 0x50c <_Z11printNumbery+0x5c>
     592:	99 20       	and	r9, r9
     594:	61 f0       	breq	.+24     	; 0x5ae <_Z11printNumbery+0xfe>
     596:	9a 94       	dec	r9
     598:	e1 e0       	ldi	r30, 0x01	; 1
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	ec 0f       	add	r30, r28
     59e:	fd 1f       	adc	r31, r29
     5a0:	e9 0d       	add	r30, r9
     5a2:	f1 1d       	adc	r31, r1
     5a4:	80 81       	ld	r24, Z
     5a6:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
     5aa:	91 10       	cpse	r9, r1
     5ac:	f4 cf       	rjmp	.-24     	; 0x596 <_Z11printNumbery+0xe6>
     5ae:	80 e2       	ldi	r24, 0x20	; 32
     5b0:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
     5b4:	c9 59       	subi	r28, 0x99	; 153
     5b6:	df 4f       	sbci	r29, 0xFF	; 255
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	bf 90       	pop	r11
     5d4:	af 90       	pop	r10
     5d6:	9f 90       	pop	r9
     5d8:	8f 90       	pop	r8
     5da:	7f 90       	pop	r7
     5dc:	6f 90       	pop	r6
     5de:	5f 90       	pop	r5
     5e0:	4f 90       	pop	r4
     5e2:	3f 90       	pop	r3
     5e4:	2f 90       	pop	r2
     5e6:	08 95       	ret

000005e8 <_Z6NotifyPKc>:
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	ec 01       	movw	r28, r24
     5ee:	8d e0       	ldi	r24, 0x0D	; 13
     5f0:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
     5f4:	8a e0       	ldi	r24, 0x0A	; 10
     5f6:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
     5fa:	fe 01       	movw	r30, r28
     5fc:	84 91       	lpm	r24, Z
     5fe:	88 23       	and	r24, r24
     600:	49 f0       	breq	.+18     	; 0x614 <_Z6NotifyPKc+0x2c>
     602:	fe 01       	movw	r30, r28
     604:	84 91       	lpm	r24, Z
     606:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
     60a:	21 96       	adiw	r28, 0x01	; 1
     60c:	fe 01       	movw	r30, r28
     60e:	84 91       	lpm	r24, Z
     610:	81 11       	cpse	r24, r1
     612:	f7 cf       	rjmp	.-18     	; 0x602 <_Z6NotifyPKc+0x1a>
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <_Z15printStringCRNLPKc>:

void printStringCRNL(const char *p){
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	ec 01       	movw	r28, r24
	USART_Transmit('\r');
     620:	8d e0       	ldi	r24, 0x0D	; 13
     622:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
	USART_Transmit('\n');
     626:	8a e0       	ldi	r24, 0x0A	; 10
     628:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
	while(*p != 0){
     62c:	88 81       	ld	r24, Y
     62e:	88 23       	and	r24, r24
     630:	31 f0       	breq	.+12     	; 0x63e <_Z15printStringCRNLPKc+0x24>
     632:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     634:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
}

void printStringCRNL(const char *p){
	USART_Transmit('\r');
	USART_Transmit('\n');
	while(*p != 0){
     638:	89 91       	ld	r24, Y+
     63a:	81 11       	cpse	r24, r1
     63c:	fb cf       	rjmp	.-10     	; 0x634 <_Z15printStringCRNLPKc+0x1a>
		USART_Transmit(*p);
		p++;
	}
}
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <_Z11printStringPKc>:

void printString(const char *p){
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	ec 01       	movw	r28, r24
	while(*p != 0){
     64a:	88 81       	ld	r24, Y
     64c:	88 23       	and	r24, r24
     64e:	31 f0       	breq	.+12     	; 0x65c <_Z11printStringPKc+0x18>
     650:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     652:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
		p++;
	}
}

void printString(const char *p){
	while(*p != 0){
     656:	89 91       	ld	r24, Y+
     658:	81 11       	cpse	r24, r1
     65a:	fb cf       	rjmp	.-10     	; 0x652 <_Z11printStringPKc+0xe>
		USART_Transmit(*p);
		p++;
	}
}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <_Z16hexArrayToStringPhh>:
		data >>= 8;
	}
	return array;
} 

char* hexArrayToString(uint8_t *data, uint8_t length){
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	f6 2e       	mov	r15, r22
	static char str[64], t;
	data += length - 1;
     66e:	06 2f       	mov	r16, r22
     670:	10 e0       	ldi	r17, 0x00	; 0
     672:	01 50       	subi	r16, 0x01	; 1
     674:	11 09       	sbc	r17, r1
     676:	08 0f       	add	r16, r24
     678:	19 1f       	adc	r17, r25
		p++;
	}
}

void printChar(unsigned char data){
	USART_Transmit(data);
     67a:	80 e3       	ldi	r24, 0x30	; 48
     67c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
     680:	88 e7       	ldi	r24, 0x78	; 120
     682:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z14USART_Transmith>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     686:	ff 20       	and	r15, r15
     688:	81 f0       	breq	.+32     	; 0x6aa <_Z16hexArrayToStringPhh+0x48>
     68a:	e8 01       	movw	r28, r16
     68c:	21 96       	adiw	r28, 0x01	; 1
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	8f 0d       	add	r24, r15
     692:	08 1b       	sub	r16, r24
     694:	11 09       	sbc	r17, r1
	{	
		t = *data;
     696:	8a 91       	ld	r24, -Y
     698:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_ZZ16hexArrayToStringPhhE1t>
		printString(hexToString(t));
     69c:	0e 94 40 02 	call	0x480	; 0x480 <_Z11hexToStringh>
     6a0:	0e 94 22 03 	call	0x644	; 0x644 <_Z11printStringPKc>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     6a4:	c0 17       	cp	r28, r16
     6a6:	d1 07       	cpc	r29, r17
     6a8:	b1 f7       	brne	.-20     	; 0x696 <_Z16hexArrayToStringPhh+0x34>
	{	
		t = *data;
		printString(hexToString(t));
		data -= 1;
	}
	str[length + 2] = 0;
     6aa:	ef 2d       	mov	r30, r15
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	e3 5b       	subi	r30, 0xB3	; 179
     6b0:	fe 4f       	sbci	r31, 0xFE	; 254
     6b2:	12 82       	std	Z+2, r1	; 0x02
	return str;
}
     6b4:	8d e4       	ldi	r24, 0x4D	; 77
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	08 95       	ret

000006c4 <_Z14printHexNumberyh>:
	ascii[1] = hexToASCII(temp);
	ascii[2] = '\0';
	return ascii;
}

void printHexNumber(uint64_t data,uint8_t length){
     6c4:	0f 93       	push	r16
	printString(hexArrayToString(numToArray((data)),length));
     6c6:	0e 94 2a 02 	call	0x454	; 0x454 <_Z10numToArrayy>
     6ca:	60 2f       	mov	r22, r16
     6cc:	0e 94 31 03 	call	0x662	; 0x662 <_Z16hexArrayToStringPhh>
     6d0:	0e 94 22 03 	call	0x644	; 0x644 <_Z11printStringPKc>
}
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <_ZN8NRF24L0114toggleActivateEv>:
	for(i = 0; i < BufferLength_MasterRX; i++){
		SPI_MasterTransmit(*data);
		data += 1;
	}
	CSN = 1;
}
     6d8:	40 98       	cbi	0x08, 0	; 8
     6da:	80 e5       	ldi	r24, 0x50	; 80
     6dc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     6e0:	83 e7       	ldi	r24, 0x73	; 115
     6e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     6e6:	40 9a       	sbi	0x08, 0	; 8
     6e8:	08 95       	ret

000006ea <_ZN8NRF24L0114sendSPICommandEh>:
     6ea:	86 2f       	mov	r24, r22
     6ec:	40 98       	cbi	0x08, 0	; 8
     6ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     6f2:	40 9a       	sbi	0x08, 0	; 8
     6f4:	08 95       	ret

000006f6 <_ZN8NRF24L0115readSPIRegisterEhh>:
     6f6:	af 92       	push	r10
     6f8:	bf 92       	push	r11
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	86 2f       	mov	r24, r22
     70c:	a4 2e       	mov	r10, r20
     70e:	40 98       	cbi	0x08, 0	; 8
     710:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     714:	aa 20       	and	r10, r10
     716:	21 f1       	breq	.+72     	; 0x760 <_ZN8NRF24L0115readSPIRegisterEhh+0x6a>
     718:	d0 e0       	ldi	r29, 0x00	; 0
     71a:	c0 e0       	ldi	r28, 0x00	; 0
     71c:	b1 2c       	mov	r11, r1
     71e:	c1 2c       	mov	r12, r1
     720:	d1 2c       	mov	r13, r1
     722:	e1 2c       	mov	r14, r1
     724:	f1 2c       	mov	r15, r1
     726:	00 e0       	ldi	r16, 0x00	; 0
     728:	10 e0       	ldi	r17, 0x00	; 0
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     730:	2c 2f       	mov	r18, r28
     732:	28 2b       	or	r18, r24
     734:	3b 2d       	mov	r19, r11
     736:	4c 2d       	mov	r20, r12
     738:	5d 2d       	mov	r21, r13
     73a:	6e 2d       	mov	r22, r14
     73c:	7f 2d       	mov	r23, r15
     73e:	80 2f       	mov	r24, r16
     740:	91 2f       	mov	r25, r17
     742:	08 e0       	ldi	r16, 0x08	; 8
     744:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__ashldi3>
     748:	c2 2f       	mov	r28, r18
     74a:	b3 2e       	mov	r11, r19
     74c:	c4 2e       	mov	r12, r20
     74e:	d5 2e       	mov	r13, r21
     750:	e6 2e       	mov	r14, r22
     752:	f7 2e       	mov	r15, r23
     754:	08 2f       	mov	r16, r24
     756:	19 2f       	mov	r17, r25
     758:	df 5f       	subi	r29, 0xFF	; 255
     75a:	da 11       	cpse	r29, r10
     75c:	e6 cf       	rjmp	.-52     	; 0x72a <_ZN8NRF24L0115readSPIRegisterEhh+0x34>
     75e:	08 c0       	rjmp	.+16     	; 0x770 <_ZN8NRF24L0115readSPIRegisterEhh+0x7a>
     760:	c0 e0       	ldi	r28, 0x00	; 0
     762:	b1 2c       	mov	r11, r1
     764:	c1 2c       	mov	r12, r1
     766:	d1 2c       	mov	r13, r1
     768:	e1 2c       	mov	r14, r1
     76a:	f1 2c       	mov	r15, r1
     76c:	00 e0       	ldi	r16, 0x00	; 0
     76e:	10 e0       	ldi	r17, 0x00	; 0
     770:	40 9a       	sbi	0x08, 0	; 8
     772:	2c 2f       	mov	r18, r28
     774:	3b 2d       	mov	r19, r11
     776:	4c 2d       	mov	r20, r12
     778:	5d 2d       	mov	r21, r13
     77a:	6e 2d       	mov	r22, r14
     77c:	7f 2d       	mov	r23, r15
     77e:	80 2f       	mov	r24, r16
     780:	91 2f       	mov	r25, r17
     782:	08 e0       	ldi	r16, 0x08	; 8
     784:	0e 94 82 0b 	call	0x1704	; 0x1704 <__lshrdi3>
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	af 90       	pop	r10
     79c:	08 95       	ret

0000079e <_ZN8NRF24L018isRXFullEv>:
     79e:	41 e0       	ldi	r20, 0x01	; 1
     7a0:	67 e1       	ldi	r22, 0x17	; 23
     7a2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN8NRF24L0115readSPIRegisterEhh>
     7a6:	82 2f       	mov	r24, r18
     7a8:	82 70       	andi	r24, 0x02	; 2
     7aa:	08 95       	ret

000007ac <_ZN8NRF24L019isRXEmptyEv>:
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	67 e1       	ldi	r22, 0x17	; 23
     7b0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN8NRF24L0115readSPIRegisterEhh>
     7b4:	82 2f       	mov	r24, r18
     7b6:	81 70       	andi	r24, 0x01	; 1
     7b8:	08 95       	ret

000007ba <_ZN8NRF24L0116writeSPIRegisterEhyh>:
     7ba:	9f 92       	push	r9
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	c2 2f       	mov	r28, r18
     7d2:	d3 2f       	mov	r29, r19
     7d4:	b4 2e       	mov	r11, r20
     7d6:	a5 2e       	mov	r10, r21
     7d8:	40 98       	cbi	0x08, 0	; 8
     7da:	86 2f       	mov	r24, r22
     7dc:	80 62       	ori	r24, 0x20	; 32
     7de:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     7e2:	98 2e       	mov	r9, r24
     7e4:	cc 20       	and	r12, r12
     7e6:	d1 f0       	breq	.+52     	; 0x81c <_ZN8NRF24L0116writeSPIRegisterEhyh+0x62>
     7e8:	d1 2c       	mov	r13, r1
     7ea:	8e 2d       	mov	r24, r14
     7ec:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     7f0:	2e 2d       	mov	r18, r14
     7f2:	3f 2d       	mov	r19, r15
     7f4:	40 2f       	mov	r20, r16
     7f6:	51 2f       	mov	r21, r17
     7f8:	6c 2f       	mov	r22, r28
     7fa:	7d 2f       	mov	r23, r29
     7fc:	8b 2d       	mov	r24, r11
     7fe:	9a 2d       	mov	r25, r10
     800:	08 e0       	ldi	r16, 0x08	; 8
     802:	0e 94 82 0b 	call	0x1704	; 0x1704 <__lshrdi3>
     806:	e2 2e       	mov	r14, r18
     808:	f3 2e       	mov	r15, r19
     80a:	04 2f       	mov	r16, r20
     80c:	15 2f       	mov	r17, r21
     80e:	c6 2f       	mov	r28, r22
     810:	d7 2f       	mov	r29, r23
     812:	b8 2e       	mov	r11, r24
     814:	a9 2e       	mov	r10, r25
     816:	d3 94       	inc	r13
     818:	dc 10       	cpse	r13, r12
     81a:	e7 cf       	rjmp	.-50     	; 0x7ea <_ZN8NRF24L0116writeSPIRegisterEhyh+0x30>
     81c:	40 9a       	sbi	0x08, 0	; 8
     81e:	89 2d       	mov	r24, r9
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	bf 90       	pop	r11
     832:	af 90       	pop	r10
     834:	9f 90       	pop	r9
     836:	08 95       	ret

00000838 <_ZN8NRF24L017powerONEb>:
     838:	cf 92       	push	r12
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	ec 01       	movw	r28, r24
     848:	e6 2e       	mov	r14, r22
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN8NRF24L0115readSPIRegisterEhh>
     852:	2d 7f       	andi	r18, 0xFD	; 253
     854:	ee 0c       	add	r14, r14
     856:	e2 2a       	or	r14, r18
     858:	eb 82       	std	Y+3, r14	; 0x03
     85a:	cc 24       	eor	r12, r12
     85c:	c3 94       	inc	r12
     85e:	f1 2c       	mov	r15, r1
     860:	00 e0       	ldi	r16, 0x00	; 0
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	ce 01       	movw	r24, r28
     870:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN8NRF24L0116writeSPIRegisterEhyh>
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	cf 90       	pop	r12
     882:	08 95       	ret

00000884 <_ZN8NRF24L017setModeEb>:
     884:	af 92       	push	r10
     886:	bf 92       	push	r11
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	ec 01       	movw	r28, r24
     89a:	d6 2e       	mov	r13, r22
     89c:	41 e0       	ldi	r20, 0x01	; 1
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN8NRF24L0115readSPIRegisterEhh>
     8a4:	2b 83       	std	Y+3, r18	; 0x03
     8a6:	01 e0       	ldi	r16, 0x01	; 1
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z14printHexNumberyh>
     8ba:	8b 81       	ldd	r24, Y+3	; 0x03
     8bc:	8e 7f       	andi	r24, 0xFE	; 254
     8be:	ed 2c       	mov	r14, r13
     8c0:	e8 2a       	or	r14, r24
     8c2:	eb 82       	std	Y+3, r14	; 0x03
     8c4:	cc 24       	eor	r12, r12
     8c6:	c3 94       	inc	r12
     8c8:	f1 2c       	mov	r15, r1
     8ca:	00 e0       	ldi	r16, 0x00	; 0
     8cc:	10 e0       	ldi	r17, 0x00	; 0
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	ce 01       	movw	r24, r28
     8da:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN8NRF24L0116writeSPIRegisterEhyh>
     8de:	dd 20       	and	r13, r13
     8e0:	29 f0       	breq	.+10     	; 0x8ec <_ZN8NRF24L017setModeEb+0x68>
     8e2:	8d ed       	ldi	r24, 0xDD	; 221
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z6NotifyPKc>
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <_ZN8NRF24L017setModeEb+0x70>
     8ec:	87 eb       	ldi	r24, 0xB7	; 183
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z6NotifyPKc>
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	ce 01       	movw	r24, r28
     8fa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN8NRF24L0115readSPIRegisterEhh>
     8fe:	ab 80       	ldd	r10, Y+3	; 0x03
     900:	b1 2c       	mov	r11, r1
     902:	c1 2c       	mov	r12, r1
     904:	d1 2c       	mov	r13, r1
     906:	e1 2c       	mov	r14, r1
     908:	f1 2c       	mov	r15, r1
     90a:	00 e0       	ldi	r16, 0x00	; 0
     90c:	10 e0       	ldi	r17, 0x00	; 0
     90e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__cmpdi2>
     912:	29 f0       	breq	.+10     	; 0x91e <__stack+0x1f>
     914:	81 e8       	ldi	r24, 0x81	; 129
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z6NotifyPKc>
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0x27>
     91e:	88 e6       	ldi	r24, 0x68	; 104
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z6NotifyPKc>
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	bf 90       	pop	r11
     938:	af 90       	pop	r10
     93a:	08 95       	ret

0000093c <_ZN8NRF24L0120enableACKWithPayloadEb>:
     93c:	cf 92       	push	r12
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
     94c:	e6 2e       	mov	r14, r22
     94e:	41 e0       	ldi	r20, 0x01	; 1
     950:	6d e1       	ldi	r22, 0x1D	; 29
     952:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN8NRF24L0115readSPIRegisterEhh>
     956:	2d 7f       	andi	r18, 0xFD	; 253
     958:	ee 0c       	add	r14, r14
     95a:	e2 2a       	or	r14, r18
     95c:	eb 82       	std	Y+3, r14	; 0x03
     95e:	cc 24       	eor	r12, r12
     960:	c3 94       	inc	r12
     962:	f1 2c       	mov	r15, r1
     964:	00 e0       	ldi	r16, 0x00	; 0
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	6d e1       	ldi	r22, 0x1D	; 29
     972:	ce 01       	movw	r24, r28
     974:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN8NRF24L0116writeSPIRegisterEhyh>
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	cf 90       	pop	r12
     986:	08 95       	ret

00000988 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>:
     988:	cf 92       	push	r12
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	ec 01       	movw	r28, r24
     998:	e6 2e       	mov	r14, r22
     99a:	41 e0       	ldi	r20, 0x01	; 1
     99c:	6d e1       	ldi	r22, 0x1D	; 29
     99e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN8NRF24L0115readSPIRegisterEhh>
     9a2:	2b 7f       	andi	r18, 0xFB	; 251
     9a4:	ee 0c       	add	r14, r14
     9a6:	ee 0c       	add	r14, r14
     9a8:	e2 2a       	or	r14, r18
     9aa:	eb 82       	std	Y+3, r14	; 0x03
     9ac:	cc 24       	eor	r12, r12
     9ae:	c3 94       	inc	r12
     9b0:	f1 2c       	mov	r15, r1
     9b2:	00 e0       	ldi	r16, 0x00	; 0
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	6d e1       	ldi	r22, 0x1D	; 29
     9c0:	ce 01       	movw	r24, r28
     9c2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN8NRF24L0116writeSPIRegisterEhyh>
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	cf 90       	pop	r12
     9d4:	08 95       	ret

000009d6 <_ZN8NRF24L0118enableDPLForRXPipeEhb>:
     9d6:	af 92       	push	r10
     9d8:	bf 92       	push	r11
     9da:	cf 92       	push	r12
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	66 30       	cpi	r22, 0x06	; 6
     9ea:	48 f5       	brcc	.+82     	; 0xa3e <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x68>
     9ec:	c4 2f       	mov	r28, r20
     9ee:	d6 2f       	mov	r29, r22
     9f0:	5c 01       	movw	r10, r24
     9f2:	41 e0       	ldi	r20, 0x01	; 1
     9f4:	6c e1       	ldi	r22, 0x1C	; 28
     9f6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN8NRF24L0115readSPIRegisterEhh>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0d 2e       	mov	r0, r29
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x30>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	0a 94       	dec	r0
     a08:	e2 f7       	brpl	.-8      	; 0xa02 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x2c>
     a0a:	80 95       	com	r24
     a0c:	82 23       	and	r24, r18
     a0e:	4c 2f       	mov	r20, r28
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x42>
     a14:	44 0f       	add	r20, r20
     a16:	55 1f       	adc	r21, r21
     a18:	da 95       	dec	r29
     a1a:	e2 f7       	brpl	.-8      	; 0xa14 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x3e>
     a1c:	e8 2e       	mov	r14, r24
     a1e:	e4 2a       	or	r14, r20
     a20:	f5 01       	movw	r30, r10
     a22:	e3 82       	std	Z+3, r14	; 0x03
     a24:	cc 24       	eor	r12, r12
     a26:	c3 94       	inc	r12
     a28:	f1 2c       	mov	r15, r1
     a2a:	00 e0       	ldi	r16, 0x00	; 0
     a2c:	10 e0       	ldi	r17, 0x00	; 0
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	6c e1       	ldi	r22, 0x1C	; 28
     a38:	c5 01       	movw	r24, r10
     a3a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	cf 90       	pop	r12
     a4c:	bf 90       	pop	r11
     a4e:	af 90       	pop	r10
     a50:	08 95       	ret

00000a52 <_ZN8NRF24L0113setRFDataRateEb>:
     a52:	cf 92       	push	r12
     a54:	ef 92       	push	r14
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	ec 01       	movw	r28, r24
     a62:	e6 2e       	mov	r14, r22
     a64:	41 e0       	ldi	r20, 0x01	; 1
     a66:	66 e0       	ldi	r22, 0x06	; 6
     a68:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN8NRF24L0115readSPIRegisterEhh>
     a6c:	27 7f       	andi	r18, 0xF7	; 247
     a6e:	ee 0c       	add	r14, r14
     a70:	ee 0c       	add	r14, r14
     a72:	ee 0c       	add	r14, r14
     a74:	e2 2a       	or	r14, r18
     a76:	eb 82       	std	Y+3, r14	; 0x03
     a78:	cc 24       	eor	r12, r12
     a7a:	c3 94       	inc	r12
     a7c:	f1 2c       	mov	r15, r1
     a7e:	00 e0       	ldi	r16, 0x00	; 0
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	66 e0       	ldi	r22, 0x06	; 6
     a8c:	ce 01       	movw	r24, r28
     a8e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	cf 90       	pop	r12
     aa0:	08 95       	ret

00000aa2 <_ZN8NRF24L0118setTransmitAddressEy>:
     aa2:	cf 92       	push	r12
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	0f 2e       	mov	r0, r31
     aae:	f5 e0       	ldi	r31, 0x05	; 5
     ab0:	cf 2e       	mov	r12, r31
     ab2:	f0 2d       	mov	r31, r0
     ab4:	e0 2e       	mov	r14, r16
     ab6:	f1 2e       	mov	r15, r17
     ab8:	02 2f       	mov	r16, r18
     aba:	13 2f       	mov	r17, r19
     abc:	24 2f       	mov	r18, r20
     abe:	35 2f       	mov	r19, r21
     ac0:	46 2f       	mov	r20, r22
     ac2:	57 2f       	mov	r21, r23
     ac4:	60 e1       	ldi	r22, 0x10	; 16
     ac6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN8NRF24L0116writeSPIRegisterEhyh>
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	ef 90       	pop	r14
     ad2:	cf 90       	pop	r12
     ad4:	08 95       	ret

00000ad6 <_ZN8NRF24L0118setReceive0AddressEy>:
     ad6:	cf 92       	push	r12
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	0f 2e       	mov	r0, r31
     ae2:	f5 e0       	ldi	r31, 0x05	; 5
     ae4:	cf 2e       	mov	r12, r31
     ae6:	f0 2d       	mov	r31, r0
     ae8:	e0 2e       	mov	r14, r16
     aea:	f1 2e       	mov	r15, r17
     aec:	02 2f       	mov	r16, r18
     aee:	13 2f       	mov	r17, r19
     af0:	24 2f       	mov	r18, r20
     af2:	35 2f       	mov	r19, r21
     af4:	46 2f       	mov	r20, r22
     af6:	57 2f       	mov	r21, r23
     af8:	6a e0       	ldi	r22, 0x0A	; 10
     afa:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN8NRF24L0116writeSPIRegisterEhyh>
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	cf 90       	pop	r12
     b08:	08 95       	ret

00000b0a <_ZN8NRF24L0110initializeEv>:
     b0a:	cf 92       	push	r12
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	ec 01       	movw	r28, r24
     b1a:	38 9a       	sbi	0x07, 0	; 7
     b1c:	39 9a       	sbi	0x07, 1	; 7
     b1e:	41 9a       	sbi	0x08, 1	; 8
     b20:	57 9a       	sbi	0x0a, 7	; 10
     b22:	1a 82       	std	Y+2, r1	; 0x02
     b24:	85 e2       	ldi	r24, 0x25	; 37
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z6NotifyPKc>
     b2c:	28 81       	ld	r18, Y
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z11printNumbery>
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z6NotifyPKc>
     b48:	29 81       	ldd	r18, Y+1	; 0x01
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z11printNumbery>
     b5c:	05 eb       	ldi	r16, 0xB5	; 181
     b5e:	1a eb       	ldi	r17, 0xBA	; 186
     b60:	2a eb       	ldi	r18, 0xBA	; 186
     b62:	3a eb       	ldi	r19, 0xBA	; 186
     b64:	4a eb       	ldi	r20, 0xBA	; 186
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	ce 01       	movw	r24, r28
     b6e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN8NRF24L0118setTransmitAddressEy>
     b72:	2a eb       	ldi	r18, 0xBA	; 186
     b74:	3a eb       	ldi	r19, 0xBA	; 186
     b76:	4a eb       	ldi	r20, 0xBA	; 186
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	ce 01       	movw	r24, r28
     b80:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN8NRF24L0118setReceive0AddressEy>
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	ce 01       	movw	r24, r28
     b88:	0e 94 29 05 	call	0xa52	; 0xa52 <_ZN8NRF24L0113setRFDataRateEb>
     b8c:	6f 81       	ldd	r22, Y+7	; 0x07
     b8e:	ce 01       	movw	r24, r28
     b90:	0e 94 42 04 	call	0x884	; 0x884 <_ZN8NRF24L017setModeEb>
     b94:	88 85       	ldd	r24, Y+8	; 0x08
     b96:	88 23       	and	r24, r24
     b98:	99 f0       	breq	.+38     	; 0xbc0 <_ZN8NRF24L0110initializeEv+0xb6>
     b9a:	ce 01       	movw	r24, r28
     b9c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN8NRF24L0114toggleActivateEv>
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	ce 01       	movw	r24, r28
     ba4:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	ce 01       	movw	r24, r28
     bae:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN8NRF24L0118enableDPLForRXPipeEhb>
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	ce 01       	movw	r24, r28
     bb6:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN8NRF24L0120enableACKWithPayloadEb>
     bba:	88 85       	ldd	r24, Y+8	; 0x08
     bbc:	81 11       	cpse	r24, r1
     bbe:	0e c0       	rjmp	.+28     	; 0xbdc <_ZN8NRF24L0110initializeEv+0xd2>
     bc0:	e8 80       	ld	r14, Y
     bc2:	cc 24       	eor	r12, r12
     bc4:	c3 94       	inc	r12
     bc6:	f1 2c       	mov	r15, r1
     bc8:	00 e0       	ldi	r16, 0x00	; 0
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	61 e1       	ldi	r22, 0x11	; 17
     bd6:	ce 01       	movw	r24, r28
     bd8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN8NRF24L0116writeSPIRegisterEhyh>
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	ce 01       	movw	r24, r28
     be0:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L017powerONEb>
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	cf 90       	pop	r12
     bf2:	08 95       	ret

00000bf4 <_ZN8NRF24L01C1Ehhb>:
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	51 ee       	ldi	r21, 0xE1	; 225
     bf8:	74 e0       	ldi	r23, 0x04	; 4
     bfa:	31 50       	subi	r19, 0x01	; 1
     bfc:	50 40       	sbci	r21, 0x00	; 0
     bfe:	70 40       	sbci	r23, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <_ZN8NRF24L01C1Ehhb+0x6>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <_ZN8NRF24L01C1Ehhb+0x10>
     c04:	00 00       	nop
     c06:	fc 01       	movw	r30, r24
     c08:	27 83       	std	Z+7, r18	; 0x07
     c0a:	21 e0       	ldi	r18, 0x01	; 1
     c0c:	20 87       	std	Z+8, r18	; 0x08
     c0e:	60 83       	st	Z, r22
     c10:	41 83       	std	Z+1, r20	; 0x01
     c12:	0e 94 85 05 	call	0xb0a	; 0xb0a <_ZN8NRF24L0110initializeEv>
     c16:	08 95       	ret

00000c18 <_ZN8NRF24L017flushRXEv>:
void NRF24L01::flushTX(){
	sendSPICommand(FLUSH_TX);
}

void NRF24L01::flushRX(){
	sendSPICommand(FLUSH_RX);
     c18:	62 ee       	ldi	r22, 0xE2	; 226
     c1a:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN8NRF24L0114sendSPICommandEh>
     c1e:	08 95       	ret

00000c20 <_ZN8NRF24L018readFIFOEPVh>:
		data += 1;
	}
	CSN = 1;
}

void NRF24L01::readFIFO(volatile uint8_t *data){
     c20:	9f 92       	push	r9
     c22:	af 92       	push	r10
     c24:	bf 92       	push	r11
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	5c 01       	movw	r10, r24
     c38:	d6 2e       	mov	r13, r22
     c3a:	97 2e       	mov	r9, r23
	writeSPIRegister(STATUS, (1 << 6), 1);
     c3c:	cc 24       	eor	r12, r12
     c3e:	c3 94       	inc	r12
     c40:	68 94       	set
     c42:	ee 24       	eor	r14, r14
     c44:	e6 f8       	bld	r14, 6
     c46:	f1 2c       	mov	r15, r1
     c48:	00 e0       	ldi	r16, 0x00	; 0
     c4a:	10 e0       	ldi	r17, 0x00	; 0
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	67 e0       	ldi	r22, 0x07	; 7
     c56:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN8NRF24L0116writeSPIRegisterEhyh>
	CSN = 0;
     c5a:	40 98       	cbi	0x08, 0	; 8
	SPI_MasterTransmit(0x61);
     c5c:	81 e6       	ldi	r24, 0x61	; 97
     c5e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
	for(uint8_t i = 0; i < BufferLength_MasterTX; i++){
     c62:	f5 01       	movw	r30, r10
     c64:	80 81       	ld	r24, Z
     c66:	88 23       	and	r24, r24
     c68:	61 f0       	breq	.+24     	; 0xc82 <_ZN8NRF24L018readFIFOEPVh+0x62>
     c6a:	cd 2d       	mov	r28, r13
     c6c:	d9 2d       	mov	r29, r9
		*data =  SPI_MasterTransmit(0x00);
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     c74:	89 93       	st	Y+, r24
     c76:	2c 2f       	mov	r18, r28
     c78:	2d 19       	sub	r18, r13

void NRF24L01::readFIFO(volatile uint8_t *data){
	writeSPIRegister(STATUS, (1 << 6), 1);
	CSN = 0;
	SPI_MasterTransmit(0x61);
	for(uint8_t i = 0; i < BufferLength_MasterTX; i++){
     c7a:	f5 01       	movw	r30, r10
     c7c:	90 81       	ld	r25, Z
     c7e:	29 17       	cp	r18, r25
     c80:	b0 f3       	brcs	.-20     	; 0xc6e <_ZN8NRF24L018readFIFOEPVh+0x4e>
		*data =  SPI_MasterTransmit(0x00);
		data += 1;
	}
	CSN = 1;
     c82:	40 9a       	sbi	0x08, 0	; 8
	if(isRXFull()){
     c84:	c5 01       	movw	r24, r10
     c86:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN8NRF24L018isRXFullEv>
     c8a:	88 23       	and	r24, r24
     c8c:	19 f0       	breq	.+6      	; 0xc94 <_ZN8NRF24L018readFIFOEPVh+0x74>
		flushRX();
     c8e:	c5 01       	movw	r24, r10
     c90:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN8NRF24L017flushRXEv>
	}
}
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	cf 90       	pop	r12
     ca4:	bf 90       	pop	r11
     ca6:	af 90       	pop	r10
     ca8:	9f 90       	pop	r9
     caa:	08 95       	ret

00000cac <_ZN11SwitchClass9doNothingEh>:
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     cac:	08 95       	ret

00000cae <_ZN11SwitchClass5beginEv>:
     cae:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <_ZN11SwitchClass1iE>
     cb2:	86 e5       	ldi	r24, 0x56	; 86
     cb4:	96 e0       	ldi	r25, 0x06	; 6
     cb6:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     cba:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZN11SwitchClass17PinStateChangePtrE>
     cbe:	08 95       	ret

00000cc0 <_ZN11SwitchClass20callOnPinStateChangeEPFvhE>:
     cc0:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     cc4:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZN11SwitchClass17PinStateChangePtrE>
     cc8:	08 95       	ret

00000cca <_ZN11SwitchClass18doubleWaitCompleteEv>:
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
     cd0:	1b a2       	std	Y+35, r1	; 0x23
     cd2:	1c a2       	std	Y+36, r1	; 0x24
     cd4:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN10TimerClass10resetTimerEv>
     cd8:	ce 01       	movw	r24, r28
     cda:	0e 94 29 09 	call	0x1252	; 0x1252 <_ZN10TimerClass18resetCallbackTimerEv>
     cde:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ce0:	81 11       	cpse	r24, r1
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <_ZN11SwitchClass18doubleWaitCompleteEv+0x22>
     ce4:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_ZN11SwitchClass11AllShort_ENE>
     ce8:	88 23       	and	r24, r24
     cea:	c9 f0       	breq	.+50     	; 0xd1e <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     cec:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN11SwitchClass13AllSamePtr_ENE>
     cf0:	88 23       	and	r24, r24
     cf2:	61 f0       	breq	.+24     	; 0xd0c <_ZN11SwitchClass18doubleWaitCompleteEv+0x42>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     cfa:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <_ZN11SwitchClass16AllShortPressPtrE>
     cfe:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	61 f0       	breq	.+24     	; 0xd1e <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     d06:	8e a1       	ldd	r24, Y+38	; 0x26
     d08:	09 95       	icall
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     d12:	ee 85       	ldd	r30, Y+14	; 0x0e
     d14:	ff 85       	ldd	r31, Y+15	; 0x0f
     d16:	30 97       	sbiw	r30, 0x00	; 0
     d18:	11 f0       	breq	.+4      	; 0xd1e <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     d1a:	8e a1       	ldd	r24, Y+38	; 0x26
     d1c:	09 95       	icall
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <_ZN11SwitchClass17callAllDoubleWaitEh>:
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN11SwitchClass1iE>
     d2c:	99 23       	and	r25, r25
     d2e:	c1 f0       	breq	.+48     	; 0xd60 <_ZN11SwitchClass17callAllDoubleWaitEh+0x3c>
     d30:	d8 2f       	mov	r29, r24
     d32:	c0 e0       	ldi	r28, 0x00	; 0
     d34:	ec 2f       	mov	r30, r28
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	e1 55       	subi	r30, 0x51	; 81
     d3e:	fe 4f       	sbci	r31, 0xFE	; 254
     d40:	01 90       	ld	r0, Z+
     d42:	f0 81       	ld	r31, Z
     d44:	e0 2d       	mov	r30, r0
     d46:	91 a5       	ldd	r25, Z+41	; 0x29
     d48:	9d 13       	cpse	r25, r29
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     d4c:	30 97       	sbiw	r30, 0x00	; 0
     d4e:	19 f0       	breq	.+6      	; 0xd56 <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     d50:	cf 01       	movw	r24, r30
     d52:	0e 94 65 06 	call	0xcca	; 0xcca <_ZN11SwitchClass18doubleWaitCompleteEv>
     d56:	cf 5f       	subi	r28, 0xFF	; 255
     d58:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN11SwitchClass1iE>
     d5c:	c9 17       	cp	r28, r25
     d5e:	50 f3       	brcs	.-44     	; 0xd34 <_ZN11SwitchClass17callAllDoubleWaitEh+0x10>
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	08 95       	ret

00000d66 <_ZN11SwitchClass16updatePinBuffersEv>:
     d66:	83 b1       	in	r24, 0x03	; 3
     d68:	ea ea       	ldi	r30, 0xAA	; 170
     d6a:	f1 e0       	ldi	r31, 0x01	; 1
     d6c:	80 83       	st	Z, r24
     d6e:	86 b1       	in	r24, 0x06	; 6
     d70:	81 83       	std	Z+1, r24	; 0x01
     d72:	89 b1       	in	r24, 0x09	; 9
     d74:	82 83       	std	Z+2, r24	; 0x02
     d76:	08 95       	ret

00000d78 <_ZN11SwitchClass10pollSwitchEv>:
     d78:	fc 01       	movw	r30, r24
     d7a:	80 a5       	ldd	r24, Z+40	; 0x28
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	49 f0       	breq	.+18     	; 0xd92 <_ZN11SwitchClass10pollSwitchEv+0x1a>
     d80:	18 f0       	brcs	.+6      	; 0xd88 <_ZN11SwitchClass10pollSwitchEv+0x10>
     d82:	82 30       	cpi	r24, 0x02	; 2
     d84:	59 f0       	breq	.+22     	; 0xd9c <_ZN11SwitchClass10pollSwitchEv+0x24>
     d86:	0e c0       	rjmp	.+28     	; 0xda4 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     d88:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass9PinBufferE>
     d8c:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_ZN11SwitchClass11SwitchStateE>
     d90:	09 c0       	rjmp	.+18     	; 0xda4 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     d92:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN11SwitchClass9PinBufferE+0x1>
     d96:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_ZN11SwitchClass11SwitchStateE>
     d9a:	04 c0       	rjmp	.+8      	; 0xda4 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     d9c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <_ZN11SwitchClass9PinBufferE+0x2>
     da0:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_ZN11SwitchClass11SwitchStateE>
     da4:	82 8d       	ldd	r24, Z+26	; 0x1a
     da6:	81 a3       	std	Z+33, r24	; 0x21
     da8:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <_ZN11SwitchClass11SwitchStateE>
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	07 a0       	ldd	r0, Z+39	; 0x27
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <_ZN11SwitchClass10pollSwitchEv+0x3e>
     db2:	35 95       	asr	r19
     db4:	27 95       	ror	r18
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <_ZN11SwitchClass10pollSwitchEv+0x3a>
     dba:	21 70       	andi	r18, 0x01	; 1
     dbc:	22 8f       	std	Z+26, r18	; 0x1a
     dbe:	08 95       	ret

00000dc0 <_ZN11SwitchClass18processStateChangeEv>:
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	ec 01       	movw	r28, r24
     dc6:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN11SwitchClass10pollSwitchEv>
     dca:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dcc:	81 11       	cpse	r24, r1
     dce:	20 c0       	rjmp	.+64     	; 0xe10 <_ZN11SwitchClass18processStateChangeEv+0x50>
     dd0:	89 a1       	ldd	r24, Y+33	; 0x21
     dd2:	88 23       	and	r24, r24
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <_ZN11SwitchClass18processStateChangeEv+0x18>
     dd6:	78 c0       	rjmp	.+240    	; 0xec8 <_ZN11SwitchClass18processStateChangeEv+0x108>
     dd8:	8b a1       	ldd	r24, Y+35	; 0x23
     dda:	81 11       	cpse	r24, r1
     ddc:	08 c0       	rjmp	.+16     	; 0xdee <_ZN11SwitchClass18processStateChangeEv+0x2e>
     dde:	24 ef       	ldi	r18, 0xF4	; 244
     de0:	37 e0       	ldi	r19, 0x07	; 7
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	6c eb       	ldi	r22, 0xBC	; 188
     de6:	72 e0       	ldi	r23, 0x02	; 2
     de8:	ce 01       	movw	r24, r28
     dea:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	8a a3       	std	Y+34, r24	; 0x22
     df2:	8b a1       	ldd	r24, Y+35	; 0x23
     df4:	88 23       	and	r24, r24
     df6:	41 f0       	breq	.+16     	; 0xe08 <_ZN11SwitchClass18processStateChangeEv+0x48>
     df8:	68 e5       	ldi	r22, 0x58	; 88
     dfa:	72 e0       	ldi	r23, 0x02	; 2
     dfc:	ce 01       	movw	r24, r28
     dfe:	0e 94 36 09 	call	0x126c	; 0x126c <_ZN10TimerClass7setTimeEj>
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	8c a3       	std	Y+36, r24	; 0x24
     e06:	1b a2       	std	Y+35, r1	; 0x23
     e08:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e0a:	88 23       	and	r24, r24
     e0c:	09 f4       	brne	.+2      	; 0xe10 <_ZN11SwitchClass18processStateChangeEv+0x50>
     e0e:	5c c0       	rjmp	.+184    	; 0xec8 <_ZN11SwitchClass18processStateChangeEv+0x108>
     e10:	89 a1       	ldd	r24, Y+33	; 0x21
     e12:	81 11       	cpse	r24, r1
     e14:	59 c0       	rjmp	.+178    	; 0xec8 <_ZN11SwitchClass18processStateChangeEv+0x108>
     e16:	8c a1       	ldd	r24, Y+36	; 0x24
     e18:	81 11       	cpse	r24, r1
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <_ZN11SwitchClass18processStateChangeEv+0x68>
     e1c:	ce 01       	movw	r24, r28
     e1e:	0e 94 2e 09 	call	0x125c	; 0x125c <_ZN10TimerClass15getCallBackTimeEv>
     e22:	9d a7       	std	Y+45, r25	; 0x2d
     e24:	8c a7       	std	Y+44, r24	; 0x2c
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <_ZN11SwitchClass18processStateChangeEv+0x72>
     e28:	ce 01       	movw	r24, r28
     e2a:	0e 94 41 09 	call	0x1282	; 0x1282 <_ZN10TimerClass7getTimeEv>
     e2e:	9d a7       	std	Y+45, r25	; 0x2d
     e30:	8c a7       	std	Y+44, r24	; 0x2c
     e32:	ce 01       	movw	r24, r28
     e34:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN10TimerClass10resetTimerEv>
     e38:	ce 01       	movw	r24, r28
     e3a:	0e 94 29 09 	call	0x1252	; 0x1252 <_ZN10TimerClass18resetCallbackTimerEv>
     e3e:	1a a2       	std	Y+34, r1	; 0x22
     e40:	8c a5       	ldd	r24, Y+44	; 0x2c
     e42:	9d a5       	ldd	r25, Y+45	; 0x2d
     e44:	0b 97       	sbiw	r24, 0x0b	; 11
     e46:	8d 34       	cpi	r24, 0x4D	; 77
     e48:	92 40       	sbci	r25, 0x02	; 2
     e4a:	98 f5       	brcc	.+102    	; 0xeb2 <_ZN11SwitchClass18processStateChangeEv+0xf2>
     e4c:	8c a1       	ldd	r24, Y+36	; 0x24
     e4e:	81 11       	cpse	r24, r1
     e50:	17 c0       	rjmp	.+46     	; 0xe80 <_ZN11SwitchClass18processStateChangeEv+0xc0>
     e52:	8d a1       	ldd	r24, Y+37	; 0x25
     e54:	81 11       	cpse	r24, r1
     e56:	2f c0       	rjmp	.+94     	; 0xeb6 <_ZN11SwitchClass18processStateChangeEv+0xf6>
     e58:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e5a:	88 23       	and	r24, r24
     e5c:	59 f0       	breq	.+22     	; 0xe74 <_ZN11SwitchClass18processStateChangeEv+0xb4>
     e5e:	22 e9       	ldi	r18, 0x92	; 146
     e60:	36 e0       	ldi	r19, 0x06	; 6
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	64 e6       	ldi	r22, 0x64	; 100
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	ce 01       	movw	r24, r28
     e6a:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	8b a3       	std	Y+35, r24	; 0x23
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <_ZN11SwitchClass18processStateChangeEv+0xba>
     e74:	ce 01       	movw	r24, r28
     e76:	0e 94 65 06 	call	0xcca	; 0xcca <_ZN11SwitchClass18doubleWaitCompleteEv>
     e7a:	8c a1       	ldd	r24, Y+36	; 0x24
     e7c:	88 23       	and	r24, r24
     e7e:	09 f1       	breq	.+66     	; 0xec2 <_ZN11SwitchClass18processStateChangeEv+0x102>
     e80:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN11SwitchClass13AllSamePtr_ENE>
     e84:	88 23       	and	r24, r24
     e86:	61 f0       	breq	.+24     	; 0xea0 <_ZN11SwitchClass18processStateChangeEv+0xe0>
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     e8e:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <_ZN11SwitchClass17AllDoublePressPtrE>
     e92:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <_ZN11SwitchClass17AllDoublePressPtrE+0x1>
     e96:	30 97       	sbiw	r30, 0x00	; 0
     e98:	61 f0       	breq	.+24     	; 0xeb2 <_ZN11SwitchClass18processStateChangeEv+0xf2>
     e9a:	8e a1       	ldd	r24, Y+38	; 0x26
     e9c:	09 95       	icall
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <_ZN11SwitchClass18processStateChangeEv+0xf2>
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     ea6:	ea 89       	ldd	r30, Y+18	; 0x12
     ea8:	fb 89       	ldd	r31, Y+19	; 0x13
     eaa:	30 97       	sbiw	r30, 0x00	; 0
     eac:	11 f0       	breq	.+4      	; 0xeb2 <_ZN11SwitchClass18processStateChangeEv+0xf2>
     eae:	8e a1       	ldd	r24, Y+38	; 0x26
     eb0:	09 95       	icall
     eb2:	8d a1       	ldd	r24, Y+37	; 0x25
     eb4:	81 11       	cpse	r24, r1
     eb6:	1d a2       	std	Y+37, r1	; 0x25
     eb8:	8c a1       	ldd	r24, Y+36	; 0x24
     eba:	88 23       	and	r24, r24
     ebc:	29 f0       	breq	.+10     	; 0xec8 <_ZN11SwitchClass18processStateChangeEv+0x108>
     ebe:	1c a2       	std	Y+36, r1	; 0x24
     ec0:	03 c0       	rjmp	.+6      	; 0xec8 <_ZN11SwitchClass18processStateChangeEv+0x108>
     ec2:	8d a1       	ldd	r24, Y+37	; 0x25
     ec4:	81 11       	cpse	r24, r1
     ec6:	f7 cf       	rjmp	.-18     	; 0xeb6 <_ZN11SwitchClass18processStateChangeEv+0xf6>
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <_ZN11SwitchClass25callAllProcessStateChangeEv>:
     ece:	cf 93       	push	r28
     ed0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_ZN11SwitchClass1iE>
     ed4:	88 23       	and	r24, r24
     ed6:	91 f0       	breq	.+36     	; 0xefc <_ZN11SwitchClass25callAllProcessStateChangeEv+0x2e>
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
     eda:	ec 2f       	mov	r30, r28
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	e1 55       	subi	r30, 0x51	; 81
     ee4:	fe 4f       	sbci	r31, 0xFE	; 254
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	11 f0       	breq	.+4      	; 0xef2 <_ZN11SwitchClass25callAllProcessStateChangeEv+0x24>
     eee:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN11SwitchClass18processStateChangeEv>
     ef2:	cf 5f       	subi	r28, 0xFF	; 255
     ef4:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_ZN11SwitchClass1iE>
     ef8:	c8 17       	cp	r28, r24
     efa:	78 f3       	brcs	.-34     	; 0xeda <_ZN11SwitchClass25callAllProcessStateChangeEv+0xc>
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <_ZN11SwitchClass16longWaitCompleteEv>:
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	ec 01       	movw	r28, r24
     f06:	18 a2       	std	Y+32, r1	; 0x20
     f08:	1b a2       	std	Y+35, r1	; 0x23
     f0a:	1c a2       	std	Y+36, r1	; 0x24
     f0c:	8d a1       	ldd	r24, Y+37	; 0x25
     f0e:	88 23       	and	r24, r24
     f10:	89 f1       	breq	.+98     	; 0xf74 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f12:	ce 01       	movw	r24, r28
     f14:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZN11SwitchClass16updatePinBuffersEv>
     f18:	ce 01       	movw	r24, r28
     f1a:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN11SwitchClass10pollSwitchEv>
     f1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f20:	81 11       	cpse	r24, r1
     f22:	28 c0       	rjmp	.+80     	; 0xf74 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f24:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f26:	81 11       	cpse	r24, r1
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <_ZN11SwitchClass16longWaitCompleteEv+0x32>
     f2a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN11SwitchClass20AllContinuousLong_ENE>
     f2e:	88 23       	and	r24, r24
     f30:	09 f1       	breq	.+66     	; 0xf74 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f32:	24 ef       	ldi	r18, 0xF4	; 244
     f34:	37 e0       	ldi	r19, 0x07	; 7
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	66 e4       	ldi	r22, 0x46	; 70
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	ce 01       	movw	r24, r28
     f3e:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     f42:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN11SwitchClass13AllSamePtr_ENE>
     f46:	88 23       	and	r24, r24
     f48:	61 f0       	breq	.+24     	; 0xf62 <_ZN11SwitchClass16longWaitCompleteEv+0x62>
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     f50:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <_ZN11SwitchClass25AllContinuousLongPressPtrE>
     f54:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <_ZN11SwitchClass25AllContinuousLongPressPtrE+0x1>
     f58:	30 97       	sbiw	r30, 0x00	; 0
     f5a:	61 f0       	breq	.+24     	; 0xf74 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f5c:	8e a1       	ldd	r24, Y+38	; 0x26
     f5e:	09 95       	icall
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     f68:	ec 89       	ldd	r30, Y+20	; 0x14
     f6a:	fd 89       	ldd	r31, Y+21	; 0x15
     f6c:	30 97       	sbiw	r30, 0x00	; 0
     f6e:	11 f0       	breq	.+4      	; 0xf74 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f70:	8e a1       	ldd	r24, Y+38	; 0x26
     f72:	09 95       	icall
     f74:	8a a1       	ldd	r24, Y+34	; 0x22
     f76:	88 23       	and	r24, r24
     f78:	a1 f1       	breq	.+104    	; 0xfe2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     f7a:	ce 01       	movw	r24, r28
     f7c:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZN11SwitchClass16updatePinBuffersEv>
     f80:	ce 01       	movw	r24, r28
     f82:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN11SwitchClass10pollSwitchEv>
     f86:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f88:	81 11       	cpse	r24, r1
     f8a:	2b c0       	rjmp	.+86     	; 0xfe2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     f8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f8e:	81 11       	cpse	r24, r1
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <_ZN11SwitchClass16longWaitCompleteEv+0x9a>
     f92:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN11SwitchClass10AllLong_ENE>
     f96:	88 23       	and	r24, r24
     f98:	21 f1       	breq	.+72     	; 0xfe2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     f9a:	1a a2       	std	Y+34, r1	; 0x22
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	8d a3       	std	Y+37, r24	; 0x25
     fa0:	24 ef       	ldi	r18, 0xF4	; 244
     fa2:	37 e0       	ldi	r19, 0x07	; 7
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	62 e3       	ldi	r22, 0x32	; 50
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	ce 01       	movw	r24, r28
     fac:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     fb0:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN11SwitchClass13AllSamePtr_ENE>
     fb4:	88 23       	and	r24, r24
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <_ZN11SwitchClass16longWaitCompleteEv+0xd0>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     fbe:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <_ZN11SwitchClass15AllLongPressPtrE>
     fc2:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <_ZN11SwitchClass15AllLongPressPtrE+0x1>
     fc6:	30 97       	sbiw	r30, 0x00	; 0
     fc8:	61 f0       	breq	.+24     	; 0xfe2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     fca:	8e a1       	ldd	r24, Y+38	; 0x26
     fcc:	09 95       	icall
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     fd6:	e8 89       	ldd	r30, Y+16	; 0x10
     fd8:	f9 89       	ldd	r31, Y+17	; 0x11
     fda:	30 97       	sbiw	r30, 0x00	; 0
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     fde:	8e a1       	ldd	r24, Y+38	; 0x26
     fe0:	09 95       	icall
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <_ZN11SwitchClass20callAllOjectLongWaitEh>:
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN11SwitchClass1iE>
     ff0:	99 23       	and	r25, r25
     ff2:	c1 f0       	breq	.+48     	; 0x1024 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x3c>
     ff4:	d8 2f       	mov	r29, r24
     ff6:	c0 e0       	ldi	r28, 0x00	; 0
     ff8:	ec 2f       	mov	r30, r28
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	e1 55       	subi	r30, 0x51	; 81
    1002:	fe 4f       	sbci	r31, 0xFE	; 254
    1004:	01 90       	ld	r0, Z+
    1006:	f0 81       	ld	r31, Z
    1008:	e0 2d       	mov	r30, r0
    100a:	91 a5       	ldd	r25, Z+41	; 0x29
    100c:	9d 13       	cpse	r25, r29
    100e:	05 c0       	rjmp	.+10     	; 0x101a <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    1010:	30 97       	sbiw	r30, 0x00	; 0
    1012:	19 f0       	breq	.+6      	; 0x101a <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    1014:	cf 01       	movw	r24, r30
    1016:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN11SwitchClass16longWaitCompleteEv>
    101a:	cf 5f       	subi	r28, 0xFF	; 255
    101c:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN11SwitchClass1iE>
    1020:	c9 17       	cp	r28, r25
    1022:	50 f3       	brcs	.-44     	; 0xff8 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x10>
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <__vector_1>:
}

ISR(INT0_vect){
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
	Switch.PinBuffer[0] = PINB;
    104c:	83 b1       	in	r24, 0x03	; 3
    104e:	ea ea       	ldi	r30, 0xAA	; 170
    1050:	f1 e0       	ldi	r31, 0x01	; 1
    1052:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1054:	86 b1       	in	r24, 0x06	; 6
    1056:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1058:	89 b1       	in	r24, 0x09	; 9
    105a:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    105c:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1066:	0e 94 67 07 	call	0xece	; 0xece <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    106a:	ff 91       	pop	r31
    106c:	ef 91       	pop	r30
    106e:	bf 91       	pop	r27
    1070:	af 91       	pop	r26
    1072:	9f 91       	pop	r25
    1074:	8f 91       	pop	r24
    1076:	7f 91       	pop	r23
    1078:	6f 91       	pop	r22
    107a:	5f 91       	pop	r21
    107c:	4f 91       	pop	r20
    107e:	3f 91       	pop	r19
    1080:	2f 91       	pop	r18
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <__vector_2>:

ISR(INT1_vect){
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	2f 93       	push	r18
    1098:	3f 93       	push	r19
    109a:	4f 93       	push	r20
    109c:	5f 93       	push	r21
    109e:	6f 93       	push	r22
    10a0:	7f 93       	push	r23
    10a2:	8f 93       	push	r24
    10a4:	9f 93       	push	r25
    10a6:	af 93       	push	r26
    10a8:	bf 93       	push	r27
    10aa:	ef 93       	push	r30
    10ac:	ff 93       	push	r31
	wakeUp();
    10ae:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    10b8:	0e 94 67 07 	call	0xece	; 0xece <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_3>:

ISR(PCINT0_vect){
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_B);
	Switch.PinBuffer[0] = PINB;
    1100:	83 b1       	in	r24, 0x03	; 3
    1102:	ea ea       	ldi	r30, 0xAA	; 170
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1108:	86 b1       	in	r24, 0x06	; 6
    110a:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    110c:	89 b1       	in	r24, 0x09	; 9
    110e:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1110:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    111a:	0e 94 67 07 	call	0xece	; 0xece <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	7f 91       	pop	r23
    112c:	6f 91       	pop	r22
    112e:	5f 91       	pop	r21
    1130:	4f 91       	pop	r20
    1132:	3f 91       	pop	r19
    1134:	2f 91       	pop	r18
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <__vector_4>:

ISR(PCINT1_vect){
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	2f 93       	push	r18
    114c:	3f 93       	push	r19
    114e:	4f 93       	push	r20
    1150:	5f 93       	push	r21
    1152:	6f 93       	push	r22
    1154:	7f 93       	push	r23
    1156:	8f 93       	push	r24
    1158:	9f 93       	push	r25
    115a:	af 93       	push	r26
    115c:	bf 93       	push	r27
    115e:	ef 93       	push	r30
    1160:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_C);
	Switch.PinBuffer[0] = PINB;
    1162:	83 b1       	in	r24, 0x03	; 3
    1164:	ea ea       	ldi	r30, 0xAA	; 170
    1166:	f1 e0       	ldi	r31, 0x01	; 1
    1168:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    116a:	86 b1       	in	r24, 0x06	; 6
    116c:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    116e:	89 b1       	in	r24, 0x09	; 9
    1170:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1172:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    117c:	0e 94 67 07 	call	0xece	; 0xece <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
	Switch.pinStateChanged();
}
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	7f 91       	pop	r23
    118e:	6f 91       	pop	r22
    1190:	5f 91       	pop	r21
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <__vector_5>:

ISR(PCINT2_vect){
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
    11ac:	2f 93       	push	r18
    11ae:	3f 93       	push	r19
    11b0:	4f 93       	push	r20
    11b2:	5f 93       	push	r21
    11b4:	6f 93       	push	r22
    11b6:	7f 93       	push	r23
    11b8:	8f 93       	push	r24
    11ba:	9f 93       	push	r25
    11bc:	af 93       	push	r26
    11be:	bf 93       	push	r27
    11c0:	ef 93       	push	r30
    11c2:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_D);
	Switch.PinBuffer[0] = PINB;
    11c4:	83 b1       	in	r24, 0x03	; 3
    11c6:	ea ea       	ldi	r30, 0xAA	; 170
    11c8:	f1 e0       	ldi	r31, 0x01	; 1
    11ca:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    11cc:	86 b1       	in	r24, 0x06	; 6
    11ce:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    11d0:	89 b1       	in	r24, 0x09	; 9
    11d2:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    11d4:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    11de:	0e 94 67 07 	call	0xece	; 0xece <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    11e2:	ff 91       	pop	r31
    11e4:	ef 91       	pop	r30
    11e6:	bf 91       	pop	r27
    11e8:	af 91       	pop	r26
    11ea:	9f 91       	pop	r25
    11ec:	8f 91       	pop	r24
    11ee:	7f 91       	pop	r23
    11f0:	6f 91       	pop	r22
    11f2:	5f 91       	pop	r21
    11f4:	4f 91       	pop	r20
    11f6:	3f 91       	pop	r19
    11f8:	2f 91       	pop	r18
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	0f 90       	pop	r0
    1200:	1f 90       	pop	r1
    1202:	18 95       	reti

00001204 <_ZN10TimerClass5beginEv>:
	}
}

uint8_t TimerClass::getTimerID(){
	return Timer_ID;
}
    1204:	60 e8       	ldi	r22, 0x80	; 128
    1206:	7e e3       	ldi	r23, 0x3E	; 62
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	0e 94 01 01 	call	0x202	; 0x202 <_Z11Init_CTC_T1hj>
    120e:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <_ZN10TimerClass1iE>
    1212:	08 95       	ret

00001214 <_ZN10TimerClass15initializeTimerEv>:
    1214:	dc 01       	movw	r26, r24
    1216:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <_ZN10TimerClass1iE>
    121a:	e9 2f       	mov	r30, r25
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	ec 53       	subi	r30, 0x3C	; 60
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	b1 83       	std	Z+1, r27	; 0x01
    1228:	a0 83       	st	Z, r26
    122a:	15 96       	adiw	r26, 0x05	; 5
    122c:	9c 93       	st	X, r25
    122e:	9f 5f       	subi	r25, 0xFF	; 255
    1230:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <_ZN10TimerClass1iE>
    1234:	08 95       	ret

00001236 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>:
    1236:	fc 01       	movw	r30, r24
    1238:	71 83       	std	Z+1, r23	; 0x01
    123a:	60 83       	st	Z, r22
    123c:	73 83       	std	Z+3, r23	; 0x03
    123e:	62 83       	std	Z+2, r22	; 0x02
    1240:	35 87       	std	Z+13, r19	; 0x0d
    1242:	24 87       	std	Z+12, r18	; 0x0c
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	83 87       	std	Z+11, r24	; 0x0b
    1248:	44 83       	std	Z+4, r20	; 0x04
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1250:	08 95       	ret

00001252 <_ZN10TimerClass18resetCallbackTimerEv>:
    1252:	fc 01       	movw	r30, r24
    1254:	13 86       	std	Z+11, r1	; 0x0b
    1256:	11 82       	std	Z+1, r1	; 0x01
    1258:	10 82       	st	Z, r1
    125a:	08 95       	ret

0000125c <_ZN10TimerClass15getCallBackTimeEv>:
    125c:	fc 01       	movw	r30, r24
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	20 81       	ld	r18, Z
    1264:	31 81       	ldd	r19, Z+1	; 0x01
    1266:	82 1b       	sub	r24, r18
    1268:	93 0b       	sbc	r25, r19
    126a:	08 95       	ret

0000126c <_ZN10TimerClass7setTimeEj>:
    126c:	fc 01       	movw	r30, r24
    126e:	77 83       	std	Z+7, r23	; 0x07
    1270:	66 83       	std	Z+6, r22	; 0x06
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	82 87       	std	Z+10, r24	; 0x0a
    1276:	71 87       	std	Z+9, r23	; 0x09
    1278:	60 87       	std	Z+8, r22	; 0x08
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1280:	08 95       	ret

00001282 <_ZN10TimerClass7getTimeEv>:
    1282:	fc 01       	movw	r30, r24
    1284:	80 85       	ldd	r24, Z+8	; 0x08
    1286:	91 85       	ldd	r25, Z+9	; 0x09
    1288:	26 81       	ldd	r18, Z+6	; 0x06
    128a:	37 81       	ldd	r19, Z+7	; 0x07
    128c:	82 1b       	sub	r24, r18
    128e:	93 0b       	sbc	r25, r19
    1290:	08 95       	ret

00001292 <_ZN10TimerClass10resetTimerEv>:
    1292:	fc 01       	movw	r30, r24
    1294:	17 82       	std	Z+7, r1	; 0x07
    1296:	16 82       	std	Z+6, r1	; 0x06
    1298:	12 86       	std	Z+10, r1	; 0x0a
    129a:	08 95       	ret

0000129c <_ZN10TimerClass11milliPassedEv>:
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	ec 01       	movw	r28, r24
    12a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12a4:	88 23       	and	r24, r24
    12a6:	e1 f0       	breq	.+56     	; 0x12e0 <_ZN10TimerClass11milliPassedEv+0x44>
    12a8:	88 81       	ld	r24, Y
    12aa:	99 81       	ldd	r25, Y+1	; 0x01
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	29 f0       	breq	.+10     	; 0x12ba <_ZN10TimerClass11milliPassedEv+0x1e>
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	99 83       	std	Y+1, r25	; 0x01
    12b4:	88 83       	st	Y, r24
    12b6:	89 2b       	or	r24, r25
    12b8:	99 f4       	brne	.+38     	; 0x12e0 <_ZN10TimerClass11milliPassedEv+0x44>
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	29 f4       	brne	.+10     	; 0x12ca <_ZN10TimerClass11milliPassedEv+0x2e>
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	9b 81       	ldd	r25, Y+3	; 0x03
    12c4:	99 83       	std	Y+1, r25	; 0x01
    12c6:	88 83       	st	Y, r24
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <_ZN10TimerClass11milliPassedEv+0x38>
    12ca:	81 11       	cpse	r24, r1
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <_ZN10TimerClass11milliPassedEv+0x38>
    12ce:	1b 86       	std	Y+11, r1	; 0x0b
    12d0:	19 82       	std	Y+1, r1	; 0x01
    12d2:	18 82       	st	Y, r1
    12d4:	ec 85       	ldd	r30, Y+12	; 0x0c
    12d6:	fd 85       	ldd	r31, Y+13	; 0x0d
    12d8:	30 97       	sbiw	r30, 0x00	; 0
    12da:	11 f0       	breq	.+4      	; 0x12e0 <_ZN10TimerClass11milliPassedEv+0x44>
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	09 95       	icall
    12e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e2:	88 23       	and	r24, r24
    12e4:	51 f0       	breq	.+20     	; 0x12fa <_ZN10TimerClass11milliPassedEv+0x5e>
    12e6:	8e 81       	ldd	r24, Y+6	; 0x06
    12e8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	29 f0       	breq	.+10     	; 0x12f8 <_ZN10TimerClass11milliPassedEv+0x5c>
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	9f 83       	std	Y+7, r25	; 0x07
    12f2:	8e 83       	std	Y+6, r24	; 0x06
    12f4:	89 2b       	or	r24, r25
    12f6:	09 f4       	brne	.+2      	; 0x12fa <_ZN10TimerClass11milliPassedEv+0x5e>
    12f8:	1a 86       	std	Y+10, r1	; 0x0a
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	08 95       	ret

00001300 <_ZN10TimerClass19callAllTimerObjectsEv>:
    1300:	cf 93       	push	r28
    1302:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <_ZN10TimerClass1iE>
    1306:	88 23       	and	r24, r24
    1308:	91 f0       	breq	.+36     	; 0x132e <_ZN10TimerClass19callAllTimerObjectsEv+0x2e>
    130a:	c0 e0       	ldi	r28, 0x00	; 0
    130c:	ec 2f       	mov	r30, r28
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	ec 53       	subi	r30, 0x3C	; 60
    1316:	fe 4f       	sbci	r31, 0xFE	; 254
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	11 f0       	breq	.+4      	; 0x1324 <_ZN10TimerClass19callAllTimerObjectsEv+0x24>
    1320:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN10TimerClass11milliPassedEv>
    1324:	cf 5f       	subi	r28, 0xFF	; 255
    1326:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <_ZN10TimerClass1iE>
    132a:	c8 17       	cp	r28, r24
    132c:	78 f3       	brcs	.-34     	; 0x130c <_ZN10TimerClass19callAllTimerObjectsEv+0xc>
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <__vector_11>:



ISR(TIMER1_COMPA_vect){
    1332:	1f 92       	push	r1
    1334:	0f 92       	push	r0
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	0f 92       	push	r0
    133a:	11 24       	eor	r1, r1
    133c:	2f 93       	push	r18
    133e:	3f 93       	push	r19
    1340:	4f 93       	push	r20
    1342:	5f 93       	push	r21
    1344:	6f 93       	push	r22
    1346:	7f 93       	push	r23
    1348:	8f 93       	push	r24
    134a:	9f 93       	push	r25
    134c:	af 93       	push	r26
    134e:	bf 93       	push	r27
    1350:	ef 93       	push	r30
    1352:	ff 93       	push	r31
	milliHappened();
    1354:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_Z13milliHappenedv>
	Timer.Time += 1;
    1358:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <_ZN10TimerClass4TimeE>
    135c:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <_ZN10TimerClass4TimeE+0x1>
    1360:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <_ZN10TimerClass4TimeE+0x2>
    1364:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <_ZN10TimerClass4TimeE+0x3>
    1368:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <_ZN10TimerClass4TimeE+0x4>
    136c:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <_ZN10TimerClass4TimeE+0x5>
    1370:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <_ZN10TimerClass4TimeE+0x6>
    1374:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <_ZN10TimerClass4TimeE+0x7>
    1378:	a1 e0       	ldi	r26, 0x01	; 1
    137a:	0e 94 9e 0b 	call	0x173c	; 0x173c <__adddi3_s8>
    137e:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <_ZN10TimerClass4TimeE>
    1382:	30 93 bd 01 	sts	0x01BD, r19	; 0x8001bd <_ZN10TimerClass4TimeE+0x1>
    1386:	40 93 be 01 	sts	0x01BE, r20	; 0x8001be <_ZN10TimerClass4TimeE+0x2>
    138a:	50 93 bf 01 	sts	0x01BF, r21	; 0x8001bf <_ZN10TimerClass4TimeE+0x3>
    138e:	60 93 c0 01 	sts	0x01C0, r22	; 0x8001c0 <_ZN10TimerClass4TimeE+0x4>
    1392:	70 93 c1 01 	sts	0x01C1, r23	; 0x8001c1 <_ZN10TimerClass4TimeE+0x5>
    1396:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <_ZN10TimerClass4TimeE+0x6>
    139a:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <_ZN10TimerClass4TimeE+0x7>
	Timer.callAllTimerObjects();
    139e:	0e 94 80 09 	call	0x1300	; 0x1300 <_ZN10TimerClass19callAllTimerObjectsEv>
}
    13a2:	ff 91       	pop	r31
    13a4:	ef 91       	pop	r30
    13a6:	bf 91       	pop	r27
    13a8:	af 91       	pop	r26
    13aa:	9f 91       	pop	r25
    13ac:	8f 91       	pop	r24
    13ae:	7f 91       	pop	r23
    13b0:	6f 91       	pop	r22
    13b2:	5f 91       	pop	r21
    13b4:	4f 91       	pop	r20
    13b6:	3f 91       	pop	r19
    13b8:	2f 91       	pop	r18
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	0f 90       	pop	r0
    13c0:	1f 90       	pop	r1
    13c2:	18 95       	reti

000013c4 <_Z14printSomethingh>:
		}
    }
}

void printSomething(uint8_t Timer_ID){
	Timer1_Flag = true;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Timer1_Flag>
    13ca:	08 95       	ret

000013cc <_Z15portStateChangeh>:
}

void portStateChange(uint8_t PortNo){
    13cc:	cf 93       	push	r28
    13ce:	c8 2f       	mov	r28, r24
	printStringCRNL("Pin state changed");
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	0e 94 0d 03 	call	0x61a	; 0x61a <_Z15printStringCRNLPKc>
	if(PortNo == PORT_C){
    13d8:	c1 30       	cpi	r28, 0x01	; 1
    13da:	49 f4       	brne	.+18     	; 0x13ee <_Z15portStateChangeh+0x22>
		setPinState(PORT_C, 2, getPinState(PORT_C, 0));
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	0e 94 b2 01 	call	0x364	; 0x364 <_Z11getPinStatehh>
    13e4:	48 2f       	mov	r20, r24
    13e6:	62 e0       	ldi	r22, 0x02	; 2
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	}
}
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <_Z8runSetupv>:

void runSetup(){
	
	USART_Init(MYUBRR);
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_Z10USART_Initj>
	Init_CTC_T1(2,2000);
    13fa:	60 ed       	ldi	r22, 0xD0	; 208
    13fc:	77 e0       	ldi	r23, 0x07	; 7
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	0e 94 01 01 	call	0x202	; 0x202 <_Z11Init_CTC_T1hj>
	setPinDirection(PORT_C, 2, OUTPUT);
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	62 e0       	ldi	r22, 0x02	; 2
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 2, OUTPUT);
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	62 e0       	ldi	r22, 0x02	; 2
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 3, OUTPUT);
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	63 e0       	ldi	r22, 0x03	; 3
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 4, INPUT);
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	64 e0       	ldi	r22, 0x04	; 4
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 5, OUTPUT);
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	65 e0       	ldi	r22, 0x05	; 5
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinState(PORT_D, 2, LOW);
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	62 e0       	ldi	r22, 0x02	; 2
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_D, 3, LOW);
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	63 e0       	ldi	r22, 0x03	; 3
    1444:	82 e0       	ldi	r24, 0x02	; 2
    1446:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_D, 4, LOW);
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	64 e0       	ldi	r22, 0x04	; 4
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_D, 5, LOW);
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	65 e0       	ldi	r22, 0x05	; 5
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_C, 2, LOW);
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinDirection(PORT_C, 0, INPUT);
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	SPI_MasterInit();
    1472:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
    1476:	08 95       	ret

00001478 <main>:
void portStateChange(uint8_t PortNo);
volatile uint8_t SPIdata;
volatile bool newSPIData, Timer1_Flag;
uint8_t Socket, State, Payload, StateAll;
int main(void)
{
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	67 97       	sbiw	r28, 0x17	; 23
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    runSetup();
    148c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_Z8runSetupv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1490:	2f ef       	ldi	r18, 0xFF	; 255
    1492:	89 e6       	ldi	r24, 0x69	; 105
    1494:	98 e1       	ldi	r25, 0x18	; 24
    1496:	21 50       	subi	r18, 0x01	; 1
    1498:	80 40       	sbci	r24, 0x00	; 0
    149a:	90 40       	sbci	r25, 0x00	; 0
    149c:	e1 f7       	brne	.-8      	; 0x1496 <main+0x1e>
    149e:	00 c0       	rjmp	.+0      	; 0x14a0 <main+0x28>
    14a0:	00 00       	nop
	_delay_ms(500);
	Notify(PSTR("Powering on..."));
    14a2:	8d e4       	ldi	r24, 0x4D	; 77
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z6NotifyPKc>
	NRF24L01 Radio(1,1,1);
    14aa:	21 e0       	ldi	r18, 0x01	; 1
    14ac:	41 e0       	ldi	r20, 0x01	; 1
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	ce 01       	movw	r24, r28
    14b2:	0f 96       	adiw	r24, 0x0f	; 15
    14b4:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN8NRF24L01C1Ehhb>
	Radio.powerON(true);
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	ce 01       	movw	r24, r28
    14bc:	0f 96       	adiw	r24, 0x0f	; 15
    14be:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L017powerONEb>
	initSPISlave();
    14c2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z12initSPISlavev>
	enableSPIInterrupt(true);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18enableSPIInterruptb>
	sei();
    14cc:	78 94       	sei
	TimerClass Timer1;
	SwitchClass S;
	S.begin();
    14ce:	0e 94 57 06 	call	0xcae	; 0xcae <_ZN11SwitchClass5beginEv>
	S.callOnPinStateChange(portStateChange);
    14d2:	86 ee       	ldi	r24, 0xE6	; 230
    14d4:	99 e0       	ldi	r25, 0x09	; 9
    14d6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN11SwitchClass20callOnPinStateChangeEPFvhE>
	Timer1.begin();
    14da:	0e 94 02 09 	call	0x1204	; 0x1204 <_ZN10TimerClass5beginEv>
	Timer1.initializeTimer();
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN10TimerClass15initializeTimerEv>
	Timer1.setCallBackTime(100, 0, printSomething);
    14e6:	22 ee       	ldi	r18, 0xE2	; 226
    14e8:	39 e0       	ldi	r19, 0x09	; 9
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	64 e6       	ldi	r22, 0x64	; 100
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	ce 01       	movw	r24, r28
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
	Notify(PSTR("Done"));
    14f8:	88 e4       	ldi	r24, 0x48	; 72
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z6NotifyPKc>
    while (1) 
    {
		if(newSPIData)	{
    1500:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <newSPIData>
    1504:	88 23       	and	r24, r24
    1506:	09 f4       	brne	.+2      	; 0x150a <main+0x92>
    1508:	65 c0       	rjmp	.+202    	; 0x15d4 <main+0x15c>
			newSPIData = false;
    150a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <newSPIData>
			if(SPIdata != 0xAA){
    150e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <SPIdata>
    1512:	8a 3a       	cpi	r24, 0xAA	; 170
    1514:	61 f1       	breq	.+88     	; 0x156e <main+0xf6>
				Socket = SPIdata & 0xF0;
    1516:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <SPIdata>
    151a:	60 7f       	andi	r22, 0xF0	; 240
				Socket = Socket >> 4;
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	75 95       	asr	r23
    1520:	67 95       	ror	r22
    1522:	75 95       	asr	r23
    1524:	67 95       	ror	r22
    1526:	75 95       	asr	r23
    1528:	67 95       	ror	r22
    152a:	75 95       	asr	r23
    152c:	67 95       	ror	r22
    152e:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <Socket>
				State = SPIdata & 0x0F;
    1532:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <SPIdata>
    1536:	8f 70       	andi	r24, 0x0F	; 15
    1538:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <State>
				setPinState(PORT_D, Socket + 1, State);
    153c:	41 e0       	ldi	r20, 0x01	; 1
    153e:	81 11       	cpse	r24, r1
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <main+0xcc>
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	6f 5f       	subi	r22, 0xFF	; 255
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
				printStringCRNL("Command received: ");
    154c:	82 e1       	ldi	r24, 0x12	; 18
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	0e 94 0d 03 	call	0x61a	; 0x61a <_Z15printStringCRNLPKc>
				printHexNumber(SPIdata, 1);
    1554:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <SPIdata>
    1558:	01 e0       	ldi	r16, 0x01	; 1
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z14printHexNumberyh>
    156c:	2c c0       	rjmp	.+88     	; 0x15c6 <main+0x14e>
			}
			else{
				enableSPIInterrupt(false);
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18enableSPIInterruptb>
				enableSPI(false);
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9enableSPIb>
				SPI_MasterInit();
    157a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
				if(!Radio.isRXEmpty()){
    157e:	ce 01       	movw	r24, r28
    1580:	0f 96       	adiw	r24, 0x0f	; 15
    1582:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN8NRF24L019isRXEmptyEv>
    1586:	81 11       	cpse	r24, r1
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <main+0x13e>
					Radio.readFIFO(&Payload);
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	72 e0       	ldi	r23, 0x02	; 2
    158e:	ce 01       	movw	r24, r28
    1590:	0f 96       	adiw	r24, 0x0f	; 15
    1592:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN8NRF24L018readFIFOEPVh>
					printStringCRNL("Data received: ");
    1596:	85 e2       	ldi	r24, 0x25	; 37
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	0e 94 0d 03 	call	0x61a	; 0x61a <_Z15printStringCRNLPKc>
					printHexNumber(Payload, 1);
    159e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <Payload>
    15a2:	01 e0       	ldi	r16, 0x01	; 1
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z14printHexNumberyh>
				}
				//printStringCRNL("Tick");
				enableSPI(false);
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9enableSPIb>
				initSPISlave();
    15bc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z12initSPISlavev>
				enableSPIInterrupt(true);
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18enableSPIInterruptb>
			}
			SPDR = PIND >> 2;
    15c6:	89 b1       	in	r24, 0x09	; 9
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	95 95       	asr	r25
    15cc:	87 95       	ror	r24
    15ce:	95 95       	asr	r25
    15d0:	87 95       	ror	r24
    15d2:	8e bd       	out	0x2e, r24	; 46
		}
		if(Timer1_Flag){
    15d4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <Timer1_Flag>
    15d8:	88 23       	and	r24, r24
    15da:	09 f4       	brne	.+2      	; 0x15de <main+0x166>
    15dc:	91 cf       	rjmp	.-222    	; 0x1500 <main+0x88>
			Timer1_Flag = false;
    15de:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <Timer1_Flag>
			printStringCRNL("Timer done.");
    15e2:	85 e3       	ldi	r24, 0x35	; 53
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	0e 94 0d 03 	call	0x61a	; 0x61a <_Z15printStringCRNLPKc>
    15ea:	8a cf       	rjmp	.-236    	; 0x1500 <main+0x88>

000015ec <__vector_17>:
	//enableSPIInterrupt(true);
	//sei();
}

ISR(SPI_STC_vect)
{															//Grab the data byte from the SPI Data Register (SPDR)
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	8f 93       	push	r24
	SPIdata = SPDR;                                         //Put the byte into a temporary variable for processin                                       //process the data byte and put it back into the SPDR for the Master to read it
    15f8:	8e b5       	in	r24, 0x2e	; 46
    15fa:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <SPIdata>
	newSPIData = true;                                       //Set the Flag as TRUE
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <newSPIData>
    1604:	8f 91       	pop	r24
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <__umoddi3>:
    1610:	68 94       	set
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <__udivdi3_umoddi3>

00001614 <__udivdi3>:
    1614:	e8 94       	clt

00001616 <__udivdi3_umoddi3>:
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	0e 94 16 0b 	call	0x162c	; 0x162c <__udivmod64>
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	9f 90       	pop	r9
    1628:	8f 90       	pop	r8
    162a:	08 95       	ret

0000162c <__udivmod64>:
    162c:	88 24       	eor	r8, r8
    162e:	99 24       	eor	r9, r9
    1630:	f4 01       	movw	r30, r8
    1632:	e4 01       	movw	r28, r8
    1634:	b0 e4       	ldi	r27, 0x40	; 64
    1636:	9f 93       	push	r25
    1638:	aa 27       	eor	r26, r26
    163a:	9a 15       	cp	r25, r10
    163c:	8b 04       	cpc	r8, r11
    163e:	9c 04       	cpc	r9, r12
    1640:	ed 05       	cpc	r30, r13
    1642:	fe 05       	cpc	r31, r14
    1644:	cf 05       	cpc	r28, r15
    1646:	d0 07       	cpc	r29, r16
    1648:	a1 07       	cpc	r26, r17
    164a:	98 f4       	brcc	.+38     	; 0x1672 <__udivmod64+0x46>
    164c:	ad 2f       	mov	r26, r29
    164e:	dc 2f       	mov	r29, r28
    1650:	cf 2f       	mov	r28, r31
    1652:	fe 2f       	mov	r31, r30
    1654:	e9 2d       	mov	r30, r9
    1656:	98 2c       	mov	r9, r8
    1658:	89 2e       	mov	r8, r25
    165a:	98 2f       	mov	r25, r24
    165c:	87 2f       	mov	r24, r23
    165e:	76 2f       	mov	r23, r22
    1660:	65 2f       	mov	r22, r21
    1662:	54 2f       	mov	r21, r20
    1664:	43 2f       	mov	r20, r19
    1666:	32 2f       	mov	r19, r18
    1668:	22 27       	eor	r18, r18
    166a:	b8 50       	subi	r27, 0x08	; 8
    166c:	31 f7       	brne	.-52     	; 0x163a <__udivmod64+0xe>
    166e:	bf 91       	pop	r27
    1670:	27 c0       	rjmp	.+78     	; 0x16c0 <__udivmod64+0x94>
    1672:	1b 2e       	mov	r1, r27
    1674:	bf 91       	pop	r27
    1676:	bb 27       	eor	r27, r27
    1678:	22 0f       	add	r18, r18
    167a:	33 1f       	adc	r19, r19
    167c:	44 1f       	adc	r20, r20
    167e:	55 1f       	adc	r21, r21
    1680:	66 1f       	adc	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	88 1f       	adc	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	88 1c       	adc	r8, r8
    168a:	99 1c       	adc	r9, r9
    168c:	ee 1f       	adc	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	cc 1f       	adc	r28, r28
    1692:	dd 1f       	adc	r29, r29
    1694:	aa 1f       	adc	r26, r26
    1696:	bb 1f       	adc	r27, r27
    1698:	8a 14       	cp	r8, r10
    169a:	9b 04       	cpc	r9, r11
    169c:	ec 05       	cpc	r30, r12
    169e:	fd 05       	cpc	r31, r13
    16a0:	ce 05       	cpc	r28, r14
    16a2:	df 05       	cpc	r29, r15
    16a4:	a0 07       	cpc	r26, r16
    16a6:	b1 07       	cpc	r27, r17
    16a8:	48 f0       	brcs	.+18     	; 0x16bc <__udivmod64+0x90>
    16aa:	8a 18       	sub	r8, r10
    16ac:	9b 08       	sbc	r9, r11
    16ae:	ec 09       	sbc	r30, r12
    16b0:	fd 09       	sbc	r31, r13
    16b2:	ce 09       	sbc	r28, r14
    16b4:	df 09       	sbc	r29, r15
    16b6:	a0 0b       	sbc	r26, r16
    16b8:	b1 0b       	sbc	r27, r17
    16ba:	21 60       	ori	r18, 0x01	; 1
    16bc:	1a 94       	dec	r1
    16be:	e1 f6       	brne	.-72     	; 0x1678 <__udivmod64+0x4c>
    16c0:	2e f4       	brtc	.+10     	; 0x16cc <__udivmod64+0xa0>
    16c2:	94 01       	movw	r18, r8
    16c4:	af 01       	movw	r20, r30
    16c6:	be 01       	movw	r22, r28
    16c8:	cd 01       	movw	r24, r26
    16ca:	00 0c       	add	r0, r0
    16cc:	08 95       	ret

000016ce <__ashldi3>:
    16ce:	0f 93       	push	r16
    16d0:	08 30       	cpi	r16, 0x08	; 8
    16d2:	90 f0       	brcs	.+36     	; 0x16f8 <__ashldi3+0x2a>
    16d4:	98 2f       	mov	r25, r24
    16d6:	87 2f       	mov	r24, r23
    16d8:	76 2f       	mov	r23, r22
    16da:	65 2f       	mov	r22, r21
    16dc:	54 2f       	mov	r21, r20
    16de:	43 2f       	mov	r20, r19
    16e0:	32 2f       	mov	r19, r18
    16e2:	22 27       	eor	r18, r18
    16e4:	08 50       	subi	r16, 0x08	; 8
    16e6:	f4 cf       	rjmp	.-24     	; 0x16d0 <__ashldi3+0x2>
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
    16ec:	44 1f       	adc	r20, r20
    16ee:	55 1f       	adc	r21, r21
    16f0:	66 1f       	adc	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	88 1f       	adc	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 95       	dec	r16
    16fa:	b2 f7       	brpl	.-20     	; 0x16e8 <__ashldi3+0x1a>
    16fc:	0f 91       	pop	r16
    16fe:	08 95       	ret

00001700 <__ashrdi3>:
    1700:	97 fb       	bst	r25, 7
    1702:	10 f8       	bld	r1, 0

00001704 <__lshrdi3>:
    1704:	16 94       	lsr	r1
    1706:	00 08       	sbc	r0, r0
    1708:	0f 93       	push	r16
    170a:	08 30       	cpi	r16, 0x08	; 8
    170c:	98 f0       	brcs	.+38     	; 0x1734 <__lshrdi3+0x30>
    170e:	08 50       	subi	r16, 0x08	; 8
    1710:	23 2f       	mov	r18, r19
    1712:	34 2f       	mov	r19, r20
    1714:	45 2f       	mov	r20, r21
    1716:	56 2f       	mov	r21, r22
    1718:	67 2f       	mov	r22, r23
    171a:	78 2f       	mov	r23, r24
    171c:	89 2f       	mov	r24, r25
    171e:	90 2d       	mov	r25, r0
    1720:	f4 cf       	rjmp	.-24     	; 0x170a <__lshrdi3+0x6>
    1722:	05 94       	asr	r0
    1724:	97 95       	ror	r25
    1726:	87 95       	ror	r24
    1728:	77 95       	ror	r23
    172a:	67 95       	ror	r22
    172c:	57 95       	ror	r21
    172e:	47 95       	ror	r20
    1730:	37 95       	ror	r19
    1732:	27 95       	ror	r18
    1734:	0a 95       	dec	r16
    1736:	aa f7       	brpl	.-22     	; 0x1722 <__lshrdi3+0x1e>
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <__adddi3_s8>:
    173c:	00 24       	eor	r0, r0
    173e:	a7 fd       	sbrc	r26, 7
    1740:	00 94       	com	r0
    1742:	2a 0f       	add	r18, r26
    1744:	30 1d       	adc	r19, r0
    1746:	40 1d       	adc	r20, r0
    1748:	50 1d       	adc	r21, r0
    174a:	60 1d       	adc	r22, r0
    174c:	70 1d       	adc	r23, r0
    174e:	80 1d       	adc	r24, r0
    1750:	90 1d       	adc	r25, r0
    1752:	08 95       	ret

00001754 <__cmpdi2>:
    1754:	2a 15       	cp	r18, r10
    1756:	3b 05       	cpc	r19, r11
    1758:	4c 05       	cpc	r20, r12
    175a:	5d 05       	cpc	r21, r13
    175c:	6e 05       	cpc	r22, r14
    175e:	7f 05       	cpc	r23, r15
    1760:	80 07       	cpc	r24, r16
    1762:	91 07       	cpc	r25, r17
    1764:	08 95       	ret

00001766 <__cmpdi2_s8>:
    1766:	00 24       	eor	r0, r0
    1768:	a7 fd       	sbrc	r26, 7
    176a:	00 94       	com	r0
    176c:	2a 17       	cp	r18, r26
    176e:	30 05       	cpc	r19, r0
    1770:	40 05       	cpc	r20, r0
    1772:	50 05       	cpc	r21, r0
    1774:	60 05       	cpc	r22, r0
    1776:	70 05       	cpc	r23, r0
    1778:	80 05       	cpc	r24, r0
    177a:	90 05       	cpc	r25, r0
    177c:	08 95       	ret

0000177e <_exit>:
    177e:	f8 94       	cli

00001780 <__stop_program>:
    1780:	ff cf       	rjmp	.-2      	; 0x1780 <__stop_program>
