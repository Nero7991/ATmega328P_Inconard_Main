
ATmega328P_Inconard_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000019fc  00001a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018d  00800142  00800142  00001ad2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a8  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d3d  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016aa  00000000  00000000  00008e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002dbe  00000000  00000000  0000a4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012b4  00000000  00000000  0000d294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023eb  00000000  00000000  0000e548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000413e  00000000  00000000  00010933  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000560  00000000  00000000  00014a71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__ctors_end>
       4:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__vector_1>
       8:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__vector_2>
       c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__vector_3>
      10:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__vector_4>
      14:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__vector_5>
      18:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__vector_6>
      1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      2c:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__vector_11>
      30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      44:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__vector_17>
      48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	49 6e       	ori	r20, 0xE9	; 233
      6a:	69 74       	andi	r22, 0x49	; 73
      6c:	69 61       	ori	r22, 0x19	; 25
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	7a 69       	ori	r23, 0x9A	; 154
      72:	6e 67       	ori	r22, 0x7E	; 126
      74:	20 73       	andi	r18, 0x30	; 48
      76:	75 63       	ori	r23, 0x35	; 53
      78:	63 65       	ori	r22, 0x53	; 83
      7a:	73 73       	andi	r23, 0x33	; 51
      7c:	66 75       	andi	r22, 0x56	; 86
      7e:	6c 2e       	mov	r6, r28
	...

00000081 <_ZZN8NRF24L017setModeEbE3__c_1>:
      81:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
      91:	61 69 6c 65 64 20 66 6f 72 20 6e 52 46 32 34 4c     ailed for nRF24L
      a1:	30 31 2e 20 43 68 65 63 6b 20 63 6f 6e 6e 65 63     01. Check connec
      b1:	74 69 6f 6e 73 00                                   tions.

000000b7 <_ZZN8NRF24L017setModeEbE3__c_0>:
      b7:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      c7:	31 20 69 6e 20 54 72 61 6e 73 6d 69 74 20 4d 6f     1 in Transmit Mo
      d7:	64 65 2e 2e 2e 00                                   de....

000000dd <_ZZN8NRF24L017setModeEbE3__c>:
      dd:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      ed:	31 20 69 6e 20 52 65 63 65 69 76 65 20 4d 6f 64     1 in Receive Mod
      fd:	65 2e 2e 2e 00                                      e....

00000102 <_ZZN8NRF24L0110initializeEvE3__c_0>:
     102:	4d 61 73 74 65 72 20 52 58 20 50 61 79 6c 6f 61     Master RX Payloa
     112:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     122:	3a 20 00                                            : .

00000125 <_ZZN8NRF24L0110initializeEvE3__c>:
     125:	4d 61 73 74 65 72 20 54 58 20 50 61 79 6c 6f 61     Master TX Payloa
     135:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     145:	3a 20 00                                            : .

00000148 <_ZZ4mainE3__c_0>:
     148:	44 6f 6e 65 00                                      Done.

0000014d <_ZZ4mainE3__c>:
     14d:	50 6f 77 65 72 69 6e 67 20 6f 6e 2e 2e 2e 00        Powering on....

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf ef       	ldi	r28, 0xFF	; 255
     162:	d8 e0       	ldi	r29, 0x08	; 8
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	a0 e0       	ldi	r26, 0x00	; 0
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	ec ef       	ldi	r30, 0xFC	; 252
     170:	f9 e1       	ldi	r31, 0x19	; 25
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	a2 34       	cpi	r26, 0x42	; 66
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	22 e0       	ldi	r18, 0x02	; 2
     180:	a2 e4       	ldi	r26, 0x42	; 66
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	af 3c       	cpi	r26, 0xCF	; 207
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	0e 94 1d 0b 	call	0x163a	; 0x163a <main>
     192:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <_exit>

00000196 <__bad_interrupt>:
     196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <_Z6wakeUpv>:
	MCUSR &= ~(1<<WDRF);
	/* Start timed sequence */
	WDTCR = (1<<WDCE) | (1<<WDE);
	/* Set new prescaler (time-out) value = 64K cycles (~0.5 s) */
	WDTCR = prescale;
	asm volatile("sei"::);
     19a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     19e:	08 95       	ret

000001a0 <_Z10allowSleepb>:
     1a0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
     1a4:	08 95       	ret

000001a6 <_Z14SPI_MasterInitv>:
     1a6:	24 98       	cbi	0x04, 4	; 4
     1a8:	84 b1       	in	r24, 0x04	; 4
     1aa:	8c 62       	ori	r24, 0x2C	; 44
     1ac:	84 b9       	out	0x04, r24	; 4
     1ae:	2a 9a       	sbi	0x05, 2	; 5
     1b0:	8c b5       	in	r24, 0x2c	; 44
     1b2:	82 65       	ori	r24, 0x52	; 82
     1b4:	8c bd       	out	0x2c, r24	; 44
     1b6:	08 95       	ret

000001b8 <_Z12initSPISlavev>:
     1b8:	84 b1       	in	r24, 0x04	; 4
     1ba:	83 7d       	andi	r24, 0xD3	; 211
     1bc:	84 b9       	out	0x04, r24	; 4
     1be:	24 9a       	sbi	0x04, 4	; 4
     1c0:	8c b5       	in	r24, 0x2c	; 44
     1c2:	8f 7e       	andi	r24, 0xEF	; 239
     1c4:	8c bd       	out	0x2c, r24	; 44
     1c6:	8c b5       	in	r24, 0x2c	; 44
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	8c bd       	out	0x2c, r24	; 44
     1cc:	08 95       	ret

000001ce <_Z9enableSPIb>:
     1ce:	88 23       	and	r24, r24
     1d0:	21 f0       	breq	.+8      	; 0x1da <_Z9enableSPIb+0xc>
     1d2:	8c b5       	in	r24, 0x2c	; 44
     1d4:	80 64       	ori	r24, 0x40	; 64
     1d6:	8c bd       	out	0x2c, r24	; 44
     1d8:	08 95       	ret
     1da:	8c b5       	in	r24, 0x2c	; 44
     1dc:	8f 7b       	andi	r24, 0xBF	; 191
     1de:	8c bd       	out	0x2c, r24	; 44
     1e0:	08 95       	ret

000001e2 <_Z18enableSPIInterruptb>:
     1e2:	88 23       	and	r24, r24
     1e4:	21 f0       	breq	.+8      	; 0x1ee <_Z18enableSPIInterruptb+0xc>
     1e6:	8c b5       	in	r24, 0x2c	; 44
     1e8:	80 68       	ori	r24, 0x80	; 128
     1ea:	8c bd       	out	0x2c, r24	; 44
     1ec:	08 95       	ret
     1ee:	8c b5       	in	r24, 0x2c	; 44
     1f0:	8f 77       	andi	r24, 0x7F	; 127
     1f2:	8c bd       	out	0x2c, r24	; 44
     1f4:	08 95       	ret

000001f6 <_Z18SPI_MasterTransmitc>:
     1f6:	8e bd       	out	0x2e, r24	; 46
     1f8:	0d b4       	in	r0, 0x2d	; 45
     1fa:	07 fe       	sbrs	r0, 7
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <_Z18SPI_MasterTransmitc+0x2>
     1fe:	8e b5       	in	r24, 0x2e	; 46
     200:	08 95       	ret

00000202 <_Z11Init_CTC_T1hj>:
     202:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     206:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     20a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     20e:	87 70       	andi	r24, 0x07	; 7
     210:	88 60       	ori	r24, 0x08	; 8
     212:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     21c:	78 94       	sei
     21e:	08 95       	ret

00000220 <_Z11setPinStatehhb>:
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	e9 f0       	breq	.+58     	; 0x25e <_Z11setPinStatehhb+0x3e>
     224:	18 f0       	brcs	.+6      	; 0x22c <_Z11setPinStatehhb+0xc>
     226:	82 30       	cpi	r24, 0x02	; 2
     228:	99 f1       	breq	.+102    	; 0x290 <_Z11setPinStatehhb+0x70>
     22a:	08 95       	ret
     22c:	44 23       	and	r20, r20
     22e:	59 f0       	breq	.+22     	; 0x246 <_Z11setPinStatehhb+0x26>
     230:	25 b1       	in	r18, 0x05	; 5
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	02 c0       	rjmp	.+4      	; 0x23c <_Z11setPinStatehhb+0x1c>
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <_Z11setPinStatehhb+0x18>
     240:	82 2b       	or	r24, r18
     242:	85 b9       	out	0x05, r24	; 5
     244:	08 95       	ret
     246:	25 b1       	in	r18, 0x05	; 5
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <_Z11setPinStatehhb+0x32>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	6a 95       	dec	r22
     254:	e2 f7       	brpl	.-8      	; 0x24e <_Z11setPinStatehhb+0x2e>
     256:	80 95       	com	r24
     258:	82 23       	and	r24, r18
     25a:	85 b9       	out	0x05, r24	; 5
     25c:	08 95       	ret
     25e:	44 23       	and	r20, r20
     260:	59 f0       	breq	.+22     	; 0x278 <_Z11setPinStatehhb+0x58>
     262:	28 b1       	in	r18, 0x08	; 8
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	02 c0       	rjmp	.+4      	; 0x26e <_Z11setPinStatehhb+0x4e>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	6a 95       	dec	r22
     270:	e2 f7       	brpl	.-8      	; 0x26a <_Z11setPinStatehhb+0x4a>
     272:	82 2b       	or	r24, r18
     274:	88 b9       	out	0x08, r24	; 8
     276:	08 95       	ret
     278:	28 b1       	in	r18, 0x08	; 8
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <_Z11setPinStatehhb+0x64>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	6a 95       	dec	r22
     286:	e2 f7       	brpl	.-8      	; 0x280 <_Z11setPinStatehhb+0x60>
     288:	80 95       	com	r24
     28a:	82 23       	and	r24, r18
     28c:	88 b9       	out	0x08, r24	; 8
     28e:	08 95       	ret
     290:	44 23       	and	r20, r20
     292:	59 f0       	breq	.+22     	; 0x2aa <_Z11setPinStatehhb+0x8a>
     294:	2b b1       	in	r18, 0x0b	; 11
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <_Z11setPinStatehhb+0x80>
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	6a 95       	dec	r22
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <_Z11setPinStatehhb+0x7c>
     2a4:	82 2b       	or	r24, r18
     2a6:	8b b9       	out	0x0b, r24	; 11
     2a8:	08 95       	ret
     2aa:	2b b1       	in	r18, 0x0b	; 11
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <_Z11setPinStatehhb+0x96>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	6a 95       	dec	r22
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <_Z11setPinStatehhb+0x92>
     2ba:	80 95       	com	r24
     2bc:	82 23       	and	r24, r18
     2be:	8b b9       	out	0x0b, r24	; 11
     2c0:	08 95       	ret

000002c2 <_Z15setPinDirectionhhb>:
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	e9 f0       	breq	.+58     	; 0x300 <_Z15setPinDirectionhhb+0x3e>
     2c6:	18 f0       	brcs	.+6      	; 0x2ce <_Z15setPinDirectionhhb+0xc>
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	99 f1       	breq	.+102    	; 0x332 <_Z15setPinDirectionhhb+0x70>
     2cc:	08 95       	ret
     2ce:	44 23       	and	r20, r20
     2d0:	59 f0       	breq	.+22     	; 0x2e8 <_Z15setPinDirectionhhb+0x26>
     2d2:	24 b1       	in	r18, 0x04	; 4
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <_Z15setPinDirectionhhb+0x1c>
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	6a 95       	dec	r22
     2e0:	e2 f7       	brpl	.-8      	; 0x2da <_Z15setPinDirectionhhb+0x18>
     2e2:	82 2b       	or	r24, r18
     2e4:	84 b9       	out	0x04, r24	; 4
     2e6:	08 95       	ret
     2e8:	24 b1       	in	r18, 0x04	; 4
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <_Z15setPinDirectionhhb+0x32>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	6a 95       	dec	r22
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <_Z15setPinDirectionhhb+0x2e>
     2f8:	80 95       	com	r24
     2fa:	82 23       	and	r24, r18
     2fc:	84 b9       	out	0x04, r24	; 4
     2fe:	08 95       	ret
     300:	44 23       	and	r20, r20
     302:	59 f0       	breq	.+22     	; 0x31a <_Z15setPinDirectionhhb+0x58>
     304:	27 b1       	in	r18, 0x07	; 7
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 c0       	rjmp	.+4      	; 0x310 <_Z15setPinDirectionhhb+0x4e>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	6a 95       	dec	r22
     312:	e2 f7       	brpl	.-8      	; 0x30c <_Z15setPinDirectionhhb+0x4a>
     314:	82 2b       	or	r24, r18
     316:	87 b9       	out	0x07, r24	; 7
     318:	08 95       	ret
     31a:	27 b1       	in	r18, 0x07	; 7
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	02 c0       	rjmp	.+4      	; 0x326 <_Z15setPinDirectionhhb+0x64>
     322:	88 0f       	add	r24, r24
     324:	99 1f       	adc	r25, r25
     326:	6a 95       	dec	r22
     328:	e2 f7       	brpl	.-8      	; 0x322 <_Z15setPinDirectionhhb+0x60>
     32a:	80 95       	com	r24
     32c:	82 23       	and	r24, r18
     32e:	87 b9       	out	0x07, r24	; 7
     330:	08 95       	ret
     332:	44 23       	and	r20, r20
     334:	59 f0       	breq	.+22     	; 0x34c <_Z15setPinDirectionhhb+0x8a>
     336:	2a b1       	in	r18, 0x0a	; 10
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	02 c0       	rjmp	.+4      	; 0x342 <_Z15setPinDirectionhhb+0x80>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	6a 95       	dec	r22
     344:	e2 f7       	brpl	.-8      	; 0x33e <_Z15setPinDirectionhhb+0x7c>
     346:	82 2b       	or	r24, r18
     348:	8a b9       	out	0x0a, r24	; 10
     34a:	08 95       	ret
     34c:	2a b1       	in	r18, 0x0a	; 10
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	02 c0       	rjmp	.+4      	; 0x358 <_Z15setPinDirectionhhb+0x96>
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	6a 95       	dec	r22
     35a:	e2 f7       	brpl	.-8      	; 0x354 <_Z15setPinDirectionhhb+0x92>
     35c:	80 95       	com	r24
     35e:	82 23       	and	r24, r18
     360:	8a b9       	out	0x0a, r24	; 10
     362:	08 95       	ret

00000364 <_Z21setPinChangeInterrupthhb>:
     364:	e8 e6       	ldi	r30, 0x68	; 104
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	90 81       	ld	r25, Z
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	08 2e       	mov	r0, r24
     370:	02 c0       	rjmp	.+4      	; 0x376 <_Z21setPinChangeInterrupthhb+0x12>
     372:	22 0f       	add	r18, r18
     374:	33 1f       	adc	r19, r19
     376:	0a 94       	dec	r0
     378:	e2 f7       	brpl	.-8      	; 0x372 <_Z21setPinChangeInterrupthhb+0xe>
     37a:	29 2b       	or	r18, r25
     37c:	20 83       	st	Z, r18
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	81 f0       	breq	.+32     	; 0x3a2 <_Z21setPinChangeInterrupthhb+0x3e>
     382:	18 f0       	brcs	.+6      	; 0x38a <_Z21setPinChangeInterrupthhb+0x26>
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	c9 f0       	breq	.+50     	; 0x3ba <_Z21setPinChangeInterrupthhb+0x56>
     388:	08 95       	ret
     38a:	eb e6       	ldi	r30, 0x6B	; 107
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <_Z21setPinChangeInterrupthhb+0x34>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	6a 95       	dec	r22
     39a:	e2 f7       	brpl	.-8      	; 0x394 <_Z21setPinChangeInterrupthhb+0x30>
     39c:	48 2b       	or	r20, r24
     39e:	40 83       	st	Z, r20
     3a0:	08 95       	ret
     3a2:	ec e6       	ldi	r30, 0x6C	; 108
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <_Z21setPinChangeInterrupthhb+0x4c>
     3ac:	44 0f       	add	r20, r20
     3ae:	55 1f       	adc	r21, r21
     3b0:	6a 95       	dec	r22
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <_Z21setPinChangeInterrupthhb+0x48>
     3b4:	48 2b       	or	r20, r24
     3b6:	40 83       	st	Z, r20
     3b8:	08 95       	ret
     3ba:	ed e6       	ldi	r30, 0x6D	; 109
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <_Z21setPinChangeInterrupthhb+0x64>
     3c4:	44 0f       	add	r20, r20
     3c6:	55 1f       	adc	r21, r21
     3c8:	6a 95       	dec	r22
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <_Z21setPinChangeInterrupthhb+0x60>
     3cc:	48 2b       	or	r20, r24
     3ce:	40 83       	st	Z, r20
     3d0:	08 95       	ret

000003d2 <_Z11getPinStatehh>:
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	69 f0       	breq	.+26     	; 0x3f0 <_Z11getPinStatehh+0x1e>
     3d6:	18 f0       	brcs	.+6      	; 0x3de <_Z11getPinStatehh+0xc>
     3d8:	82 30       	cpi	r24, 0x02	; 2
     3da:	99 f0       	breq	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3dc:	1b c0       	rjmp	.+54     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3de:	83 b1       	in	r24, 0x03	; 3
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <_Z11getPinStatehh+0x16>
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	6a 95       	dec	r22
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <_Z11getPinStatehh+0x12>
     3ec:	81 70       	andi	r24, 0x01	; 1
     3ee:	08 95       	ret
     3f0:	86 b1       	in	r24, 0x06	; 6
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <_Z11getPinStatehh+0x28>
     3f6:	95 95       	asr	r25
     3f8:	87 95       	ror	r24
     3fa:	6a 95       	dec	r22
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <_Z11getPinStatehh+0x24>
     3fe:	81 70       	andi	r24, 0x01	; 1
     400:	08 95       	ret
     402:	89 b1       	in	r24, 0x09	; 9
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	95 95       	asr	r25
     40a:	87 95       	ror	r24
     40c:	6a 95       	dec	r22
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	81 70       	andi	r24, 0x01	; 1
     412:	08 95       	ret
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	08 95       	ret

00000418 <_Z10USART_Initj>:
     418:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     41c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     420:	88 e1       	ldi	r24, 0x18	; 24
     422:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     426:	8e e0       	ldi	r24, 0x0E	; 14
     428:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     42c:	08 95       	ret

0000042e <_Z14USART_Transmith>:
     42e:	e0 ec       	ldi	r30, 0xC0	; 192
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	90 81       	ld	r25, Z
     434:	95 ff       	sbrs	r25, 5
     436:	fd cf       	rjmp	.-6      	; 0x432 <_Z14USART_Transmith+0x4>
     438:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     43c:	08 95       	ret

0000043e <_Z13milliHappenedv>:
}


void milliHappened(){
	time += 1;
     43e:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <time>
     442:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <time+0x1>
     446:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <time+0x2>
     44a:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <time+0x3>
     44e:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <time+0x4>
     452:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <time+0x5>
     456:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <time+0x6>
     45a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <time+0x7>
     45e:	a1 e0       	ldi	r26, 0x01	; 1
     460:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__adddi3_s8>
     464:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <time>
     468:	30 93 46 01 	sts	0x0146, r19	; 0x800146 <time+0x1>
     46c:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <time+0x2>
     470:	50 93 48 01 	sts	0x0148, r21	; 0x800148 <time+0x3>
     474:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <time+0x4>
     478:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <time+0x5>
     47c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <time+0x6>
     480:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <time+0x7>
	if(cdown != 0){
     484:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cdown>
     488:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <cdown+0x1>
     48c:	89 2b       	or	r24, r25
     48e:	49 f0       	breq	.+18     	; 0x4a2 <_Z13milliHappenedv+0x64>
		cdown -= 1;
     490:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cdown>
     494:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <cdown+0x1>
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <cdown+0x1>
     49e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cdown>
     4a2:	08 95       	ret

000004a4 <__vector_6>:
	}
	count1 += 1;
}*/


ISR(WDT_vect){
     4a4:	1f 92       	push	r1
     4a6:	0f 92       	push	r0
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	0f 92       	push	r0
     4ac:	11 24       	eor	r1, r1
     4ae:	8f 93       	push	r24
	MCUSR &= ~(1 << SE);
     4b0:	84 b7       	in	r24, 0x34	; 52
     4b2:	8e 7f       	andi	r24, 0xFE	; 254
     4b4:	84 bf       	out	0x34, r24	; 52
     4b6:	8f 91       	pop	r24
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <_Z10numToArrayy>:
	USART_Transmit('\n');
	while(*p != 0){
		USART_Transmit(*p);
		p++;
	}
}
     4c2:	0f 93       	push	r16
     4c4:	ee e8       	ldi	r30, 0x8E	; 142
     4c6:	f1 e0       	ldi	r31, 0x01	; 1
     4c8:	a6 e9       	ldi	r26, 0x96	; 150
     4ca:	b1 e0       	ldi	r27, 0x01	; 1
     4cc:	21 93       	st	Z+, r18
     4ce:	08 e0       	ldi	r16, 0x08	; 8
     4d0:	0e 94 bf 0c 	call	0x197e	; 0x197e <__lshrdi3>
     4d4:	ea 17       	cp	r30, r26
     4d6:	fb 07       	cpc	r31, r27
     4d8:	c9 f7       	brne	.-14     	; 0x4cc <_Z10numToArrayy+0xa>
     4da:	8e e8       	ldi	r24, 0x8E	; 142
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <_Z10hexToASCIIh>:
     4e2:	8a 30       	cpi	r24, 0x0A	; 10
     4e4:	10 f0       	brcs	.+4      	; 0x4ea <_Z10hexToASCIIh+0x8>
     4e6:	89 5c       	subi	r24, 0xC9	; 201
     4e8:	08 95       	ret
     4ea:	80 5d       	subi	r24, 0xD0	; 208
     4ec:	08 95       	ret

000004ee <_Z11hexToStringh>:
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	18 2f       	mov	r17, r24
     4f6:	82 95       	swap	r24
     4f8:	8f 70       	andi	r24, 0x0F	; 15
     4fa:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z10hexToASCIIh>
     4fe:	c6 e9       	ldi	r28, 0x96	; 150
     500:	d1 e0       	ldi	r29, 0x01	; 1
     502:	88 83       	st	Y, r24
     504:	81 2f       	mov	r24, r17
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <_ZZ11hexToStringhE4temp>
     50c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z10hexToASCIIh>
     510:	89 83       	std	Y+1, r24	; 0x01
     512:	1a 82       	std	Y+2, r1	; 0x02
     514:	ce 01       	movw	r24, r28
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	08 95       	ret

0000051e <_Z11printNumbery>:
     51e:	2f 92       	push	r2
     520:	3f 92       	push	r3
     522:	4f 92       	push	r4
     524:	5f 92       	push	r5
     526:	6f 92       	push	r6
     528:	7f 92       	push	r7
     52a:	8f 92       	push	r8
     52c:	9f 92       	push	r9
     52e:	af 92       	push	r10
     530:	bf 92       	push	r11
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	c7 56       	subi	r28, 0x67	; 103
     548:	d1 09       	sbc	r29, r1
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	a6 96       	adiw	r28, 0x26	; 38
     556:	2f af       	std	Y+63, r18	; 0x3f
     558:	a6 97       	sbiw	r28, 0x26	; 38
     55a:	83 2e       	mov	r8, r19
     55c:	74 2e       	mov	r7, r20
     55e:	65 2e       	mov	r6, r21
     560:	56 2e       	mov	r5, r22
     562:	47 2e       	mov	r4, r23
     564:	38 2e       	mov	r3, r24
     566:	29 2e       	mov	r2, r25
     568:	a0 e0       	ldi	r26, 0x00	; 0
     56a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__cmpdi2_s8>
     56e:	21 f4       	brne	.+8      	; 0x578 <_Z11printNumbery+0x5a>
     570:	80 e3       	ldi	r24, 0x30	; 48
     572:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     576:	52 c0       	rjmp	.+164    	; 0x61c <_Z11printNumbery+0xfe>
     578:	91 2c       	mov	r9, r1
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	8c 0f       	add	r24, r28
     580:	9d 1f       	adc	r25, r29
     582:	89 0d       	add	r24, r9
     584:	91 1d       	adc	r25, r1
     586:	a8 96       	adiw	r28, 0x28	; 40
     588:	9f af       	std	Y+63, r25	; 0x3f
     58a:	8e af       	std	Y+62, r24	; 0x3e
     58c:	a8 97       	sbiw	r28, 0x28	; 40
     58e:	0f 2e       	mov	r0, r31
     590:	fa e0       	ldi	r31, 0x0A	; 10
     592:	af 2e       	mov	r10, r31
     594:	f0 2d       	mov	r31, r0
     596:	b1 2c       	mov	r11, r1
     598:	c1 2c       	mov	r12, r1
     59a:	d1 2c       	mov	r13, r1
     59c:	e1 2c       	mov	r14, r1
     59e:	f1 2c       	mov	r15, r1
     5a0:	00 e0       	ldi	r16, 0x00	; 0
     5a2:	10 e0       	ldi	r17, 0x00	; 0
     5a4:	a6 96       	adiw	r28, 0x26	; 38
     5a6:	2f ad       	ldd	r18, Y+63	; 0x3f
     5a8:	a6 97       	sbiw	r28, 0x26	; 38
     5aa:	38 2d       	mov	r19, r8
     5ac:	47 2d       	mov	r20, r7
     5ae:	56 2d       	mov	r21, r6
     5b0:	65 2d       	mov	r22, r5
     5b2:	74 2d       	mov	r23, r4
     5b4:	83 2d       	mov	r24, r3
     5b6:	92 2d       	mov	r25, r2
     5b8:	0e 94 45 0c 	call	0x188a	; 0x188a <__umoddi3>
     5bc:	20 5d       	subi	r18, 0xD0	; 208
     5be:	a8 96       	adiw	r28, 0x28	; 40
     5c0:	ee ad       	ldd	r30, Y+62	; 0x3e
     5c2:	ff ad       	ldd	r31, Y+63	; 0x3f
     5c4:	a8 97       	sbiw	r28, 0x28	; 40
     5c6:	20 83       	st	Z, r18
     5c8:	a6 96       	adiw	r28, 0x26	; 38
     5ca:	2f ad       	ldd	r18, Y+63	; 0x3f
     5cc:	a6 97       	sbiw	r28, 0x26	; 38
     5ce:	38 2d       	mov	r19, r8
     5d0:	47 2d       	mov	r20, r7
     5d2:	56 2d       	mov	r21, r6
     5d4:	65 2d       	mov	r22, r5
     5d6:	74 2d       	mov	r23, r4
     5d8:	83 2d       	mov	r24, r3
     5da:	92 2d       	mov	r25, r2
     5dc:	0e 94 47 0c 	call	0x188e	; 0x188e <__udivdi3>
     5e0:	a6 96       	adiw	r28, 0x26	; 38
     5e2:	2f af       	std	Y+63, r18	; 0x3f
     5e4:	a6 97       	sbiw	r28, 0x26	; 38
     5e6:	83 2e       	mov	r8, r19
     5e8:	74 2e       	mov	r7, r20
     5ea:	65 2e       	mov	r6, r21
     5ec:	56 2e       	mov	r5, r22
     5ee:	47 2e       	mov	r4, r23
     5f0:	38 2e       	mov	r3, r24
     5f2:	29 2e       	mov	r2, r25
     5f4:	93 94       	inc	r9
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__cmpdi2_s8>
     5fc:	09 f0       	breq	.+2      	; 0x600 <_Z11printNumbery+0xe2>
     5fe:	bd cf       	rjmp	.-134    	; 0x57a <_Z11printNumbery+0x5c>
     600:	99 20       	and	r9, r9
     602:	61 f0       	breq	.+24     	; 0x61c <_Z11printNumbery+0xfe>
     604:	9a 94       	dec	r9
     606:	e1 e0       	ldi	r30, 0x01	; 1
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	ec 0f       	add	r30, r28
     60c:	fd 1f       	adc	r31, r29
     60e:	e9 0d       	add	r30, r9
     610:	f1 1d       	adc	r31, r1
     612:	80 81       	ld	r24, Z
     614:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     618:	91 10       	cpse	r9, r1
     61a:	f4 cf       	rjmp	.-24     	; 0x604 <_Z11printNumbery+0xe6>
     61c:	80 e2       	ldi	r24, 0x20	; 32
     61e:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     622:	c9 59       	subi	r28, 0x99	; 153
     624:	df 4f       	sbci	r29, 0xFF	; 255
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	ff 90       	pop	r15
     63a:	ef 90       	pop	r14
     63c:	df 90       	pop	r13
     63e:	cf 90       	pop	r12
     640:	bf 90       	pop	r11
     642:	af 90       	pop	r10
     644:	9f 90       	pop	r9
     646:	8f 90       	pop	r8
     648:	7f 90       	pop	r7
     64a:	6f 90       	pop	r6
     64c:	5f 90       	pop	r5
     64e:	4f 90       	pop	r4
     650:	3f 90       	pop	r3
     652:	2f 90       	pop	r2
     654:	08 95       	ret

00000656 <_Z6NotifyPKc>:
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	ec 01       	movw	r28, r24
     65c:	8d e0       	ldi	r24, 0x0D	; 13
     65e:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     662:	8a e0       	ldi	r24, 0x0A	; 10
     664:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     668:	fe 01       	movw	r30, r28
     66a:	84 91       	lpm	r24, Z
     66c:	88 23       	and	r24, r24
     66e:	49 f0       	breq	.+18     	; 0x682 <_Z6NotifyPKc+0x2c>
     670:	fe 01       	movw	r30, r28
     672:	84 91       	lpm	r24, Z
     674:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	fe 01       	movw	r30, r28
     67c:	84 91       	lpm	r24, Z
     67e:	81 11       	cpse	r24, r1
     680:	f7 cf       	rjmp	.-18     	; 0x670 <_Z6NotifyPKc+0x1a>
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <_Z15printStringCRNLPKc>:

void printStringCRNL(const char *p){
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
	USART_Transmit('\r');
     68e:	8d e0       	ldi	r24, 0x0D	; 13
     690:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
	USART_Transmit('\n');
     694:	8a e0       	ldi	r24, 0x0A	; 10
     696:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
	while(*p != 0){
     69a:	88 81       	ld	r24, Y
     69c:	88 23       	and	r24, r24
     69e:	31 f0       	breq	.+12     	; 0x6ac <_Z15printStringCRNLPKc+0x24>
     6a0:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     6a2:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
}

void printStringCRNL(const char *p){
	USART_Transmit('\r');
	USART_Transmit('\n');
	while(*p != 0){
     6a6:	89 91       	ld	r24, Y+
     6a8:	81 11       	cpse	r24, r1
     6aa:	fb cf       	rjmp	.-10     	; 0x6a2 <_Z15printStringCRNLPKc+0x1a>
		USART_Transmit(*p);
		p++;
	}
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <_Z11printStringPKc>:

void printString(const char *p){
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	ec 01       	movw	r28, r24
	while(*p != 0){
     6b8:	88 81       	ld	r24, Y
     6ba:	88 23       	and	r24, r24
     6bc:	31 f0       	breq	.+12     	; 0x6ca <_Z11printStringPKc+0x18>
     6be:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     6c0:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
		p++;
	}
}

void printString(const char *p){
	while(*p != 0){
     6c4:	89 91       	ld	r24, Y+
     6c6:	81 11       	cpse	r24, r1
     6c8:	fb cf       	rjmp	.-10     	; 0x6c0 <_Z11printStringPKc+0xe>
		USART_Transmit(*p);
		p++;
	}
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <_Z16hexArrayToStringPhh>:
		data >>= 8;
	}
	return array;
} 

char* hexArrayToString(uint8_t *data, uint8_t length){
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	f6 2e       	mov	r15, r22
	static char str[64], t;
	data += length - 1;
     6dc:	06 2f       	mov	r16, r22
     6de:	10 e0       	ldi	r17, 0x00	; 0
     6e0:	01 50       	subi	r16, 0x01	; 1
     6e2:	11 09       	sbc	r17, r1
     6e4:	08 0f       	add	r16, r24
     6e6:	19 1f       	adc	r17, r25
		p++;
	}
}

void printChar(unsigned char data){
	USART_Transmit(data);
     6e8:	80 e3       	ldi	r24, 0x30	; 48
     6ea:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     6ee:	88 e7       	ldi	r24, 0x78	; 120
     6f0:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     6f4:	ff 20       	and	r15, r15
     6f6:	81 f0       	breq	.+32     	; 0x718 <_Z16hexArrayToStringPhh+0x48>
     6f8:	e8 01       	movw	r28, r16
     6fa:	21 96       	adiw	r28, 0x01	; 1
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	8f 0d       	add	r24, r15
     700:	08 1b       	sub	r16, r24
     702:	11 09       	sbc	r17, r1
	{	
		t = *data;
     704:	8a 91       	ld	r24, -Y
     706:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_ZZ16hexArrayToStringPhhE1t>
		printString(hexToString(t));
     70a:	0e 94 77 02 	call	0x4ee	; 0x4ee <_Z11hexToStringh>
     70e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z11printStringPKc>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     712:	c0 17       	cp	r28, r16
     714:	d1 07       	cpc	r29, r17
     716:	b1 f7       	brne	.-20     	; 0x704 <_Z16hexArrayToStringPhh+0x34>
	{	
		t = *data;
		printString(hexToString(t));
		data -= 1;
	}
	str[length + 2] = 0;
     718:	ef 2d       	mov	r30, r15
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	e3 5b       	subi	r30, 0xB3	; 179
     71e:	fe 4f       	sbci	r31, 0xFE	; 254
     720:	12 82       	std	Z+2, r1	; 0x02
	return str;
}
     722:	8d e4       	ldi	r24, 0x4D	; 77
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	08 95       	ret

00000732 <_Z14printHexNumberyh>:
	ascii[1] = hexToASCII(temp);
	ascii[2] = '\0';
	return ascii;
}

void printHexNumber(uint64_t data,uint8_t length){
     732:	0f 93       	push	r16
	printString(hexArrayToString(numToArray((data)),length));
     734:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z10numToArrayy>
     738:	60 2f       	mov	r22, r16
     73a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_Z16hexArrayToStringPhh>
     73e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z11printStringPKc>
}
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <_ZN8NRF24L0114toggleActivateEv>:
	for(i = 0; i < BufferLength_MasterRX; i++){
		SPI_MasterTransmit(*data);
		data += 1;
	}
	CSN = 1;
}
     746:	40 98       	cbi	0x08, 0	; 8
     748:	80 e5       	ldi	r24, 0x50	; 80
     74a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     74e:	83 e7       	ldi	r24, 0x73	; 115
     750:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     754:	40 9a       	sbi	0x08, 0	; 8
     756:	08 95       	ret

00000758 <_ZN8NRF24L0114sendSPICommandEh>:
     758:	86 2f       	mov	r24, r22
     75a:	40 98       	cbi	0x08, 0	; 8
     75c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     760:	40 9a       	sbi	0x08, 0	; 8
     762:	08 95       	ret

00000764 <_ZN8NRF24L0115readSPIRegisterEhh>:
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	86 2f       	mov	r24, r22
     77a:	a4 2e       	mov	r10, r20
     77c:	40 98       	cbi	0x08, 0	; 8
     77e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     782:	aa 20       	and	r10, r10
     784:	21 f1       	breq	.+72     	; 0x7ce <_ZN8NRF24L0115readSPIRegisterEhh+0x6a>
     786:	d0 e0       	ldi	r29, 0x00	; 0
     788:	c0 e0       	ldi	r28, 0x00	; 0
     78a:	b1 2c       	mov	r11, r1
     78c:	c1 2c       	mov	r12, r1
     78e:	d1 2c       	mov	r13, r1
     790:	e1 2c       	mov	r14, r1
     792:	f1 2c       	mov	r15, r1
     794:	00 e0       	ldi	r16, 0x00	; 0
     796:	10 e0       	ldi	r17, 0x00	; 0
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     79e:	2c 2f       	mov	r18, r28
     7a0:	28 2b       	or	r18, r24
     7a2:	3b 2d       	mov	r19, r11
     7a4:	4c 2d       	mov	r20, r12
     7a6:	5d 2d       	mov	r21, r13
     7a8:	6e 2d       	mov	r22, r14
     7aa:	7f 2d       	mov	r23, r15
     7ac:	80 2f       	mov	r24, r16
     7ae:	91 2f       	mov	r25, r17
     7b0:	08 e0       	ldi	r16, 0x08	; 8
     7b2:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__ashldi3>
     7b6:	c2 2f       	mov	r28, r18
     7b8:	b3 2e       	mov	r11, r19
     7ba:	c4 2e       	mov	r12, r20
     7bc:	d5 2e       	mov	r13, r21
     7be:	e6 2e       	mov	r14, r22
     7c0:	f7 2e       	mov	r15, r23
     7c2:	08 2f       	mov	r16, r24
     7c4:	19 2f       	mov	r17, r25
     7c6:	df 5f       	subi	r29, 0xFF	; 255
     7c8:	da 11       	cpse	r29, r10
     7ca:	e6 cf       	rjmp	.-52     	; 0x798 <_ZN8NRF24L0115readSPIRegisterEhh+0x34>
     7cc:	08 c0       	rjmp	.+16     	; 0x7de <_ZN8NRF24L0115readSPIRegisterEhh+0x7a>
     7ce:	c0 e0       	ldi	r28, 0x00	; 0
     7d0:	b1 2c       	mov	r11, r1
     7d2:	c1 2c       	mov	r12, r1
     7d4:	d1 2c       	mov	r13, r1
     7d6:	e1 2c       	mov	r14, r1
     7d8:	f1 2c       	mov	r15, r1
     7da:	00 e0       	ldi	r16, 0x00	; 0
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	40 9a       	sbi	0x08, 0	; 8
     7e0:	2c 2f       	mov	r18, r28
     7e2:	3b 2d       	mov	r19, r11
     7e4:	4c 2d       	mov	r20, r12
     7e6:	5d 2d       	mov	r21, r13
     7e8:	6e 2d       	mov	r22, r14
     7ea:	7f 2d       	mov	r23, r15
     7ec:	80 2f       	mov	r24, r16
     7ee:	91 2f       	mov	r25, r17
     7f0:	08 e0       	ldi	r16, 0x08	; 8
     7f2:	0e 94 bf 0c 	call	0x197e	; 0x197e <__lshrdi3>
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	bf 90       	pop	r11
     808:	af 90       	pop	r10
     80a:	08 95       	ret

0000080c <_ZN8NRF24L018isRXFullEv>:
     80c:	41 e0       	ldi	r20, 0x01	; 1
     80e:	67 e1       	ldi	r22, 0x17	; 23
     810:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     814:	82 2f       	mov	r24, r18
     816:	82 70       	andi	r24, 0x02	; 2
     818:	08 95       	ret

0000081a <_ZN8NRF24L019isRXEmptyEv>:
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	67 e1       	ldi	r22, 0x17	; 23
     81e:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     822:	82 2f       	mov	r24, r18
     824:	81 70       	andi	r24, 0x01	; 1
     826:	08 95       	ret

00000828 <_ZN8NRF24L0116writeSPIRegisterEhyh>:
     828:	9f 92       	push	r9
     82a:	af 92       	push	r10
     82c:	bf 92       	push	r11
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	c2 2f       	mov	r28, r18
     840:	d3 2f       	mov	r29, r19
     842:	b4 2e       	mov	r11, r20
     844:	a5 2e       	mov	r10, r21
     846:	40 98       	cbi	0x08, 0	; 8
     848:	86 2f       	mov	r24, r22
     84a:	80 62       	ori	r24, 0x20	; 32
     84c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     850:	98 2e       	mov	r9, r24
     852:	cc 20       	and	r12, r12
     854:	d1 f0       	breq	.+52     	; 0x88a <_ZN8NRF24L0116writeSPIRegisterEhyh+0x62>
     856:	d1 2c       	mov	r13, r1
     858:	8e 2d       	mov	r24, r14
     85a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     85e:	2e 2d       	mov	r18, r14
     860:	3f 2d       	mov	r19, r15
     862:	40 2f       	mov	r20, r16
     864:	51 2f       	mov	r21, r17
     866:	6c 2f       	mov	r22, r28
     868:	7d 2f       	mov	r23, r29
     86a:	8b 2d       	mov	r24, r11
     86c:	9a 2d       	mov	r25, r10
     86e:	08 e0       	ldi	r16, 0x08	; 8
     870:	0e 94 bf 0c 	call	0x197e	; 0x197e <__lshrdi3>
     874:	e2 2e       	mov	r14, r18
     876:	f3 2e       	mov	r15, r19
     878:	04 2f       	mov	r16, r20
     87a:	15 2f       	mov	r17, r21
     87c:	c6 2f       	mov	r28, r22
     87e:	d7 2f       	mov	r29, r23
     880:	b8 2e       	mov	r11, r24
     882:	a9 2e       	mov	r10, r25
     884:	d3 94       	inc	r13
     886:	dc 10       	cpse	r13, r12
     888:	e7 cf       	rjmp	.-50     	; 0x858 <_ZN8NRF24L0116writeSPIRegisterEhyh+0x30>
     88a:	40 9a       	sbi	0x08, 0	; 8
     88c:	89 2d       	mov	r24, r9
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	08 95       	ret

000008a6 <_ZN8NRF24L017powerONEb>:
     8a6:	cf 92       	push	r12
     8a8:	ef 92       	push	r14
     8aa:	ff 92       	push	r15
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
     8b6:	e6 2e       	mov	r14, r22
     8b8:	41 e0       	ldi	r20, 0x01	; 1
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     8c0:	2d 7f       	andi	r18, 0xFD	; 253
     8c2:	ee 0c       	add	r14, r14
     8c4:	e2 2a       	or	r14, r18
     8c6:	eb 82       	std	Y+3, r14	; 0x03
     8c8:	cc 24       	eor	r12, r12
     8ca:	c3 94       	inc	r12
     8cc:	f1 2c       	mov	r15, r1
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	ce 01       	movw	r24, r28
     8de:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	cf 90       	pop	r12
     8f0:	08 95       	ret

000008f2 <_ZN8NRF24L017setModeEb>:
     8f2:	af 92       	push	r10
     8f4:	bf 92       	push	r11
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
     908:	d6 2e       	mov	r13, r22
     90a:	41 e0       	ldi	r20, 0x01	; 1
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     912:	2b 83       	std	Y+3, r18	; 0x03
     914:	01 e0       	ldi	r16, 0x01	; 1
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 99 03 	call	0x732	; 0x732 <_Z14printHexNumberyh>
     928:	8b 81       	ldd	r24, Y+3	; 0x03
     92a:	8e 7f       	andi	r24, 0xFE	; 254
     92c:	ed 2c       	mov	r14, r13
     92e:	e8 2a       	or	r14, r24
     930:	eb 82       	std	Y+3, r14	; 0x03
     932:	cc 24       	eor	r12, r12
     934:	c3 94       	inc	r12
     936:	f1 2c       	mov	r15, r1
     938:	00 e0       	ldi	r16, 0x00	; 0
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	ce 01       	movw	r24, r28
     948:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     94c:	dd 20       	and	r13, r13
     94e:	29 f0       	breq	.+10     	; 0x95a <__stack+0x5b>
     950:	8d ed       	ldi	r24, 0xDD	; 221
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     958:	04 c0       	rjmp	.+8      	; 0x962 <__stack+0x63>
     95a:	87 eb       	ldi	r24, 0xB7	; 183
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	ce 01       	movw	r24, r28
     968:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     96c:	ab 80       	ldd	r10, Y+3	; 0x03
     96e:	b1 2c       	mov	r11, r1
     970:	c1 2c       	mov	r12, r1
     972:	d1 2c       	mov	r13, r1
     974:	e1 2c       	mov	r14, r1
     976:	f1 2c       	mov	r15, r1
     978:	00 e0       	ldi	r16, 0x00	; 0
     97a:	10 e0       	ldi	r17, 0x00	; 0
     97c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__cmpdi2>
     980:	29 f0       	breq	.+10     	; 0x98c <__stack+0x8d>
     982:	81 e8       	ldi	r24, 0x81	; 129
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     98a:	04 c0       	rjmp	.+8      	; 0x994 <__stack+0x95>
     98c:	88 e6       	ldi	r24, 0x68	; 104
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	cf 90       	pop	r12
     9a4:	bf 90       	pop	r11
     9a6:	af 90       	pop	r10
     9a8:	08 95       	ret

000009aa <_ZN8NRF24L0120enableACKWithPayloadEb>:
     9aa:	cf 92       	push	r12
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	ec 01       	movw	r28, r24
     9ba:	e6 2e       	mov	r14, r22
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	6d e1       	ldi	r22, 0x1D	; 29
     9c0:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     9c4:	2d 7f       	andi	r18, 0xFD	; 253
     9c6:	ee 0c       	add	r14, r14
     9c8:	e2 2a       	or	r14, r18
     9ca:	eb 82       	std	Y+3, r14	; 0x03
     9cc:	cc 24       	eor	r12, r12
     9ce:	c3 94       	inc	r12
     9d0:	f1 2c       	mov	r15, r1
     9d2:	00 e0       	ldi	r16, 0x00	; 0
     9d4:	10 e0       	ldi	r17, 0x00	; 0
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	6d e1       	ldi	r22, 0x1D	; 29
     9e0:	ce 01       	movw	r24, r28
     9e2:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	cf 90       	pop	r12
     9f4:	08 95       	ret

000009f6 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>:
     9f6:	cf 92       	push	r12
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
     a06:	e6 2e       	mov	r14, r22
     a08:	41 e0       	ldi	r20, 0x01	; 1
     a0a:	6d e1       	ldi	r22, 0x1D	; 29
     a0c:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     a10:	2b 7f       	andi	r18, 0xFB	; 251
     a12:	ee 0c       	add	r14, r14
     a14:	ee 0c       	add	r14, r14
     a16:	e2 2a       	or	r14, r18
     a18:	eb 82       	std	Y+3, r14	; 0x03
     a1a:	cc 24       	eor	r12, r12
     a1c:	c3 94       	inc	r12
     a1e:	f1 2c       	mov	r15, r1
     a20:	00 e0       	ldi	r16, 0x00	; 0
     a22:	10 e0       	ldi	r17, 0x00	; 0
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	6d e1       	ldi	r22, 0x1D	; 29
     a2e:	ce 01       	movw	r24, r28
     a30:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	cf 90       	pop	r12
     a42:	08 95       	ret

00000a44 <_ZN8NRF24L0118enableDPLForRXPipeEhb>:
     a44:	af 92       	push	r10
     a46:	bf 92       	push	r11
     a48:	cf 92       	push	r12
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	66 30       	cpi	r22, 0x06	; 6
     a58:	48 f5       	brcc	.+82     	; 0xaac <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x68>
     a5a:	c4 2f       	mov	r28, r20
     a5c:	d6 2f       	mov	r29, r22
     a5e:	5c 01       	movw	r10, r24
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	6c e1       	ldi	r22, 0x1C	; 28
     a64:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0d 2e       	mov	r0, r29
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x30>
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	0a 94       	dec	r0
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x2c>
     a78:	80 95       	com	r24
     a7a:	82 23       	and	r24, r18
     a7c:	4c 2f       	mov	r20, r28
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x42>
     a82:	44 0f       	add	r20, r20
     a84:	55 1f       	adc	r21, r21
     a86:	da 95       	dec	r29
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x3e>
     a8a:	e8 2e       	mov	r14, r24
     a8c:	e4 2a       	or	r14, r20
     a8e:	f5 01       	movw	r30, r10
     a90:	e3 82       	std	Z+3, r14	; 0x03
     a92:	cc 24       	eor	r12, r12
     a94:	c3 94       	inc	r12
     a96:	f1 2c       	mov	r15, r1
     a98:	00 e0       	ldi	r16, 0x00	; 0
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	6c e1       	ldi	r22, 0x1C	; 28
     aa6:	c5 01       	movw	r24, r10
     aa8:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	cf 90       	pop	r12
     aba:	bf 90       	pop	r11
     abc:	af 90       	pop	r10
     abe:	08 95       	ret

00000ac0 <_ZN8NRF24L0113setRFDataRateEb>:
     ac0:	cf 92       	push	r12
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	ec 01       	movw	r28, r24
     ad0:	e6 2e       	mov	r14, r22
     ad2:	41 e0       	ldi	r20, 0x01	; 1
     ad4:	66 e0       	ldi	r22, 0x06	; 6
     ad6:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     ada:	27 7f       	andi	r18, 0xF7	; 247
     adc:	ee 0c       	add	r14, r14
     ade:	ee 0c       	add	r14, r14
     ae0:	ee 0c       	add	r14, r14
     ae2:	e2 2a       	or	r14, r18
     ae4:	eb 82       	std	Y+3, r14	; 0x03
     ae6:	cc 24       	eor	r12, r12
     ae8:	c3 94       	inc	r12
     aea:	f1 2c       	mov	r15, r1
     aec:	00 e0       	ldi	r16, 0x00	; 0
     aee:	10 e0       	ldi	r17, 0x00	; 0
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	66 e0       	ldi	r22, 0x06	; 6
     afa:	ce 01       	movw	r24, r28
     afc:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	cf 90       	pop	r12
     b0e:	08 95       	ret

00000b10 <_ZN8NRF24L0118setTransmitAddressEy>:
     b10:	cf 92       	push	r12
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	0f 2e       	mov	r0, r31
     b1c:	f5 e0       	ldi	r31, 0x05	; 5
     b1e:	cf 2e       	mov	r12, r31
     b20:	f0 2d       	mov	r31, r0
     b22:	e0 2e       	mov	r14, r16
     b24:	f1 2e       	mov	r15, r17
     b26:	02 2f       	mov	r16, r18
     b28:	13 2f       	mov	r17, r19
     b2a:	24 2f       	mov	r18, r20
     b2c:	35 2f       	mov	r19, r21
     b2e:	46 2f       	mov	r20, r22
     b30:	57 2f       	mov	r21, r23
     b32:	60 e1       	ldi	r22, 0x10	; 16
     b34:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	cf 90       	pop	r12
     b42:	08 95       	ret

00000b44 <_ZN8NRF24L0118setReceive0AddressEy>:
     b44:	cf 92       	push	r12
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	0f 2e       	mov	r0, r31
     b50:	f5 e0       	ldi	r31, 0x05	; 5
     b52:	cf 2e       	mov	r12, r31
     b54:	f0 2d       	mov	r31, r0
     b56:	e0 2e       	mov	r14, r16
     b58:	f1 2e       	mov	r15, r17
     b5a:	02 2f       	mov	r16, r18
     b5c:	13 2f       	mov	r17, r19
     b5e:	24 2f       	mov	r18, r20
     b60:	35 2f       	mov	r19, r21
     b62:	46 2f       	mov	r20, r22
     b64:	57 2f       	mov	r21, r23
     b66:	6a e0       	ldi	r22, 0x0A	; 10
     b68:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	cf 90       	pop	r12
     b76:	08 95       	ret

00000b78 <_ZN8NRF24L0110initializeEv>:
     b78:	cf 92       	push	r12
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	ec 01       	movw	r28, r24
     b88:	38 9a       	sbi	0x07, 0	; 7
     b8a:	39 9a       	sbi	0x07, 1	; 7
     b8c:	41 9a       	sbi	0x08, 1	; 8
     b8e:	57 9a       	sbi	0x0a, 7	; 10
     b90:	1a 82       	std	Y+2, r1	; 0x02
     b92:	85 e2       	ldi	r24, 0x25	; 37
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     b9a:	28 81       	ld	r18, Y
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z11printNumbery>
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     bb6:	29 81       	ldd	r18, Y+1	; 0x01
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z11printNumbery>
     bca:	05 eb       	ldi	r16, 0xB5	; 181
     bcc:	1a eb       	ldi	r17, 0xBA	; 186
     bce:	2a eb       	ldi	r18, 0xBA	; 186
     bd0:	3a eb       	ldi	r19, 0xBA	; 186
     bd2:	4a eb       	ldi	r20, 0xBA	; 186
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	ce 01       	movw	r24, r28
     bdc:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN8NRF24L0118setTransmitAddressEy>
     be0:	2a eb       	ldi	r18, 0xBA	; 186
     be2:	3a eb       	ldi	r19, 0xBA	; 186
     be4:	4a eb       	ldi	r20, 0xBA	; 186
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	ce 01       	movw	r24, r28
     bee:	0e 94 a2 05 	call	0xb44	; 0xb44 <_ZN8NRF24L0118setReceive0AddressEy>
     bf2:	cc 24       	eor	r12, r12
     bf4:	c3 94       	inc	r12
     bf6:	e1 2c       	mov	r14, r1
     bf8:	f1 2c       	mov	r15, r1
     bfa:	00 e0       	ldi	r16, 0x00	; 0
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	64 e0       	ldi	r22, 0x04	; 4
     c08:	ce 01       	movw	r24, r28
     c0a:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	ce 01       	movw	r24, r28
     c12:	0e 94 60 05 	call	0xac0	; 0xac0 <_ZN8NRF24L0113setRFDataRateEb>
     c16:	6f 81       	ldd	r22, Y+7	; 0x07
     c18:	ce 01       	movw	r24, r28
     c1a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN8NRF24L017setModeEb>
     c1e:	88 85       	ldd	r24, Y+8	; 0x08
     c20:	88 23       	and	r24, r24
     c22:	81 f0       	breq	.+32     	; 0xc44 <_ZN8NRF24L0110initializeEv+0xcc>
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 a3 03 	call	0x746	; 0x746 <_ZN8NRF24L0114toggleActivateEv>
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	ce 01       	movw	r24, r28
     c2e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>
     c32:	41 e0       	ldi	r20, 0x01	; 1
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	ce 01       	movw	r24, r28
     c38:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN8NRF24L0118enableDPLForRXPipeEhb>
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	ce 01       	movw	r24, r28
     c40:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN8NRF24L0120enableACKWithPayloadEb>
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	ce 01       	movw	r24, r28
     c48:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_ZN8NRF24L017powerONEb>
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	cf 90       	pop	r12
     c5a:	08 95       	ret

00000c5c <_ZN8NRF24L01C1Ehhb>:
     c5c:	3f ef       	ldi	r19, 0xFF	; 255
     c5e:	51 ee       	ldi	r21, 0xE1	; 225
     c60:	74 e0       	ldi	r23, 0x04	; 4
     c62:	31 50       	subi	r19, 0x01	; 1
     c64:	50 40       	sbci	r21, 0x00	; 0
     c66:	70 40       	sbci	r23, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <_ZN8NRF24L01C1Ehhb+0x6>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <_ZN8NRF24L01C1Ehhb+0x10>
     c6c:	00 00       	nop
     c6e:	fc 01       	movw	r30, r24
     c70:	27 83       	std	Z+7, r18	; 0x07
     c72:	21 e0       	ldi	r18, 0x01	; 1
     c74:	20 87       	std	Z+8, r18	; 0x08
     c76:	60 83       	st	Z, r22
     c78:	41 83       	std	Z+1, r20	; 0x01
     c7a:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN8NRF24L0110initializeEv>
     c7e:	08 95       	ret

00000c80 <_ZN8NRF24L017flushRXEv>:
void NRF24L01::flushTX(){
	sendSPICommand(FLUSH_TX);
}

void NRF24L01::flushRX(){
	sendSPICommand(FLUSH_RX);
     c80:	62 ee       	ldi	r22, 0xE2	; 226
     c82:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN8NRF24L0114sendSPICommandEh>
     c86:	08 95       	ret

00000c88 <_ZN8NRF24L018readFIFOEPVh>:
		data += 1;
	}
	CSN = 1;
}

void NRF24L01::readFIFO(volatile uint8_t *data){
     c88:	9f 92       	push	r9
     c8a:	af 92       	push	r10
     c8c:	bf 92       	push	r11
     c8e:	cf 92       	push	r12
     c90:	df 92       	push	r13
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	5c 01       	movw	r10, r24
     ca0:	d6 2e       	mov	r13, r22
     ca2:	97 2e       	mov	r9, r23
	writeSPIRegister(STATUS, (1 << 6), 1);
     ca4:	cc 24       	eor	r12, r12
     ca6:	c3 94       	inc	r12
     ca8:	68 94       	set
     caa:	ee 24       	eor	r14, r14
     cac:	e6 f8       	bld	r14, 6
     cae:	f1 2c       	mov	r15, r1
     cb0:	00 e0       	ldi	r16, 0x00	; 0
     cb2:	10 e0       	ldi	r17, 0x00	; 0
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	67 e0       	ldi	r22, 0x07	; 7
     cbe:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8NRF24L0116writeSPIRegisterEhyh>
	CSN = 0;
     cc2:	40 98       	cbi	0x08, 0	; 8
	SPI_MasterTransmit(0x61);
     cc4:	81 e6       	ldi	r24, 0x61	; 97
     cc6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
	for(uint8_t i = 0; i < BufferLength_MasterTX; i++){
     cca:	f5 01       	movw	r30, r10
     ccc:	80 81       	ld	r24, Z
     cce:	88 23       	and	r24, r24
     cd0:	61 f0       	breq	.+24     	; 0xcea <_ZN8NRF24L018readFIFOEPVh+0x62>
     cd2:	cd 2d       	mov	r28, r13
     cd4:	d9 2d       	mov	r29, r9
		*data =  SPI_MasterTransmit(0x00);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     cdc:	89 93       	st	Y+, r24
     cde:	2c 2f       	mov	r18, r28
     ce0:	2d 19       	sub	r18, r13

void NRF24L01::readFIFO(volatile uint8_t *data){
	writeSPIRegister(STATUS, (1 << 6), 1);
	CSN = 0;
	SPI_MasterTransmit(0x61);
	for(uint8_t i = 0; i < BufferLength_MasterTX; i++){
     ce2:	f5 01       	movw	r30, r10
     ce4:	90 81       	ld	r25, Z
     ce6:	29 17       	cp	r18, r25
     ce8:	b0 f3       	brcs	.-20     	; 0xcd6 <_ZN8NRF24L018readFIFOEPVh+0x4e>
		*data =  SPI_MasterTransmit(0x00);
		data += 1;
	}
	CSN = 1;
     cea:	40 9a       	sbi	0x08, 0	; 8
	if(isRXFull()){
     cec:	c5 01       	movw	r24, r10
     cee:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8NRF24L018isRXFullEv>
     cf2:	88 23       	and	r24, r24
     cf4:	19 f0       	breq	.+6      	; 0xcfc <_ZN8NRF24L018readFIFOEPVh+0x74>
		flushRX();
     cf6:	c5 01       	movw	r24, r10
     cf8:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN8NRF24L017flushRXEv>
	}
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	bf 90       	pop	r11
     d0e:	af 90       	pop	r10
     d10:	9f 90       	pop	r9
     d12:	08 95       	ret

00000d14 <_ZN11SwitchClass9doNothingEh>:
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     d14:	08 95       	ret

00000d16 <_ZN11SwitchClass5beginEv>:
     d16:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <_ZN11SwitchClass1iE>
     d1a:	8a e8       	ldi	r24, 0x8A	; 138
     d1c:	96 e0       	ldi	r25, 0x06	; 6
     d1e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     d22:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZN11SwitchClass17PinStateChangePtrE>
     d26:	08 95       	ret

00000d28 <_ZN11SwitchClass10shortPressEPFvhE>:
     d28:	fc 01       	movw	r30, r24
     d2a:	77 87       	std	Z+15, r23	; 0x0f
     d2c:	66 87       	std	Z+14, r22	; 0x0e
     d2e:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     d32:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <_ZN11SwitchClass16AllShortPressPtrE>
     d36:	21 e0       	ldi	r18, 0x01	; 1
     d38:	24 8f       	std	Z+28, r18	; 0x1c
     d3a:	08 95       	ret

00000d3c <_ZN11SwitchClass18doubleWaitCompleteEv>:
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	ec 01       	movw	r28, r24
     d42:	1b a2       	std	Y+35, r1	; 0x23
     d44:	1c a2       	std	Y+36, r1	; 0x24
     d46:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN10TimerClass10resetTimerEv>
     d4a:	ce 01       	movw	r24, r28
     d4c:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN10TimerClass18resetCallbackTimerEv>
     d50:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d52:	81 11       	cpse	r24, r1
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <_ZN11SwitchClass18doubleWaitCompleteEv+0x22>
     d56:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN11SwitchClass11AllShort_ENE>
     d5a:	88 23       	and	r24, r24
     d5c:	c9 f0       	breq	.+50     	; 0xd90 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     d5e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
     d62:	88 23       	and	r24, r24
     d64:	61 f0       	breq	.+24     	; 0xd7e <_ZN11SwitchClass18doubleWaitCompleteEv+0x42>
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     d6c:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <_ZN11SwitchClass16AllShortPressPtrE>
     d70:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     d74:	30 97       	sbiw	r30, 0x00	; 0
     d76:	61 f0       	breq	.+24     	; 0xd90 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     d78:	8e a1       	ldd	r24, Y+38	; 0x26
     d7a:	09 95       	icall
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     d84:	ee 85       	ldd	r30, Y+14	; 0x0e
     d86:	ff 85       	ldd	r31, Y+15	; 0x0f
     d88:	30 97       	sbiw	r30, 0x00	; 0
     d8a:	11 f0       	breq	.+4      	; 0xd90 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     d8c:	8e a1       	ldd	r24, Y+38	; 0x26
     d8e:	09 95       	icall
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <_ZN11SwitchClass17callAllDoubleWaitEh>:
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
     d9e:	99 23       	and	r25, r25
     da0:	c1 f0       	breq	.+48     	; 0xdd2 <_ZN11SwitchClass17callAllDoubleWaitEh+0x3c>
     da2:	d8 2f       	mov	r29, r24
     da4:	c0 e0       	ldi	r28, 0x00	; 0
     da6:	ec 2f       	mov	r30, r28
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	e0 55       	subi	r30, 0x50	; 80
     db0:	fe 4f       	sbci	r31, 0xFE	; 254
     db2:	01 90       	ld	r0, Z+
     db4:	f0 81       	ld	r31, Z
     db6:	e0 2d       	mov	r30, r0
     db8:	91 a5       	ldd	r25, Z+41	; 0x29
     dba:	9d 13       	cpse	r25, r29
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     dbe:	30 97       	sbiw	r30, 0x00	; 0
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     dc2:	cf 01       	movw	r24, r30
     dc4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN11SwitchClass18doubleWaitCompleteEv>
     dc8:	cf 5f       	subi	r28, 0xFF	; 255
     dca:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
     dce:	c9 17       	cp	r28, r25
     dd0:	50 f3       	brcs	.-44     	; 0xda6 <_ZN11SwitchClass17callAllDoubleWaitEh+0x10>
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <_ZN11SwitchClass17enableSamePtrModeEb>:
     dd8:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
     ddc:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_ZN11SwitchClass11AllShort_ENE>
     de0:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <_ZN11SwitchClass12AllDouble_ENE>
     de4:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_ZN11SwitchClass10AllLong_ENE>
     de8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <_ZN11SwitchClass20AllContinuousLong_ENE>
     dec:	08 95       	ret

00000dee <_ZN11SwitchClass16updatePinBuffersEv>:
     dee:	83 b1       	in	r24, 0x03	; 3
     df0:	eb ea       	ldi	r30, 0xAB	; 171
     df2:	f1 e0       	ldi	r31, 0x01	; 1
     df4:	80 83       	st	Z, r24
     df6:	86 b1       	in	r24, 0x06	; 6
     df8:	81 83       	std	Z+1, r24	; 0x01
     dfa:	89 b1       	in	r24, 0x09	; 9
     dfc:	82 83       	std	Z+2, r24	; 0x02
     dfe:	08 95       	ret

00000e00 <_ZN11SwitchClass10pollSwitchEv>:
     e00:	fc 01       	movw	r30, r24
     e02:	80 a5       	ldd	r24, Z+40	; 0x28
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	49 f0       	breq	.+18     	; 0xe1a <_ZN11SwitchClass10pollSwitchEv+0x1a>
     e08:	18 f0       	brcs	.+6      	; 0xe10 <_ZN11SwitchClass10pollSwitchEv+0x10>
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	59 f0       	breq	.+22     	; 0xe24 <_ZN11SwitchClass10pollSwitchEv+0x24>
     e0e:	0e c0       	rjmp	.+28     	; 0xe2c <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e10:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN11SwitchClass9PinBufferE>
     e14:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e1a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <_ZN11SwitchClass9PinBufferE+0x1>
     e1e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e24:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN11SwitchClass9PinBufferE+0x2>
     e28:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e2c:	82 8d       	ldd	r24, Z+26	; 0x1a
     e2e:	81 a3       	std	Z+33, r24	; 0x21
     e30:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	07 a0       	ldd	r0, Z+39	; 0x27
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <_ZN11SwitchClass10pollSwitchEv+0x3e>
     e3a:	35 95       	asr	r19
     e3c:	27 95       	ror	r18
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <_ZN11SwitchClass10pollSwitchEv+0x3a>
     e42:	21 70       	andi	r18, 0x01	; 1
     e44:	22 8f       	std	Z+26, r18	; 0x1a
     e46:	08 95       	ret

00000e48 <_ZN11SwitchClass16initializeSwitchEhhPS_>:
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	ec 01       	movw	r28, r24
     e56:	f6 2e       	mov	r15, r22
     e58:	e4 2e       	mov	r14, r20
     e5a:	89 01       	movw	r16, r18
     e5c:	1f 86       	std	Y+15, r1	; 0x0f
     e5e:	1e 86       	std	Y+14, r1	; 0x0e
     e60:	1b 8a       	std	Y+19, r1	; 0x13
     e62:	1a 8a       	std	Y+18, r1	; 0x12
     e64:	19 8a       	std	Y+17, r1	; 0x11
     e66:	18 8a       	std	Y+16, r1	; 0x10
     e68:	1d 8a       	std	Y+21, r1	; 0x15
     e6a:	1c 8a       	std	Y+20, r1	; 0x14
     e6c:	1f 8a       	std	Y+23, r1	; 0x17
     e6e:	1e 8a       	std	Y+22, r1	; 0x16
     e70:	19 8e       	std	Y+25, r1	; 0x19
     e72:	18 8e       	std	Y+24, r1	; 0x18
     e74:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN10TimerClass15initializeTimerEv>
     e78:	ef a2       	std	Y+39, r14	; 0x27
     e7a:	f8 a6       	std	Y+40, r15	; 0x28
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	6e 2d       	mov	r22, r14
     e80:	8f 2d       	mov	r24, r15
     e82:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	6f a1       	ldd	r22, Y+39	; 0x27
     e8a:	88 a5       	ldd	r24, Y+40	; 0x28
     e8c:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
     e90:	41 e0       	ldi	r20, 0x01	; 1
     e92:	6e 2d       	mov	r22, r14
     e94:	8f 2d       	mov	r24, r15
     e96:	0e 94 b2 01 	call	0x364	; 0x364 <_Z21setPinChangeInterrupthhb>
     e9a:	88 a5       	ldd	r24, Y+40	; 0x28
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	41 f0       	breq	.+16     	; 0xeb0 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x68>
     ea0:	18 f0       	brcs	.+6      	; 0xea8 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x60>
     ea2:	82 30       	cpi	r24, 0x02	; 2
     ea4:	49 f0       	breq	.+18     	; 0xeb8 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x70>
     ea6:	0b c0       	rjmp	.+22     	; 0xebe <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     ea8:	83 b1       	in	r24, 0x03	; 3
     eaa:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     eae:	07 c0       	rjmp	.+14     	; 0xebe <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     eb0:	86 b1       	in	r24, 0x06	; 6
     eb2:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     eb8:	89 b1       	in	r24, 0x09	; 9
     eba:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     ebe:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
     ec2:	e8 2f       	mov	r30, r24
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	e0 55       	subi	r30, 0x50	; 80
     ecc:	fe 4f       	sbci	r31, 0xFE	; 254
     ece:	11 83       	std	Z+1, r17	; 0x01
     ed0:	00 83       	st	Z, r16
     ed2:	8e a3       	std	Y+38, r24	; 0x26
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <_ZN11SwitchClass1iE>
     eda:	ce 01       	movw	r24, r28
     edc:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN11SwitchClass16updatePinBuffersEv>
     ee0:	ce 01       	movw	r24, r28
     ee2:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN11SwitchClass10pollSwitchEv>
     ee6:	1f 8e       	std	Y+31, r1	; 0x1f
     ee8:	ce 01       	movw	r24, r28
     eea:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN10TimerClass10getTimerIDEv>
     eee:	89 a7       	std	Y+41, r24	; 0x29
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	08 95       	ret

00000efe <_ZN11SwitchClass18processStateChangeEv>:
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
     f04:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN11SwitchClass10pollSwitchEv>
     f08:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f0a:	81 11       	cpse	r24, r1
     f0c:	20 c0       	rjmp	.+64     	; 0xf4e <_ZN11SwitchClass18processStateChangeEv+0x50>
     f0e:	89 a1       	ldd	r24, Y+33	; 0x21
     f10:	88 23       	and	r24, r24
     f12:	09 f4       	brne	.+2      	; 0xf16 <_ZN11SwitchClass18processStateChangeEv+0x18>
     f14:	78 c0       	rjmp	.+240    	; 0x1006 <_ZN11SwitchClass18processStateChangeEv+0x108>
     f16:	8b a1       	ldd	r24, Y+35	; 0x23
     f18:	81 11       	cpse	r24, r1
     f1a:	08 c0       	rjmp	.+16     	; 0xf2c <_ZN11SwitchClass18processStateChangeEv+0x2e>
     f1c:	23 e9       	ldi	r18, 0x93	; 147
     f1e:	38 e0       	ldi	r19, 0x08	; 8
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	6c eb       	ldi	r22, 0xBC	; 188
     f24:	72 e0       	ldi	r23, 0x02	; 2
     f26:	ce 01       	movw	r24, r28
     f28:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	8a a3       	std	Y+34, r24	; 0x22
     f30:	8b a1       	ldd	r24, Y+35	; 0x23
     f32:	88 23       	and	r24, r24
     f34:	41 f0       	breq	.+16     	; 0xf46 <_ZN11SwitchClass18processStateChangeEv+0x48>
     f36:	68 e5       	ldi	r22, 0x58	; 88
     f38:	72 e0       	ldi	r23, 0x02	; 2
     f3a:	ce 01       	movw	r24, r28
     f3c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <_ZN10TimerClass7setTimeEj>
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	8c a3       	std	Y+36, r24	; 0x24
     f44:	1b a2       	std	Y+35, r1	; 0x23
     f46:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f48:	88 23       	and	r24, r24
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_ZN11SwitchClass18processStateChangeEv+0x50>
     f4c:	5c c0       	rjmp	.+184    	; 0x1006 <_ZN11SwitchClass18processStateChangeEv+0x108>
     f4e:	89 a1       	ldd	r24, Y+33	; 0x21
     f50:	81 11       	cpse	r24, r1
     f52:	59 c0       	rjmp	.+178    	; 0x1006 <_ZN11SwitchClass18processStateChangeEv+0x108>
     f54:	8c a1       	ldd	r24, Y+36	; 0x24
     f56:	81 11       	cpse	r24, r1
     f58:	06 c0       	rjmp	.+12     	; 0xf66 <_ZN11SwitchClass18processStateChangeEv+0x68>
     f5a:	ce 01       	movw	r24, r28
     f5c:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN10TimerClass15getCallBackTimeEv>
     f60:	9d a7       	std	Y+45, r25	; 0x2d
     f62:	8c a7       	std	Y+44, r24	; 0x2c
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <_ZN11SwitchClass18processStateChangeEv+0x72>
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_ZN10TimerClass7getTimeEv>
     f6c:	9d a7       	std	Y+45, r25	; 0x2d
     f6e:	8c a7       	std	Y+44, r24	; 0x2c
     f70:	ce 01       	movw	r24, r28
     f72:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN10TimerClass10resetTimerEv>
     f76:	ce 01       	movw	r24, r28
     f78:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN10TimerClass18resetCallbackTimerEv>
     f7c:	1a a2       	std	Y+34, r1	; 0x22
     f7e:	8c a5       	ldd	r24, Y+44	; 0x2c
     f80:	9d a5       	ldd	r25, Y+45	; 0x2d
     f82:	0b 97       	sbiw	r24, 0x0b	; 11
     f84:	8d 34       	cpi	r24, 0x4D	; 77
     f86:	92 40       	sbci	r25, 0x02	; 2
     f88:	98 f5       	brcc	.+102    	; 0xff0 <_ZN11SwitchClass18processStateChangeEv+0xf2>
     f8a:	8c a1       	ldd	r24, Y+36	; 0x24
     f8c:	81 11       	cpse	r24, r1
     f8e:	17 c0       	rjmp	.+46     	; 0xfbe <_ZN11SwitchClass18processStateChangeEv+0xc0>
     f90:	8d a1       	ldd	r24, Y+37	; 0x25
     f92:	81 11       	cpse	r24, r1
     f94:	2f c0       	rjmp	.+94     	; 0xff4 <_ZN11SwitchClass18processStateChangeEv+0xf6>
     f96:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f98:	88 23       	and	r24, r24
     f9a:	59 f0       	breq	.+22     	; 0xfb2 <_ZN11SwitchClass18processStateChangeEv+0xb4>
     f9c:	2b ec       	ldi	r18, 0xCB	; 203
     f9e:	36 e0       	ldi	r19, 0x06	; 6
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	64 e6       	ldi	r22, 0x64	; 100
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	8b a3       	std	Y+35, r24	; 0x23
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <_ZN11SwitchClass18processStateChangeEv+0xba>
     fb2:	ce 01       	movw	r24, r28
     fb4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN11SwitchClass18doubleWaitCompleteEv>
     fb8:	8c a1       	ldd	r24, Y+36	; 0x24
     fba:	88 23       	and	r24, r24
     fbc:	09 f1       	breq	.+66     	; 0x1000 <_ZN11SwitchClass18processStateChangeEv+0x102>
     fbe:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
     fc2:	88 23       	and	r24, r24
     fc4:	61 f0       	breq	.+24     	; 0xfde <_ZN11SwitchClass18processStateChangeEv+0xe0>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     fcc:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <_ZN11SwitchClass17AllDoublePressPtrE>
     fd0:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <_ZN11SwitchClass17AllDoublePressPtrE+0x1>
     fd4:	30 97       	sbiw	r30, 0x00	; 0
     fd6:	61 f0       	breq	.+24     	; 0xff0 <_ZN11SwitchClass18processStateChangeEv+0xf2>
     fd8:	8e a1       	ldd	r24, Y+38	; 0x26
     fda:	09 95       	icall
     fdc:	09 c0       	rjmp	.+18     	; 0xff0 <_ZN11SwitchClass18processStateChangeEv+0xf2>
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     fe4:	ea 89       	ldd	r30, Y+18	; 0x12
     fe6:	fb 89       	ldd	r31, Y+19	; 0x13
     fe8:	30 97       	sbiw	r30, 0x00	; 0
     fea:	11 f0       	breq	.+4      	; 0xff0 <_ZN11SwitchClass18processStateChangeEv+0xf2>
     fec:	8e a1       	ldd	r24, Y+38	; 0x26
     fee:	09 95       	icall
     ff0:	8d a1       	ldd	r24, Y+37	; 0x25
     ff2:	81 11       	cpse	r24, r1
     ff4:	1d a2       	std	Y+37, r1	; 0x25
     ff6:	8c a1       	ldd	r24, Y+36	; 0x24
     ff8:	88 23       	and	r24, r24
     ffa:	29 f0       	breq	.+10     	; 0x1006 <_ZN11SwitchClass18processStateChangeEv+0x108>
     ffc:	1c a2       	std	Y+36, r1	; 0x24
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <_ZN11SwitchClass18processStateChangeEv+0x108>
    1000:	8d a1       	ldd	r24, Y+37	; 0x25
    1002:	81 11       	cpse	r24, r1
    1004:	f7 cf       	rjmp	.-18     	; 0xff4 <_ZN11SwitchClass18processStateChangeEv+0xf6>
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <_ZN11SwitchClass25callAllProcessStateChangeEv>:
    100c:	cf 93       	push	r28
    100e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    1012:	88 23       	and	r24, r24
    1014:	91 f0       	breq	.+36     	; 0x103a <_ZN11SwitchClass25callAllProcessStateChangeEv+0x2e>
    1016:	c0 e0       	ldi	r28, 0x00	; 0
    1018:	ec 2f       	mov	r30, r28
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ee 0f       	add	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	e0 55       	subi	r30, 0x50	; 80
    1022:	fe 4f       	sbci	r31, 0xFE	; 254
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	11 f0       	breq	.+4      	; 0x1030 <_ZN11SwitchClass25callAllProcessStateChangeEv+0x24>
    102c:	0e 94 7f 07 	call	0xefe	; 0xefe <_ZN11SwitchClass18processStateChangeEv>
    1030:	cf 5f       	subi	r28, 0xFF	; 255
    1032:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    1036:	c8 17       	cp	r28, r24
    1038:	78 f3       	brcs	.-34     	; 0x1018 <_ZN11SwitchClass25callAllProcessStateChangeEv+0xc>
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <_ZN11SwitchClass16longWaitCompleteEv>:
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	ec 01       	movw	r28, r24
    1044:	18 a2       	std	Y+32, r1	; 0x20
    1046:	1b a2       	std	Y+35, r1	; 0x23
    1048:	1c a2       	std	Y+36, r1	; 0x24
    104a:	8d a1       	ldd	r24, Y+37	; 0x25
    104c:	88 23       	and	r24, r24
    104e:	89 f1       	breq	.+98     	; 0x10b2 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1050:	ce 01       	movw	r24, r28
    1052:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN11SwitchClass16updatePinBuffersEv>
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN11SwitchClass10pollSwitchEv>
    105c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    105e:	81 11       	cpse	r24, r1
    1060:	28 c0       	rjmp	.+80     	; 0x10b2 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1062:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1064:	81 11       	cpse	r24, r1
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <_ZN11SwitchClass16longWaitCompleteEv+0x32>
    1068:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN11SwitchClass20AllContinuousLong_ENE>
    106c:	88 23       	and	r24, r24
    106e:	09 f1       	breq	.+66     	; 0x10b2 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1070:	23 e9       	ldi	r18, 0x93	; 147
    1072:	38 e0       	ldi	r19, 0x08	; 8
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	66 e4       	ldi	r22, 0x46	; 70
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	ce 01       	movw	r24, r28
    107c:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    1080:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
    1084:	88 23       	and	r24, r24
    1086:	61 f0       	breq	.+24     	; 0x10a0 <_ZN11SwitchClass16longWaitCompleteEv+0x62>
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    108e:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <_ZN11SwitchClass25AllContinuousLongPressPtrE>
    1092:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <_ZN11SwitchClass25AllContinuousLongPressPtrE+0x1>
    1096:	30 97       	sbiw	r30, 0x00	; 0
    1098:	61 f0       	breq	.+24     	; 0x10b2 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    109a:	8e a1       	ldd	r24, Y+38	; 0x26
    109c:	09 95       	icall
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    10a6:	ec 89       	ldd	r30, Y+20	; 0x14
    10a8:	fd 89       	ldd	r31, Y+21	; 0x15
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	11 f0       	breq	.+4      	; 0x10b2 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10ae:	8e a1       	ldd	r24, Y+38	; 0x26
    10b0:	09 95       	icall
    10b2:	8a a1       	ldd	r24, Y+34	; 0x22
    10b4:	88 23       	and	r24, r24
    10b6:	a1 f1       	breq	.+104    	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    10b8:	ce 01       	movw	r24, r28
    10ba:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN11SwitchClass16updatePinBuffersEv>
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN11SwitchClass10pollSwitchEv>
    10c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10c6:	81 11       	cpse	r24, r1
    10c8:	2b c0       	rjmp	.+86     	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    10ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10cc:	81 11       	cpse	r24, r1
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <_ZN11SwitchClass16longWaitCompleteEv+0x9a>
    10d0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN11SwitchClass10AllLong_ENE>
    10d4:	88 23       	and	r24, r24
    10d6:	21 f1       	breq	.+72     	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    10d8:	1a a2       	std	Y+34, r1	; 0x22
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	8d a3       	std	Y+37, r24	; 0x25
    10de:	23 e9       	ldi	r18, 0x93	; 147
    10e0:	38 e0       	ldi	r19, 0x08	; 8
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	62 e3       	ldi	r22, 0x32	; 50
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	ce 01       	movw	r24, r28
    10ea:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    10ee:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
    10f2:	88 23       	and	r24, r24
    10f4:	61 f0       	breq	.+24     	; 0x110e <_ZN11SwitchClass16longWaitCompleteEv+0xd0>
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    10fc:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <_ZN11SwitchClass15AllLongPressPtrE>
    1100:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <_ZN11SwitchClass15AllLongPressPtrE+0x1>
    1104:	30 97       	sbiw	r30, 0x00	; 0
    1106:	61 f0       	breq	.+24     	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1108:	8e a1       	ldd	r24, Y+38	; 0x26
    110a:	09 95       	icall
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1114:	e8 89       	ldd	r30, Y+16	; 0x10
    1116:	f9 89       	ldd	r31, Y+17	; 0x11
    1118:	30 97       	sbiw	r30, 0x00	; 0
    111a:	11 f0       	breq	.+4      	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    111c:	8e a1       	ldd	r24, Y+38	; 0x26
    111e:	09 95       	icall
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <_ZN11SwitchClass20callAllOjectLongWaitEh>:
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    112e:	99 23       	and	r25, r25
    1130:	c1 f0       	breq	.+48     	; 0x1162 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x3c>
    1132:	d8 2f       	mov	r29, r24
    1134:	c0 e0       	ldi	r28, 0x00	; 0
    1136:	ec 2f       	mov	r30, r28
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	e0 55       	subi	r30, 0x50	; 80
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	01 90       	ld	r0, Z+
    1144:	f0 81       	ld	r31, Z
    1146:	e0 2d       	mov	r30, r0
    1148:	91 a5       	ldd	r25, Z+41	; 0x29
    114a:	9d 13       	cpse	r25, r29
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    114e:	30 97       	sbiw	r30, 0x00	; 0
    1150:	19 f0       	breq	.+6      	; 0x1158 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    1152:	cf 01       	movw	r24, r30
    1154:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN11SwitchClass16longWaitCompleteEv>
    1158:	cf 5f       	subi	r28, 0xFF	; 255
    115a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    115e:	c9 17       	cp	r28, r25
    1160:	50 f3       	brcs	.-44     	; 0x1136 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x10>
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	08 95       	ret

00001168 <__vector_1>:
}

ISR(INT0_vect){
    1168:	1f 92       	push	r1
    116a:	0f 92       	push	r0
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	0f 92       	push	r0
    1170:	11 24       	eor	r1, r1
    1172:	2f 93       	push	r18
    1174:	3f 93       	push	r19
    1176:	4f 93       	push	r20
    1178:	5f 93       	push	r21
    117a:	6f 93       	push	r22
    117c:	7f 93       	push	r23
    117e:	8f 93       	push	r24
    1180:	9f 93       	push	r25
    1182:	af 93       	push	r26
    1184:	bf 93       	push	r27
    1186:	ef 93       	push	r30
    1188:	ff 93       	push	r31
	Switch.PinBuffer[0] = PINB;
    118a:	83 b1       	in	r24, 0x03	; 3
    118c:	eb ea       	ldi	r30, 0xAB	; 171
    118e:	f1 e0       	ldi	r31, 0x01	; 1
    1190:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1192:	86 b1       	in	r24, 0x06	; 6
    1194:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1196:	89 b1       	in	r24, 0x09	; 9
    1198:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    119a:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    11a4:	0e 94 06 08 	call	0x100c	; 0x100c <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    11a8:	ff 91       	pop	r31
    11aa:	ef 91       	pop	r30
    11ac:	bf 91       	pop	r27
    11ae:	af 91       	pop	r26
    11b0:	9f 91       	pop	r25
    11b2:	8f 91       	pop	r24
    11b4:	7f 91       	pop	r23
    11b6:	6f 91       	pop	r22
    11b8:	5f 91       	pop	r21
    11ba:	4f 91       	pop	r20
    11bc:	3f 91       	pop	r19
    11be:	2f 91       	pop	r18
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <__vector_2>:

ISR(INT1_vect){
    11ca:	1f 92       	push	r1
    11cc:	0f 92       	push	r0
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	0f 92       	push	r0
    11d2:	11 24       	eor	r1, r1
    11d4:	2f 93       	push	r18
    11d6:	3f 93       	push	r19
    11d8:	4f 93       	push	r20
    11da:	5f 93       	push	r21
    11dc:	6f 93       	push	r22
    11de:	7f 93       	push	r23
    11e0:	8f 93       	push	r24
    11e2:	9f 93       	push	r25
    11e4:	af 93       	push	r26
    11e6:	bf 93       	push	r27
    11e8:	ef 93       	push	r30
    11ea:	ff 93       	push	r31
	wakeUp();
    11ec:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    11f6:	0e 94 06 08 	call	0x100c	; 0x100c <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    11fa:	ff 91       	pop	r31
    11fc:	ef 91       	pop	r30
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	7f 91       	pop	r23
    1208:	6f 91       	pop	r22
    120a:	5f 91       	pop	r21
    120c:	4f 91       	pop	r20
    120e:	3f 91       	pop	r19
    1210:	2f 91       	pop	r18
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	0f 90       	pop	r0
    1218:	1f 90       	pop	r1
    121a:	18 95       	reti

0000121c <__vector_3>:

ISR(PCINT0_vect){
    121c:	1f 92       	push	r1
    121e:	0f 92       	push	r0
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	0f 92       	push	r0
    1224:	11 24       	eor	r1, r1
    1226:	2f 93       	push	r18
    1228:	3f 93       	push	r19
    122a:	4f 93       	push	r20
    122c:	5f 93       	push	r21
    122e:	6f 93       	push	r22
    1230:	7f 93       	push	r23
    1232:	8f 93       	push	r24
    1234:	9f 93       	push	r25
    1236:	af 93       	push	r26
    1238:	bf 93       	push	r27
    123a:	ef 93       	push	r30
    123c:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_B);
	Switch.PinBuffer[0] = PINB;
    123e:	83 b1       	in	r24, 0x03	; 3
    1240:	eb ea       	ldi	r30, 0xAB	; 171
    1242:	f1 e0       	ldi	r31, 0x01	; 1
    1244:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1246:	86 b1       	in	r24, 0x06	; 6
    1248:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    124a:	89 b1       	in	r24, 0x09	; 9
    124c:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    124e:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1258:	0e 94 06 08 	call	0x100c	; 0x100c <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    125c:	ff 91       	pop	r31
    125e:	ef 91       	pop	r30
    1260:	bf 91       	pop	r27
    1262:	af 91       	pop	r26
    1264:	9f 91       	pop	r25
    1266:	8f 91       	pop	r24
    1268:	7f 91       	pop	r23
    126a:	6f 91       	pop	r22
    126c:	5f 91       	pop	r21
    126e:	4f 91       	pop	r20
    1270:	3f 91       	pop	r19
    1272:	2f 91       	pop	r18
    1274:	0f 90       	pop	r0
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	0f 90       	pop	r0
    127a:	1f 90       	pop	r1
    127c:	18 95       	reti

0000127e <__vector_4>:

ISR(PCINT1_vect){
    127e:	1f 92       	push	r1
    1280:	0f 92       	push	r0
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	0f 92       	push	r0
    1286:	11 24       	eor	r1, r1
    1288:	2f 93       	push	r18
    128a:	3f 93       	push	r19
    128c:	4f 93       	push	r20
    128e:	5f 93       	push	r21
    1290:	6f 93       	push	r22
    1292:	7f 93       	push	r23
    1294:	8f 93       	push	r24
    1296:	9f 93       	push	r25
    1298:	af 93       	push	r26
    129a:	bf 93       	push	r27
    129c:	ef 93       	push	r30
    129e:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_C);
	Switch.PinBuffer[0] = PINB;
    12a0:	83 b1       	in	r24, 0x03	; 3
    12a2:	eb ea       	ldi	r30, 0xAB	; 171
    12a4:	f1 e0       	ldi	r31, 0x01	; 1
    12a6:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    12a8:	86 b1       	in	r24, 0x06	; 6
    12aa:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    12ac:	89 b1       	in	r24, 0x09	; 9
    12ae:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    12b0:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    12ba:	0e 94 06 08 	call	0x100c	; 0x100c <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
	Switch.pinStateChanged();
}
    12be:	ff 91       	pop	r31
    12c0:	ef 91       	pop	r30
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	7f 91       	pop	r23
    12cc:	6f 91       	pop	r22
    12ce:	5f 91       	pop	r21
    12d0:	4f 91       	pop	r20
    12d2:	3f 91       	pop	r19
    12d4:	2f 91       	pop	r18
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <__vector_5>:

ISR(PCINT2_vect){
    12e0:	1f 92       	push	r1
    12e2:	0f 92       	push	r0
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	2f 93       	push	r18
    12ec:	3f 93       	push	r19
    12ee:	4f 93       	push	r20
    12f0:	5f 93       	push	r21
    12f2:	6f 93       	push	r22
    12f4:	7f 93       	push	r23
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	af 93       	push	r26
    12fc:	bf 93       	push	r27
    12fe:	ef 93       	push	r30
    1300:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_D);
	Switch.PinBuffer[0] = PINB;
    1302:	83 b1       	in	r24, 0x03	; 3
    1304:	eb ea       	ldi	r30, 0xAB	; 171
    1306:	f1 e0       	ldi	r31, 0x01	; 1
    1308:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    130a:	86 b1       	in	r24, 0x06	; 6
    130c:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    130e:	89 b1       	in	r24, 0x09	; 9
    1310:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1312:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    131c:	0e 94 06 08 	call	0x100c	; 0x100c <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    1320:	ff 91       	pop	r31
    1322:	ef 91       	pop	r30
    1324:	bf 91       	pop	r27
    1326:	af 91       	pop	r26
    1328:	9f 91       	pop	r25
    132a:	8f 91       	pop	r24
    132c:	7f 91       	pop	r23
    132e:	6f 91       	pop	r22
    1330:	5f 91       	pop	r21
    1332:	4f 91       	pop	r20
    1334:	3f 91       	pop	r19
    1336:	2f 91       	pop	r18
    1338:	0f 90       	pop	r0
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	0f 90       	pop	r0
    133e:	1f 90       	pop	r1
    1340:	18 95       	reti

00001342 <_ZN10TimerClass5beginEv>:
}


uint64_t TimerClass::millis(){
	return Time;
}
    1342:	60 e8       	ldi	r22, 0x80	; 128
    1344:	7e e3       	ldi	r23, 0x3E	; 62
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	0e 94 01 01 	call	0x202	; 0x202 <_Z11Init_CTC_T1hj>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <_ZN10TimerClass1iE>
    1352:	08 95       	ret

00001354 <_ZN10TimerClass15initializeTimerEv>:
    1354:	dc 01       	movw	r26, r24
    1356:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <_ZN10TimerClass1iE>
    135a:	e9 2f       	mov	r30, r25
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	ee 0f       	add	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	eb 53       	subi	r30, 0x3B	; 59
    1364:	fe 4f       	sbci	r31, 0xFE	; 254
    1366:	b1 83       	std	Z+1, r27	; 0x01
    1368:	a0 83       	st	Z, r26
    136a:	15 96       	adiw	r26, 0x05	; 5
    136c:	9c 93       	st	X, r25
    136e:	9f 5f       	subi	r25, 0xFF	; 255
    1370:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <_ZN10TimerClass1iE>
    1374:	08 95       	ret

00001376 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>:
    1376:	fc 01       	movw	r30, r24
    1378:	71 83       	std	Z+1, r23	; 0x01
    137a:	60 83       	st	Z, r22
    137c:	73 83       	std	Z+3, r23	; 0x03
    137e:	62 83       	std	Z+2, r22	; 0x02
    1380:	35 87       	std	Z+13, r19	; 0x0d
    1382:	24 87       	std	Z+12, r18	; 0x0c
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	83 87       	std	Z+11, r24	; 0x0b
    1388:	44 83       	std	Z+4, r20	; 0x04
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1390:	08 95       	ret

00001392 <_ZN10TimerClass18resetCallbackTimerEv>:
    1392:	fc 01       	movw	r30, r24
    1394:	13 86       	std	Z+11, r1	; 0x0b
    1396:	11 82       	std	Z+1, r1	; 0x01
    1398:	10 82       	st	Z, r1
    139a:	08 95       	ret

0000139c <_ZN10TimerClass15getCallBackTimeEv>:
    139c:	fc 01       	movw	r30, r24
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	20 81       	ld	r18, Z
    13a4:	31 81       	ldd	r19, Z+1	; 0x01
    13a6:	82 1b       	sub	r24, r18
    13a8:	93 0b       	sbc	r25, r19
    13aa:	08 95       	ret

000013ac <_ZN10TimerClass7setTimeEj>:
    13ac:	fc 01       	movw	r30, r24
    13ae:	77 83       	std	Z+7, r23	; 0x07
    13b0:	66 83       	std	Z+6, r22	; 0x06
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	82 87       	std	Z+10, r24	; 0x0a
    13b6:	71 87       	std	Z+9, r23	; 0x09
    13b8:	60 87       	std	Z+8, r22	; 0x08
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    13c0:	08 95       	ret

000013c2 <_ZN10TimerClass7getTimeEv>:
    13c2:	fc 01       	movw	r30, r24
    13c4:	80 85       	ldd	r24, Z+8	; 0x08
    13c6:	91 85       	ldd	r25, Z+9	; 0x09
    13c8:	26 81       	ldd	r18, Z+6	; 0x06
    13ca:	37 81       	ldd	r19, Z+7	; 0x07
    13cc:	82 1b       	sub	r24, r18
    13ce:	93 0b       	sbc	r25, r19
    13d0:	08 95       	ret

000013d2 <_ZN10TimerClass10resetTimerEv>:
    13d2:	fc 01       	movw	r30, r24
    13d4:	17 82       	std	Z+7, r1	; 0x07
    13d6:	16 82       	std	Z+6, r1	; 0x06
    13d8:	12 86       	std	Z+10, r1	; 0x0a
    13da:	08 95       	ret

000013dc <_ZN10TimerClass11milliPassedEv>:

void TimerClass::milliPassed(){
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	ec 01       	movw	r28, r24
	if(Count_EN){
    13e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13e4:	88 23       	and	r24, r24
    13e6:	e1 f0       	breq	.+56     	; 0x1420 <_ZN10TimerClass11milliPassedEv+0x44>
		#ifdef DEBUG_TIMER
		//printChar('T');
		#endif
		if(Count)
    13e8:	88 81       	ld	r24, Y
    13ea:	99 81       	ldd	r25, Y+1	; 0x01
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	29 f0       	breq	.+10     	; 0x13fa <_ZN10TimerClass11milliPassedEv+0x1e>
		Count -= 1;
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	99 83       	std	Y+1, r25	; 0x01
    13f4:	88 83       	st	Y, r24
		if(!Count){
    13f6:	89 2b       	or	r24, r25
    13f8:	99 f4       	brne	.+38     	; 0x1420 <_ZN10TimerClass11milliPassedEv+0x44>
			if(Mode == TIMER_MODE_REPEAT){
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	29 f4       	brne	.+10     	; 0x140a <_ZN10TimerClass11milliPassedEv+0x2e>
				Count = Count_Save;
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	9b 81       	ldd	r25, Y+3	; 0x03
    1404:	99 83       	std	Y+1, r25	; 0x01
    1406:	88 83       	st	Y, r24
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <_ZN10TimerClass11milliPassedEv+0x38>
			}
			if(Mode == TIMER_MODE_ONCE){
    140a:	81 11       	cpse	r24, r1
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <_ZN10TimerClass11milliPassedEv+0x38>
				Count_EN = 0;
    140e:	1b 86       	std	Y+11, r1	; 0x0b
				Count = 0;
    1410:	19 82       	std	Y+1, r1	; 0x01
    1412:	18 82       	st	Y, r1
			}
			if(CallBackPtr != NULL){
    1414:	ec 85       	ldd	r30, Y+12	; 0x0c
    1416:	fd 85       	ldd	r31, Y+13	; 0x0d
    1418:	30 97       	sbiw	r30, 0x00	; 0
    141a:	11 f0       	breq	.+4      	; 0x1420 <_ZN10TimerClass11milliPassedEv+0x44>
				#ifdef DEBUG_TIMER
				printStringCRNL("Timer Done : ");
				printNumber(Timer_ID);
				#endif
				//allowSleep(1);
				CallBackPtr(Timer_ID);
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	09 95       	icall
			}
		}
	}
	if(NCount_EN){
    1420:	8a 85       	ldd	r24, Y+10	; 0x0a
    1422:	88 23       	and	r24, r24
    1424:	51 f0       	breq	.+20     	; 0x143a <_ZN10TimerClass11milliPassedEv+0x5e>
		if(NCount)
    1426:	8e 81       	ldd	r24, Y+6	; 0x06
    1428:	9f 81       	ldd	r25, Y+7	; 0x07
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	29 f0       	breq	.+10     	; 0x1438 <_ZN10TimerClass11milliPassedEv+0x5c>
		NCount -= 1;
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	9f 83       	std	Y+7, r25	; 0x07
    1432:	8e 83       	std	Y+6, r24	; 0x06
		if(!NCount){
    1434:	89 2b       	or	r24, r25
    1436:	09 f4       	brne	.+2      	; 0x143a <_ZN10TimerClass11milliPassedEv+0x5e>
			NCount_EN = 0;
    1438:	1a 86       	std	Y+10, r1	; 0x0a
		}
	}
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <_ZN10TimerClass19callAllTimerObjectsEv>:

void TimerClass::callAllTimerObjects(){
    1440:	cf 93       	push	r28
	for(uint8_t a = 0; a < i; a += 1){
    1442:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZN10TimerClass1iE>
    1446:	88 23       	and	r24, r24
    1448:	91 f0       	breq	.+36     	; 0x146e <_ZN10TimerClass19callAllTimerObjectsEv+0x2e>
    144a:	c0 e0       	ldi	r28, 0x00	; 0
		if(Timers[a] != NULL)
    144c:	ec 2f       	mov	r30, r28
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	ee 0f       	add	r30, r30
    1452:	ff 1f       	adc	r31, r31
    1454:	eb 53       	subi	r30, 0x3B	; 59
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	11 f0       	breq	.+4      	; 0x1464 <_ZN10TimerClass19callAllTimerObjectsEv+0x24>
		Timers[a]->milliPassed();
    1460:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN10TimerClass11milliPassedEv>
		}
	}
}

void TimerClass::callAllTimerObjects(){
	for(uint8_t a = 0; a < i; a += 1){
    1464:	cf 5f       	subi	r28, 0xFF	; 255
    1466:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZN10TimerClass1iE>
    146a:	c8 17       	cp	r28, r24
    146c:	78 f3       	brcs	.-34     	; 0x144c <_ZN10TimerClass19callAllTimerObjectsEv+0xc>
		if(Timers[a] != NULL)
		Timers[a]->milliPassed();
	}
}
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <_ZN10TimerClass10getTimerIDEv>:

uint8_t TimerClass::getTimerID(){
	return Timer_ID;
}
    1472:	fc 01       	movw	r30, r24
    1474:	85 81       	ldd	r24, Z+5	; 0x05
    1476:	08 95       	ret

00001478 <__vector_11>:



ISR(TIMER1_COMPA_vect){
    1478:	1f 92       	push	r1
    147a:	0f 92       	push	r0
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	0f 92       	push	r0
    1480:	11 24       	eor	r1, r1
    1482:	2f 93       	push	r18
    1484:	3f 93       	push	r19
    1486:	4f 93       	push	r20
    1488:	5f 93       	push	r21
    148a:	6f 93       	push	r22
    148c:	7f 93       	push	r23
    148e:	8f 93       	push	r24
    1490:	9f 93       	push	r25
    1492:	af 93       	push	r26
    1494:	bf 93       	push	r27
    1496:	ef 93       	push	r30
    1498:	ff 93       	push	r31
	//printChar('I');
	milliHappened();
    149a:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z13milliHappenedv>
	Timer.Time += 1;
    149e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <_ZN10TimerClass4TimeE>
    14a2:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <_ZN10TimerClass4TimeE+0x1>
    14a6:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <_ZN10TimerClass4TimeE+0x2>
    14aa:	50 91 c0 01 	lds	r21, 0x01C0	; 0x8001c0 <_ZN10TimerClass4TimeE+0x3>
    14ae:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <_ZN10TimerClass4TimeE+0x4>
    14b2:	70 91 c2 01 	lds	r23, 0x01C2	; 0x8001c2 <_ZN10TimerClass4TimeE+0x5>
    14b6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <_ZN10TimerClass4TimeE+0x6>
    14ba:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <_ZN10TimerClass4TimeE+0x7>
    14be:	a1 e0       	ldi	r26, 0x01	; 1
    14c0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__adddi3_s8>
    14c4:	20 93 bd 01 	sts	0x01BD, r18	; 0x8001bd <_ZN10TimerClass4TimeE>
    14c8:	30 93 be 01 	sts	0x01BE, r19	; 0x8001be <_ZN10TimerClass4TimeE+0x1>
    14cc:	40 93 bf 01 	sts	0x01BF, r20	; 0x8001bf <_ZN10TimerClass4TimeE+0x2>
    14d0:	50 93 c0 01 	sts	0x01C0, r21	; 0x8001c0 <_ZN10TimerClass4TimeE+0x3>
    14d4:	60 93 c1 01 	sts	0x01C1, r22	; 0x8001c1 <_ZN10TimerClass4TimeE+0x4>
    14d8:	70 93 c2 01 	sts	0x01C2, r23	; 0x8001c2 <_ZN10TimerClass4TimeE+0x5>
    14dc:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <_ZN10TimerClass4TimeE+0x6>
    14e0:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <_ZN10TimerClass4TimeE+0x7>
	Timer.callAllTimerObjects();
    14e4:	0e 94 20 0a 	call	0x1440	; 0x1440 <_ZN10TimerClass19callAllTimerObjectsEv>
	//printChar('O');
}
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <_Z13switchPressedh>:
void portStateChange(uint8_t PortNo){
	printStringCRNL("Pin state changed");
	if(PortNo == PORT_C){
		setPinState(PORT_C, 2, getPinState(PORT_C, 0));
	}
}
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <SwitchFlag>
    1510:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <SwitchID>
    1514:	08 95       	ret

00001516 <_Z9timerDoneh>:
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <Timer1_Flag>
    151c:	43 99       	sbic	0x08, 3	; 8
    151e:	43 98       	cbi	0x08, 3	; 8
    1520:	08 95       	ret

00001522 <_Z14setSocketStatehb>:
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	79 f0       	breq	.+30     	; 0x1544 <_Z14setSocketStatehb+0x22>
    1526:	18 f4       	brcc	.+6      	; 0x152e <_Z14setSocketStatehb+0xc>
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	31 f0       	breq	.+12     	; 0x1538 <_Z14setSocketStatehb+0x16>
    152c:	08 95       	ret
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	79 f0       	breq	.+30     	; 0x1550 <_Z14setSocketStatehb+0x2e>
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	99 f0       	breq	.+38     	; 0x155c <_Z14setSocketStatehb+0x3a>
    1536:	08 95       	ret
    1538:	46 2f       	mov	r20, r22
    153a:	63 e0       	ldi	r22, 0x03	; 3
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    1542:	08 95       	ret
    1544:	46 2f       	mov	r20, r22
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    154e:	08 95       	ret
    1550:	46 2f       	mov	r20, r22
    1552:	65 e0       	ldi	r22, 0x05	; 5
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    155a:	08 95       	ret
    155c:	46 2f       	mov	r20, r22
    155e:	64 e0       	ldi	r22, 0x04	; 4
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    1566:	08 95       	ret

00001568 <_Z14getSocketStateh>:
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	71 f0       	breq	.+28     	; 0x1588 <_Z14getSocketStateh+0x20>
    156c:	18 f4       	brcc	.+6      	; 0x1574 <_Z14getSocketStateh+0xc>
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	31 f0       	breq	.+12     	; 0x157e <_Z14getSocketStateh+0x16>
    1572:	19 c0       	rjmp	.+50     	; 0x15a6 <_Z14getSocketStateh+0x3e>
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	69 f0       	breq	.+26     	; 0x1592 <_Z14getSocketStateh+0x2a>
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	81 f0       	breq	.+32     	; 0x159c <_Z14getSocketStateh+0x34>
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <_Z14getSocketStateh+0x3e>
    157e:	63 e0       	ldi	r22, 0x03	; 3
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z11getPinStatehh>
    1586:	08 95       	ret
    1588:	62 e0       	ldi	r22, 0x02	; 2
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z11getPinStatehh>
    1590:	08 95       	ret
    1592:	65 e0       	ldi	r22, 0x05	; 5
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z11getPinStatehh>
    159a:	08 95       	ret
    159c:	64 e0       	ldi	r22, 0x04	; 4
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z11getPinStatehh>
    15a4:	08 95       	ret
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	08 95       	ret

000015aa <_Z8runSetupv>:

void runSetup(){
	
	USART_Init(MYUBRR);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 0c 02 	call	0x418	; 0x418 <_Z10USART_Initj>
	Init_CTC_T1(2,2000);
    15b2:	60 ed       	ldi	r22, 0xD0	; 208
    15b4:	77 e0       	ldi	r23, 0x07	; 7
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	0e 94 01 01 	call	0x202	; 0x202 <_Z11Init_CTC_T1hj>
	setPinDirection(PORT_C, 2, OUTPUT);
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	62 e0       	ldi	r22, 0x02	; 2
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_C, 3, OUTPUT);
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	63 e0       	ldi	r22, 0x03	; 3
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 2, OUTPUT);
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	62 e0       	ldi	r22, 0x02	; 2
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 3, OUTPUT);
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	63 e0       	ldi	r22, 0x03	; 3
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 4, OUTPUT);
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	64 e0       	ldi	r22, 0x04	; 4
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 5, OUTPUT);
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	65 e0       	ldi	r22, 0x05	; 5
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinState(PORT_D, 2, LOW);
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	62 e0       	ldi	r22, 0x02	; 2
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_D, 3, LOW);
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	63 e0       	ldi	r22, 0x03	; 3
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_D, 4, LOW);
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	64 e0       	ldi	r22, 0x04	; 4
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_D, 5, LOW);
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	65 e0       	ldi	r22, 0x05	; 5
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_C, 2, LOW);
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	62 e0       	ldi	r22, 0x02	; 2
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinDirection(PORT_C, 0, INPUT);
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	SPI_MasterInit();
    1634:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
    1638:	08 95       	ret

0000163a <main>:
volatile bool newSPIData, Timer1_Flag, SwitchFlag = false;
uint8_t Socket, State, Payload, StateAll;
TimerClass Timer1;
SwitchClass S1, S2, S3, S4;
int main(void)
{
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	29 97       	sbiw	r28, 0x09	; 9
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    runSetup();
    164e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_Z8runSetupv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1652:	2f ef       	ldi	r18, 0xFF	; 255
    1654:	89 e6       	ldi	r24, 0x69	; 105
    1656:	98 e1       	ldi	r25, 0x18	; 24
    1658:	21 50       	subi	r18, 0x01	; 1
    165a:	80 40       	sbci	r24, 0x00	; 0
    165c:	90 40       	sbci	r25, 0x00	; 0
    165e:	e1 f7       	brne	.-8      	; 0x1658 <main+0x1e>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <main+0x28>
    1662:	00 00       	nop
	_delay_ms(500);
	Notify(PSTR("Powering on..."));
    1664:	8d e4       	ldi	r24, 0x4D	; 77
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
	NRF24L01 Radio(1,1,1);
    166c:	21 e0       	ldi	r18, 0x01	; 1
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	ce 01       	movw	r24, r28
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	0e 94 2e 06 	call	0xc5c	; 0xc5c <_ZN8NRF24L01C1Ehhb>
	Radio.powerON(true);
    167a:	61 e0       	ldi	r22, 0x01	; 1
    167c:	ce 01       	movw	r24, r28
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_ZN8NRF24L017powerONEb>
	initSPISlave();
    1684:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z12initSPISlavev>
	enableSPIInterrupt(true);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18enableSPIInterruptb>
	sei();
    168e:	78 94       	sei
	Timer1.begin();
    1690:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN10TimerClass5beginEv>
	Timer1.initializeTimer();
    1694:	89 eb       	ldi	r24, 0xB9	; 185
    1696:	92 e0       	ldi	r25, 0x02	; 2
    1698:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN10TimerClass15initializeTimerEv>
	Timer1.setCallBackTime(100, 0, timerDone);
    169c:	2b e8       	ldi	r18, 0x8B	; 139
    169e:	3a e0       	ldi	r19, 0x0A	; 10
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	64 e6       	ldi	r22, 0x64	; 100
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	89 eb       	ldi	r24, 0xB9	; 185
    16a8:	92 e0       	ldi	r25, 0x02	; 2
    16aa:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
	S1.begin();
    16ae:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN11SwitchClass5beginEv>
	S1.initializeSwitch(PORT_D, 6, &S1);
    16b2:	2b e8       	ldi	r18, 0x8B	; 139
    16b4:	32 e0       	ldi	r19, 0x02	; 2
    16b6:	46 e0       	ldi	r20, 0x06	; 6
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	c9 01       	movw	r24, r18
    16bc:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S2.initializeSwitch(PORT_D, 7, &S2);
    16c0:	2d e5       	ldi	r18, 0x5D	; 93
    16c2:	32 e0       	ldi	r19, 0x02	; 2
    16c4:	47 e0       	ldi	r20, 0x07	; 7
    16c6:	62 e0       	ldi	r22, 0x02	; 2
    16c8:	c9 01       	movw	r24, r18
    16ca:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S3.initializeSwitch(PORT_B, 0, &S3);
    16ce:	2f e2       	ldi	r18, 0x2F	; 47
    16d0:	32 e0       	ldi	r19, 0x02	; 2
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	c9 01       	movw	r24, r18
    16d8:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S4.initializeSwitch(PORT_B, 1, &S4);
    16dc:	21 e0       	ldi	r18, 0x01	; 1
    16de:	32 e0       	ldi	r19, 0x02	; 2
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	c9 01       	movw	r24, r18
    16e6:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S1.shortPress(switchPressed);
    16ea:	65 e8       	ldi	r22, 0x85	; 133
    16ec:	7a e0       	ldi	r23, 0x0A	; 10
    16ee:	8b e8       	ldi	r24, 0x8B	; 139
    16f0:	92 e0       	ldi	r25, 0x02	; 2
    16f2:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN11SwitchClass10shortPressEPFvhE>
	S1.enableSamePtrMode(true);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN11SwitchClass17enableSamePtrModeEb>
	Notify(PSTR("Done"));
    16fc:	88 e4       	ldi	r24, 0x48	; 72
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
    while (1) 
    {
		if(newSPIData)	{
    1704:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <newSPIData>
    1708:	88 23       	and	r24, r24
    170a:	09 f4       	brne	.+2      	; 0x170e <main+0xd4>
    170c:	83 c0       	rjmp	.+262    	; 0x1814 <main+0x1da>
			newSPIData = false;
    170e:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <newSPIData>
			if(SPIdata != 0xAA){
    1712:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SPIdata>
    1716:	8a 3a       	cpi	r24, 0xAA	; 170
    1718:	a1 f1       	breq	.+104    	; 0x1782 <main+0x148>
				Socket = SPIdata & 0xF0;
    171a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SPIdata>
    171e:	80 7f       	andi	r24, 0xF0	; 240
				Socket = Socket >> 4;
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	95 95       	asr	r25
    1724:	87 95       	ror	r24
    1726:	95 95       	asr	r25
    1728:	87 95       	ror	r24
    172a:	95 95       	asr	r25
    172c:	87 95       	ror	r24
    172e:	95 95       	asr	r25
    1730:	87 95       	ror	r24
    1732:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <Socket>
				State = SPIdata & 0x0F;
    1736:	20 91 ce 02 	lds	r18, 0x02CE	; 0x8002ce <SPIdata>
    173a:	2f 70       	andi	r18, 0x0F	; 15
    173c:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <State>
				setSocketState(Socket, State);
    1740:	61 e0       	ldi	r22, 0x01	; 1
    1742:	21 11       	cpse	r18, r1
    1744:	01 c0       	rjmp	.+2      	; 0x1748 <main+0x10e>
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14setSocketStatehb>
				BEEP = 1;
    174c:	43 9a       	sbi	0x08, 3	; 8
				Timer1.setCallBackTime(BEEP_TIME, 0, timerDone);
    174e:	2b e8       	ldi	r18, 0x8B	; 139
    1750:	3a e0       	ldi	r19, 0x0A	; 10
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	6e e1       	ldi	r22, 0x1E	; 30
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	89 eb       	ldi	r24, 0xB9	; 185
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
				printStringCRNL("Command received: ");
    1760:	82 e1       	ldi	r24, 0x12	; 18
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	0e 94 44 03 	call	0x688	; 0x688 <_Z15printStringCRNLPKc>
				printHexNumber(SPIdata, 1);
    1768:	20 91 ce 02 	lds	r18, 0x02CE	; 0x8002ce <SPIdata>
    176c:	01 e0       	ldi	r16, 0x01	; 1
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 99 03 	call	0x732	; 0x732 <_Z14printHexNumberyh>
    1780:	42 c0       	rjmp	.+132    	; 0x1806 <main+0x1cc>
			}
			else{
				enableSPIInterrupt(false);
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18enableSPIInterruptb>
				enableSPI(false);
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9enableSPIb>
				SPI_MasterInit();
    178e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
				if(!Radio.isRXEmpty()){
    1792:	ce 01       	movw	r24, r28
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN8NRF24L019isRXEmptyEv>
    179a:	81 11       	cpse	r24, r1
    179c:	2c c0       	rjmp	.+88     	; 0x17f6 <main+0x1bc>
					Radio.readFIFO(&Payload);
    179e:	67 ec       	ldi	r22, 0xC7	; 199
    17a0:	72 e0       	ldi	r23, 0x02	; 2
    17a2:	ce 01       	movw	r24, r28
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN8NRF24L018readFIFOEPVh>
					setSocketState(Payload + 1, !getSocketState(Payload + 1));
    17aa:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <Payload>
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_Z14getSocketStateh>
    17b4:	61 e0       	ldi	r22, 0x01	; 1
    17b6:	68 27       	eor	r22, r24
    17b8:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <Payload>
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14setSocketStatehb>
					BEEP = 1;
    17c2:	43 9a       	sbi	0x08, 3	; 8
					Timer1.setCallBackTime(BEEP_TIME, 0, timerDone);
    17c4:	2b e8       	ldi	r18, 0x8B	; 139
    17c6:	3a e0       	ldi	r19, 0x0A	; 10
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	6e e1       	ldi	r22, 0x1E	; 30
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	89 eb       	ldi	r24, 0xB9	; 185
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
					printStringCRNL("Data received: ");
    17d6:	85 e2       	ldi	r24, 0x25	; 37
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	0e 94 44 03 	call	0x688	; 0x688 <_Z15printStringCRNLPKc>
					printHexNumber(Payload, 1);
    17de:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <Payload>
    17e2:	01 e0       	ldi	r16, 0x01	; 1
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 99 03 	call	0x732	; 0x732 <_Z14printHexNumberyh>
				}
				//printStringCRNL("Tick");
				enableSPI(false);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9enableSPIb>
				initSPISlave();
    17fc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z12initSPISlavev>
				enableSPIInterrupt(true);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18enableSPIInterruptb>
			}
			SPDR = PIND >> 2;
    1806:	89 b1       	in	r24, 0x09	; 9
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	95 95       	asr	r25
    180c:	87 95       	ror	r24
    180e:	95 95       	asr	r25
    1810:	87 95       	ror	r24
    1812:	8e bd       	out	0x2e, r24	; 46
		}
		if(SwitchFlag){
    1814:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <SwitchFlag>
    1818:	88 23       	and	r24, r24
    181a:	c9 f0       	breq	.+50     	; 0x184e <main+0x214>
			SwitchFlag = false;
    181c:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <SwitchFlag>
			setSocketState(SwitchID + 1, !getSocketState(SwitchID + 1));
    1820:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <SwitchID>
    1824:	8f 5f       	subi	r24, 0xFF	; 255
    1826:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_Z14getSocketStateh>
    182a:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <SwitchID>
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	68 27       	eor	r22, r24
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	89 0f       	add	r24, r25
    1836:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14setSocketStatehb>
			BEEP = 1;
    183a:	43 9a       	sbi	0x08, 3	; 8
			Timer1.setCallBackTime(BEEP_TIME, 0, timerDone);
    183c:	2b e8       	ldi	r18, 0x8B	; 139
    183e:	3a e0       	ldi	r19, 0x0A	; 10
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	6e e1       	ldi	r22, 0x1E	; 30
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	89 eb       	ldi	r24, 0xB9	; 185
    1848:	92 e0       	ldi	r25, 0x02	; 2
    184a:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
		}
		if(Timer1_Flag){
    184e:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <Timer1_Flag>
    1852:	88 23       	and	r24, r24
    1854:	09 f4       	brne	.+2      	; 0x1858 <main+0x21e>
    1856:	56 cf       	rjmp	.-340    	; 0x1704 <main+0xca>
			Timer1_Flag = false;
    1858:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <Timer1_Flag>
			printStringCRNL("Timer done.");
    185c:	85 e3       	ldi	r24, 0x35	; 53
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	0e 94 44 03 	call	0x688	; 0x688 <_Z15printStringCRNLPKc>
    1864:	4f cf       	rjmp	.-354    	; 0x1704 <main+0xca>

00001866 <__vector_17>:
	//enableSPIInterrupt(true);
	//sei();
}

ISR(SPI_STC_vect)
{															//Grab the data byte from the SPI Data Register (SPDR)
    1866:	1f 92       	push	r1
    1868:	0f 92       	push	r0
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	0f 92       	push	r0
    186e:	11 24       	eor	r1, r1
    1870:	8f 93       	push	r24
	SPIdata = SPDR;                                         //Put the byte into a temporary variable for processin                                       //process the data byte and put it back into the SPDR for the Master to read it
    1872:	8e b5       	in	r24, 0x2e	; 46
    1874:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <SPIdata>
	newSPIData = true;                                       //Set the Flag as TRUE
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <newSPIData>
    187e:	8f 91       	pop	r24
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	0f 90       	pop	r0
    1886:	1f 90       	pop	r1
    1888:	18 95       	reti

0000188a <__umoddi3>:
    188a:	68 94       	set
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <__udivdi3_umoddi3>

0000188e <__udivdi3>:
    188e:	e8 94       	clt

00001890 <__udivdi3_umoddi3>:
    1890:	8f 92       	push	r8
    1892:	9f 92       	push	r9
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__udivmod64>
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	9f 90       	pop	r9
    18a2:	8f 90       	pop	r8
    18a4:	08 95       	ret

000018a6 <__udivmod64>:
    18a6:	88 24       	eor	r8, r8
    18a8:	99 24       	eor	r9, r9
    18aa:	f4 01       	movw	r30, r8
    18ac:	e4 01       	movw	r28, r8
    18ae:	b0 e4       	ldi	r27, 0x40	; 64
    18b0:	9f 93       	push	r25
    18b2:	aa 27       	eor	r26, r26
    18b4:	9a 15       	cp	r25, r10
    18b6:	8b 04       	cpc	r8, r11
    18b8:	9c 04       	cpc	r9, r12
    18ba:	ed 05       	cpc	r30, r13
    18bc:	fe 05       	cpc	r31, r14
    18be:	cf 05       	cpc	r28, r15
    18c0:	d0 07       	cpc	r29, r16
    18c2:	a1 07       	cpc	r26, r17
    18c4:	98 f4       	brcc	.+38     	; 0x18ec <__udivmod64+0x46>
    18c6:	ad 2f       	mov	r26, r29
    18c8:	dc 2f       	mov	r29, r28
    18ca:	cf 2f       	mov	r28, r31
    18cc:	fe 2f       	mov	r31, r30
    18ce:	e9 2d       	mov	r30, r9
    18d0:	98 2c       	mov	r9, r8
    18d2:	89 2e       	mov	r8, r25
    18d4:	98 2f       	mov	r25, r24
    18d6:	87 2f       	mov	r24, r23
    18d8:	76 2f       	mov	r23, r22
    18da:	65 2f       	mov	r22, r21
    18dc:	54 2f       	mov	r21, r20
    18de:	43 2f       	mov	r20, r19
    18e0:	32 2f       	mov	r19, r18
    18e2:	22 27       	eor	r18, r18
    18e4:	b8 50       	subi	r27, 0x08	; 8
    18e6:	31 f7       	brne	.-52     	; 0x18b4 <__udivmod64+0xe>
    18e8:	bf 91       	pop	r27
    18ea:	27 c0       	rjmp	.+78     	; 0x193a <__udivmod64+0x94>
    18ec:	1b 2e       	mov	r1, r27
    18ee:	bf 91       	pop	r27
    18f0:	bb 27       	eor	r27, r27
    18f2:	22 0f       	add	r18, r18
    18f4:	33 1f       	adc	r19, r19
    18f6:	44 1f       	adc	r20, r20
    18f8:	55 1f       	adc	r21, r21
    18fa:	66 1f       	adc	r22, r22
    18fc:	77 1f       	adc	r23, r23
    18fe:	88 1f       	adc	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	88 1c       	adc	r8, r8
    1904:	99 1c       	adc	r9, r9
    1906:	ee 1f       	adc	r30, r30
    1908:	ff 1f       	adc	r31, r31
    190a:	cc 1f       	adc	r28, r28
    190c:	dd 1f       	adc	r29, r29
    190e:	aa 1f       	adc	r26, r26
    1910:	bb 1f       	adc	r27, r27
    1912:	8a 14       	cp	r8, r10
    1914:	9b 04       	cpc	r9, r11
    1916:	ec 05       	cpc	r30, r12
    1918:	fd 05       	cpc	r31, r13
    191a:	ce 05       	cpc	r28, r14
    191c:	df 05       	cpc	r29, r15
    191e:	a0 07       	cpc	r26, r16
    1920:	b1 07       	cpc	r27, r17
    1922:	48 f0       	brcs	.+18     	; 0x1936 <__udivmod64+0x90>
    1924:	8a 18       	sub	r8, r10
    1926:	9b 08       	sbc	r9, r11
    1928:	ec 09       	sbc	r30, r12
    192a:	fd 09       	sbc	r31, r13
    192c:	ce 09       	sbc	r28, r14
    192e:	df 09       	sbc	r29, r15
    1930:	a0 0b       	sbc	r26, r16
    1932:	b1 0b       	sbc	r27, r17
    1934:	21 60       	ori	r18, 0x01	; 1
    1936:	1a 94       	dec	r1
    1938:	e1 f6       	brne	.-72     	; 0x18f2 <__udivmod64+0x4c>
    193a:	2e f4       	brtc	.+10     	; 0x1946 <__udivmod64+0xa0>
    193c:	94 01       	movw	r18, r8
    193e:	af 01       	movw	r20, r30
    1940:	be 01       	movw	r22, r28
    1942:	cd 01       	movw	r24, r26
    1944:	00 0c       	add	r0, r0
    1946:	08 95       	ret

00001948 <__ashldi3>:
    1948:	0f 93       	push	r16
    194a:	08 30       	cpi	r16, 0x08	; 8
    194c:	90 f0       	brcs	.+36     	; 0x1972 <__ashldi3+0x2a>
    194e:	98 2f       	mov	r25, r24
    1950:	87 2f       	mov	r24, r23
    1952:	76 2f       	mov	r23, r22
    1954:	65 2f       	mov	r22, r21
    1956:	54 2f       	mov	r21, r20
    1958:	43 2f       	mov	r20, r19
    195a:	32 2f       	mov	r19, r18
    195c:	22 27       	eor	r18, r18
    195e:	08 50       	subi	r16, 0x08	; 8
    1960:	f4 cf       	rjmp	.-24     	; 0x194a <__ashldi3+0x2>
    1962:	22 0f       	add	r18, r18
    1964:	33 1f       	adc	r19, r19
    1966:	44 1f       	adc	r20, r20
    1968:	55 1f       	adc	r21, r21
    196a:	66 1f       	adc	r22, r22
    196c:	77 1f       	adc	r23, r23
    196e:	88 1f       	adc	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 95       	dec	r16
    1974:	b2 f7       	brpl	.-20     	; 0x1962 <__ashldi3+0x1a>
    1976:	0f 91       	pop	r16
    1978:	08 95       	ret

0000197a <__ashrdi3>:
    197a:	97 fb       	bst	r25, 7
    197c:	10 f8       	bld	r1, 0

0000197e <__lshrdi3>:
    197e:	16 94       	lsr	r1
    1980:	00 08       	sbc	r0, r0
    1982:	0f 93       	push	r16
    1984:	08 30       	cpi	r16, 0x08	; 8
    1986:	98 f0       	brcs	.+38     	; 0x19ae <__lshrdi3+0x30>
    1988:	08 50       	subi	r16, 0x08	; 8
    198a:	23 2f       	mov	r18, r19
    198c:	34 2f       	mov	r19, r20
    198e:	45 2f       	mov	r20, r21
    1990:	56 2f       	mov	r21, r22
    1992:	67 2f       	mov	r22, r23
    1994:	78 2f       	mov	r23, r24
    1996:	89 2f       	mov	r24, r25
    1998:	90 2d       	mov	r25, r0
    199a:	f4 cf       	rjmp	.-24     	; 0x1984 <__lshrdi3+0x6>
    199c:	05 94       	asr	r0
    199e:	97 95       	ror	r25
    19a0:	87 95       	ror	r24
    19a2:	77 95       	ror	r23
    19a4:	67 95       	ror	r22
    19a6:	57 95       	ror	r21
    19a8:	47 95       	ror	r20
    19aa:	37 95       	ror	r19
    19ac:	27 95       	ror	r18
    19ae:	0a 95       	dec	r16
    19b0:	aa f7       	brpl	.-22     	; 0x199c <__lshrdi3+0x1e>
    19b2:	0f 91       	pop	r16
    19b4:	08 95       	ret

000019b6 <__adddi3_s8>:
    19b6:	00 24       	eor	r0, r0
    19b8:	a7 fd       	sbrc	r26, 7
    19ba:	00 94       	com	r0
    19bc:	2a 0f       	add	r18, r26
    19be:	30 1d       	adc	r19, r0
    19c0:	40 1d       	adc	r20, r0
    19c2:	50 1d       	adc	r21, r0
    19c4:	60 1d       	adc	r22, r0
    19c6:	70 1d       	adc	r23, r0
    19c8:	80 1d       	adc	r24, r0
    19ca:	90 1d       	adc	r25, r0
    19cc:	08 95       	ret

000019ce <__cmpdi2>:
    19ce:	2a 15       	cp	r18, r10
    19d0:	3b 05       	cpc	r19, r11
    19d2:	4c 05       	cpc	r20, r12
    19d4:	5d 05       	cpc	r21, r13
    19d6:	6e 05       	cpc	r22, r14
    19d8:	7f 05       	cpc	r23, r15
    19da:	80 07       	cpc	r24, r16
    19dc:	91 07       	cpc	r25, r17
    19de:	08 95       	ret

000019e0 <__cmpdi2_s8>:
    19e0:	00 24       	eor	r0, r0
    19e2:	a7 fd       	sbrc	r26, 7
    19e4:	00 94       	com	r0
    19e6:	2a 17       	cp	r18, r26
    19e8:	30 05       	cpc	r19, r0
    19ea:	40 05       	cpc	r20, r0
    19ec:	50 05       	cpc	r21, r0
    19ee:	60 05       	cpc	r22, r0
    19f0:	70 05       	cpc	r23, r0
    19f2:	80 05       	cpc	r24, r0
    19f4:	90 05       	cpc	r25, r0
    19f6:	08 95       	ret

000019f8 <_exit>:
    19f8:	f8 94       	cli

000019fa <__stop_program>:
    19fa:	ff cf       	rjmp	.-2      	; 0x19fa <__stop_program>
