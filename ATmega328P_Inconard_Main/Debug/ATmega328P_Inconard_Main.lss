
ATmega328P_Inconard_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001bb8  00001c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018e  00800142  00800142  00001c8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c8  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007282  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016d8  00000000  00000000  0000954a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002eeb  00000000  00000000  0000ac22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001354  00000000  00000000  0000db10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000249e  00000000  00000000  0000ee64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000439b  00000000  00000000  00011302  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000580  00000000  00000000  0001569d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__ctors_end>
       4:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_1>
       8:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_2>
       c:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__vector_3>
      10:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_4>
      14:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_5>
      18:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__vector_6>
      1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      2c:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__vector_11>
      30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      44:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__vector_17>
      48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	49 6e       	ori	r20, 0xE9	; 233
      6a:	69 74       	andi	r22, 0x49	; 73
      6c:	69 61       	ori	r22, 0x19	; 25
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	7a 69       	ori	r23, 0x9A	; 154
      72:	6e 67       	ori	r22, 0x7E	; 126
      74:	20 73       	andi	r18, 0x30	; 48
      76:	75 63       	ori	r23, 0x35	; 53
      78:	63 65       	ori	r22, 0x53	; 83
      7a:	73 73       	andi	r23, 0x33	; 51
      7c:	66 75       	andi	r22, 0x56	; 86
      7e:	6c 2e       	mov	r6, r28
	...

00000081 <_ZZN8NRF24L017setModeEbE3__c_1>:
      81:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
      91:	61 69 6c 65 64 20 66 6f 72 20 6e 52 46 32 34 4c     ailed for nRF24L
      a1:	30 31 2e 20 43 68 65 63 6b 20 63 6f 6e 6e 65 63     01. Check connec
      b1:	74 69 6f 6e 73 00                                   tions.

000000b7 <_ZZN8NRF24L017setModeEbE3__c_0>:
      b7:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      c7:	31 20 69 6e 20 54 72 61 6e 73 6d 69 74 20 4d 6f     1 in Transmit Mo
      d7:	64 65 2e 2e 2e 00                                   de....

000000dd <_ZZN8NRF24L017setModeEbE3__c>:
      dd:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      ed:	31 20 69 6e 20 52 65 63 65 69 76 65 20 4d 6f 64     1 in Receive Mod
      fd:	65 2e 2e 2e 00                                      e....

00000102 <_ZZN8NRF24L0110initializeEvE3__c_0>:
     102:	4d 61 73 74 65 72 20 52 58 20 50 61 79 6c 6f 61     Master RX Payloa
     112:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     122:	3a 20 00                                            : .

00000125 <_ZZN8NRF24L0110initializeEvE3__c>:
     125:	4d 61 73 74 65 72 20 54 58 20 50 61 79 6c 6f 61     Master TX Payloa
     135:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     145:	3a 20 00                                            : .

00000148 <_ZZ4mainE3__c_0>:
     148:	44 6f 6e 65 00                                      Done.

0000014d <_ZZ4mainE3__c>:
     14d:	50 6f 77 65 72 69 6e 67 20 6f 6e 2e 2e 2e 00        Powering on....

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf ef       	ldi	r28, 0xFF	; 255
     162:	d8 e0       	ldi	r29, 0x08	; 8
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	a0 e0       	ldi	r26, 0x00	; 0
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	e8 eb       	ldi	r30, 0xB8	; 184
     170:	fb e1       	ldi	r31, 0x1B	; 27
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	a2 34       	cpi	r26, 0x42	; 66
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	22 e0       	ldi	r18, 0x02	; 2
     180:	a2 e4       	ldi	r26, 0x42	; 66
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a0 3d       	cpi	r26, 0xD0	; 208
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <main>
     192:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <_exit>

00000196 <__bad_interrupt>:
     196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <_Z6wakeUpv>:
	MCUSR &= ~(1<<WDRF);
	/* Start timed sequence */
	WDTCR = (1<<WDCE) | (1<<WDE);
	/* Set new prescaler (time-out) value = 64K cycles (~0.5 s) */
	WDTCR = prescale;
	asm volatile("sei"::);
     19a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     19e:	08 95       	ret

000001a0 <_Z10allowSleepb>:
     1a0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
     1a4:	08 95       	ret

000001a6 <_Z14SPI_MasterInitv>:
     1a6:	24 98       	cbi	0x04, 4	; 4
     1a8:	84 b1       	in	r24, 0x04	; 4
     1aa:	8c 62       	ori	r24, 0x2C	; 44
     1ac:	84 b9       	out	0x04, r24	; 4
     1ae:	2a 9a       	sbi	0x05, 2	; 5
     1b0:	8c b5       	in	r24, 0x2c	; 44
     1b2:	82 65       	ori	r24, 0x52	; 82
     1b4:	8c bd       	out	0x2c, r24	; 44
     1b6:	08 95       	ret

000001b8 <_Z12initSPISlavev>:
     1b8:	84 b1       	in	r24, 0x04	; 4
     1ba:	83 7d       	andi	r24, 0xD3	; 211
     1bc:	84 b9       	out	0x04, r24	; 4
     1be:	24 9a       	sbi	0x04, 4	; 4
     1c0:	8c b5       	in	r24, 0x2c	; 44
     1c2:	8f 7e       	andi	r24, 0xEF	; 239
     1c4:	8c bd       	out	0x2c, r24	; 44
     1c6:	8c b5       	in	r24, 0x2c	; 44
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	8c bd       	out	0x2c, r24	; 44
     1cc:	08 95       	ret

000001ce <_Z9enableSPIb>:
     1ce:	88 23       	and	r24, r24
     1d0:	21 f0       	breq	.+8      	; 0x1da <_Z9enableSPIb+0xc>
     1d2:	8c b5       	in	r24, 0x2c	; 44
     1d4:	80 64       	ori	r24, 0x40	; 64
     1d6:	8c bd       	out	0x2c, r24	; 44
     1d8:	08 95       	ret
     1da:	8c b5       	in	r24, 0x2c	; 44
     1dc:	8f 7b       	andi	r24, 0xBF	; 191
     1de:	8c bd       	out	0x2c, r24	; 44
     1e0:	08 95       	ret

000001e2 <_Z18enableSPIInterruptb>:
     1e2:	88 23       	and	r24, r24
     1e4:	21 f0       	breq	.+8      	; 0x1ee <_Z18enableSPIInterruptb+0xc>
     1e6:	8c b5       	in	r24, 0x2c	; 44
     1e8:	80 68       	ori	r24, 0x80	; 128
     1ea:	8c bd       	out	0x2c, r24	; 44
     1ec:	08 95       	ret
     1ee:	8c b5       	in	r24, 0x2c	; 44
     1f0:	8f 77       	andi	r24, 0x7F	; 127
     1f2:	8c bd       	out	0x2c, r24	; 44
     1f4:	08 95       	ret

000001f6 <_Z18SPI_MasterTransmitc>:
     1f6:	8e bd       	out	0x2e, r24	; 46
     1f8:	0d b4       	in	r0, 0x2d	; 45
     1fa:	07 fe       	sbrs	r0, 7
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <_Z18SPI_MasterTransmitc+0x2>
     1fe:	8e b5       	in	r24, 0x2e	; 46
     200:	08 95       	ret

00000202 <_Z11Init_CTC_T1hj>:
     202:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     206:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     20a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     20e:	87 70       	andi	r24, 0x07	; 7
     210:	88 60       	ori	r24, 0x08	; 8
     212:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     21c:	78 94       	sei
     21e:	08 95       	ret

00000220 <_Z11setPinStatehhb>:
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	e9 f0       	breq	.+58     	; 0x25e <_Z11setPinStatehhb+0x3e>
     224:	18 f0       	brcs	.+6      	; 0x22c <_Z11setPinStatehhb+0xc>
     226:	82 30       	cpi	r24, 0x02	; 2
     228:	99 f1       	breq	.+102    	; 0x290 <_Z11setPinStatehhb+0x70>
     22a:	08 95       	ret
     22c:	44 23       	and	r20, r20
     22e:	59 f0       	breq	.+22     	; 0x246 <_Z11setPinStatehhb+0x26>
     230:	25 b1       	in	r18, 0x05	; 5
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	02 c0       	rjmp	.+4      	; 0x23c <_Z11setPinStatehhb+0x1c>
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <_Z11setPinStatehhb+0x18>
     240:	82 2b       	or	r24, r18
     242:	85 b9       	out	0x05, r24	; 5
     244:	08 95       	ret
     246:	25 b1       	in	r18, 0x05	; 5
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <_Z11setPinStatehhb+0x32>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	6a 95       	dec	r22
     254:	e2 f7       	brpl	.-8      	; 0x24e <_Z11setPinStatehhb+0x2e>
     256:	80 95       	com	r24
     258:	82 23       	and	r24, r18
     25a:	85 b9       	out	0x05, r24	; 5
     25c:	08 95       	ret
     25e:	44 23       	and	r20, r20
     260:	59 f0       	breq	.+22     	; 0x278 <_Z11setPinStatehhb+0x58>
     262:	28 b1       	in	r18, 0x08	; 8
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	02 c0       	rjmp	.+4      	; 0x26e <_Z11setPinStatehhb+0x4e>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	6a 95       	dec	r22
     270:	e2 f7       	brpl	.-8      	; 0x26a <_Z11setPinStatehhb+0x4a>
     272:	82 2b       	or	r24, r18
     274:	88 b9       	out	0x08, r24	; 8
     276:	08 95       	ret
     278:	28 b1       	in	r18, 0x08	; 8
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <_Z11setPinStatehhb+0x64>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	6a 95       	dec	r22
     286:	e2 f7       	brpl	.-8      	; 0x280 <_Z11setPinStatehhb+0x60>
     288:	80 95       	com	r24
     28a:	82 23       	and	r24, r18
     28c:	88 b9       	out	0x08, r24	; 8
     28e:	08 95       	ret
     290:	44 23       	and	r20, r20
     292:	59 f0       	breq	.+22     	; 0x2aa <_Z11setPinStatehhb+0x8a>
     294:	2b b1       	in	r18, 0x0b	; 11
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <_Z11setPinStatehhb+0x80>
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	6a 95       	dec	r22
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <_Z11setPinStatehhb+0x7c>
     2a4:	82 2b       	or	r24, r18
     2a6:	8b b9       	out	0x0b, r24	; 11
     2a8:	08 95       	ret
     2aa:	2b b1       	in	r18, 0x0b	; 11
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <_Z11setPinStatehhb+0x96>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	6a 95       	dec	r22
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <_Z11setPinStatehhb+0x92>
     2ba:	80 95       	com	r24
     2bc:	82 23       	and	r24, r18
     2be:	8b b9       	out	0x0b, r24	; 11
     2c0:	08 95       	ret

000002c2 <_Z15setPinDirectionhhb>:
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	e9 f0       	breq	.+58     	; 0x300 <_Z15setPinDirectionhhb+0x3e>
     2c6:	18 f0       	brcs	.+6      	; 0x2ce <_Z15setPinDirectionhhb+0xc>
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	99 f1       	breq	.+102    	; 0x332 <_Z15setPinDirectionhhb+0x70>
     2cc:	08 95       	ret
     2ce:	44 23       	and	r20, r20
     2d0:	59 f0       	breq	.+22     	; 0x2e8 <_Z15setPinDirectionhhb+0x26>
     2d2:	24 b1       	in	r18, 0x04	; 4
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <_Z15setPinDirectionhhb+0x1c>
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	6a 95       	dec	r22
     2e0:	e2 f7       	brpl	.-8      	; 0x2da <_Z15setPinDirectionhhb+0x18>
     2e2:	82 2b       	or	r24, r18
     2e4:	84 b9       	out	0x04, r24	; 4
     2e6:	08 95       	ret
     2e8:	24 b1       	in	r18, 0x04	; 4
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <_Z15setPinDirectionhhb+0x32>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	6a 95       	dec	r22
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <_Z15setPinDirectionhhb+0x2e>
     2f8:	80 95       	com	r24
     2fa:	82 23       	and	r24, r18
     2fc:	84 b9       	out	0x04, r24	; 4
     2fe:	08 95       	ret
     300:	44 23       	and	r20, r20
     302:	59 f0       	breq	.+22     	; 0x31a <_Z15setPinDirectionhhb+0x58>
     304:	27 b1       	in	r18, 0x07	; 7
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 c0       	rjmp	.+4      	; 0x310 <_Z15setPinDirectionhhb+0x4e>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	6a 95       	dec	r22
     312:	e2 f7       	brpl	.-8      	; 0x30c <_Z15setPinDirectionhhb+0x4a>
     314:	82 2b       	or	r24, r18
     316:	87 b9       	out	0x07, r24	; 7
     318:	08 95       	ret
     31a:	27 b1       	in	r18, 0x07	; 7
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	02 c0       	rjmp	.+4      	; 0x326 <_Z15setPinDirectionhhb+0x64>
     322:	88 0f       	add	r24, r24
     324:	99 1f       	adc	r25, r25
     326:	6a 95       	dec	r22
     328:	e2 f7       	brpl	.-8      	; 0x322 <_Z15setPinDirectionhhb+0x60>
     32a:	80 95       	com	r24
     32c:	82 23       	and	r24, r18
     32e:	87 b9       	out	0x07, r24	; 7
     330:	08 95       	ret
     332:	44 23       	and	r20, r20
     334:	59 f0       	breq	.+22     	; 0x34c <_Z15setPinDirectionhhb+0x8a>
     336:	2a b1       	in	r18, 0x0a	; 10
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	02 c0       	rjmp	.+4      	; 0x342 <_Z15setPinDirectionhhb+0x80>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	6a 95       	dec	r22
     344:	e2 f7       	brpl	.-8      	; 0x33e <_Z15setPinDirectionhhb+0x7c>
     346:	82 2b       	or	r24, r18
     348:	8a b9       	out	0x0a, r24	; 10
     34a:	08 95       	ret
     34c:	2a b1       	in	r18, 0x0a	; 10
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	02 c0       	rjmp	.+4      	; 0x358 <_Z15setPinDirectionhhb+0x96>
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	6a 95       	dec	r22
     35a:	e2 f7       	brpl	.-8      	; 0x354 <_Z15setPinDirectionhhb+0x92>
     35c:	80 95       	com	r24
     35e:	82 23       	and	r24, r18
     360:	8a b9       	out	0x0a, r24	; 10
     362:	08 95       	ret

00000364 <_Z21setPinChangeInterrupthhb>:
     364:	e8 e6       	ldi	r30, 0x68	; 104
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	90 81       	ld	r25, Z
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	08 2e       	mov	r0, r24
     370:	02 c0       	rjmp	.+4      	; 0x376 <_Z21setPinChangeInterrupthhb+0x12>
     372:	22 0f       	add	r18, r18
     374:	33 1f       	adc	r19, r19
     376:	0a 94       	dec	r0
     378:	e2 f7       	brpl	.-8      	; 0x372 <_Z21setPinChangeInterrupthhb+0xe>
     37a:	29 2b       	or	r18, r25
     37c:	20 83       	st	Z, r18
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	81 f0       	breq	.+32     	; 0x3a2 <_Z21setPinChangeInterrupthhb+0x3e>
     382:	18 f0       	brcs	.+6      	; 0x38a <_Z21setPinChangeInterrupthhb+0x26>
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	c9 f0       	breq	.+50     	; 0x3ba <_Z21setPinChangeInterrupthhb+0x56>
     388:	08 95       	ret
     38a:	eb e6       	ldi	r30, 0x6B	; 107
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <_Z21setPinChangeInterrupthhb+0x34>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	6a 95       	dec	r22
     39a:	e2 f7       	brpl	.-8      	; 0x394 <_Z21setPinChangeInterrupthhb+0x30>
     39c:	48 2b       	or	r20, r24
     39e:	40 83       	st	Z, r20
     3a0:	08 95       	ret
     3a2:	ec e6       	ldi	r30, 0x6C	; 108
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <_Z21setPinChangeInterrupthhb+0x4c>
     3ac:	44 0f       	add	r20, r20
     3ae:	55 1f       	adc	r21, r21
     3b0:	6a 95       	dec	r22
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <_Z21setPinChangeInterrupthhb+0x48>
     3b4:	48 2b       	or	r20, r24
     3b6:	40 83       	st	Z, r20
     3b8:	08 95       	ret
     3ba:	ed e6       	ldi	r30, 0x6D	; 109
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <_Z21setPinChangeInterrupthhb+0x64>
     3c4:	44 0f       	add	r20, r20
     3c6:	55 1f       	adc	r21, r21
     3c8:	6a 95       	dec	r22
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <_Z21setPinChangeInterrupthhb+0x60>
     3cc:	48 2b       	or	r20, r24
     3ce:	40 83       	st	Z, r20
     3d0:	08 95       	ret

000003d2 <_Z11getPinStatehh>:
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	69 f0       	breq	.+26     	; 0x3f0 <_Z11getPinStatehh+0x1e>
     3d6:	18 f0       	brcs	.+6      	; 0x3de <_Z11getPinStatehh+0xc>
     3d8:	82 30       	cpi	r24, 0x02	; 2
     3da:	99 f0       	breq	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3dc:	1b c0       	rjmp	.+54     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3de:	83 b1       	in	r24, 0x03	; 3
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <_Z11getPinStatehh+0x16>
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	6a 95       	dec	r22
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <_Z11getPinStatehh+0x12>
     3ec:	81 70       	andi	r24, 0x01	; 1
     3ee:	08 95       	ret
     3f0:	86 b1       	in	r24, 0x06	; 6
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <_Z11getPinStatehh+0x28>
     3f6:	95 95       	asr	r25
     3f8:	87 95       	ror	r24
     3fa:	6a 95       	dec	r22
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <_Z11getPinStatehh+0x24>
     3fe:	81 70       	andi	r24, 0x01	; 1
     400:	08 95       	ret
     402:	89 b1       	in	r24, 0x09	; 9
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	95 95       	asr	r25
     40a:	87 95       	ror	r24
     40c:	6a 95       	dec	r22
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	81 70       	andi	r24, 0x01	; 1
     412:	08 95       	ret
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	08 95       	ret

00000418 <_Z10USART_Initj>:
     418:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     41c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     420:	88 e1       	ldi	r24, 0x18	; 24
     422:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     426:	8e e0       	ldi	r24, 0x0E	; 14
     428:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     42c:	08 95       	ret

0000042e <_Z14USART_Transmith>:
     42e:	e0 ec       	ldi	r30, 0xC0	; 192
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	90 81       	ld	r25, Z
     434:	95 ff       	sbrs	r25, 5
     436:	fd cf       	rjmp	.-6      	; 0x432 <_Z14USART_Transmith+0x4>
     438:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     43c:	08 95       	ret

0000043e <_Z13milliHappenedv>:
}


void milliHappened(){
	time += 1;
     43e:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <time>
     442:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <time+0x1>
     446:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <time+0x2>
     44a:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <time+0x3>
     44e:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <time+0x4>
     452:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <time+0x5>
     456:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <time+0x6>
     45a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <time+0x7>
     45e:	a1 e0       	ldi	r26, 0x01	; 1
     460:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__adddi3_s8>
     464:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <time>
     468:	30 93 46 01 	sts	0x0146, r19	; 0x800146 <time+0x1>
     46c:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <time+0x2>
     470:	50 93 48 01 	sts	0x0148, r21	; 0x800148 <time+0x3>
     474:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <time+0x4>
     478:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <time+0x5>
     47c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <time+0x6>
     480:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <time+0x7>
	if(cdown != 0){
     484:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cdown>
     488:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <cdown+0x1>
     48c:	89 2b       	or	r24, r25
     48e:	49 f0       	breq	.+18     	; 0x4a2 <_Z13milliHappenedv+0x64>
		cdown -= 1;
     490:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cdown>
     494:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <cdown+0x1>
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <cdown+0x1>
     49e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cdown>
     4a2:	08 95       	ret

000004a4 <__vector_6>:
	}
	count1 += 1;
}*/


ISR(WDT_vect){
     4a4:	1f 92       	push	r1
     4a6:	0f 92       	push	r0
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	0f 92       	push	r0
     4ac:	11 24       	eor	r1, r1
     4ae:	8f 93       	push	r24
	MCUSR &= ~(1 << SE);
     4b0:	84 b7       	in	r24, 0x34	; 52
     4b2:	8e 7f       	andi	r24, 0xFE	; 254
     4b4:	84 bf       	out	0x34, r24	; 52
     4b6:	8f 91       	pop	r24
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <_Z10numToArrayy>:
	USART_Transmit('\n');
	while(*p != 0){
		USART_Transmit(*p);
		p++;
	}
}
     4c2:	0f 93       	push	r16
     4c4:	ee e8       	ldi	r30, 0x8E	; 142
     4c6:	f1 e0       	ldi	r31, 0x01	; 1
     4c8:	a6 e9       	ldi	r26, 0x96	; 150
     4ca:	b1 e0       	ldi	r27, 0x01	; 1
     4cc:	21 93       	st	Z+, r18
     4ce:	08 e0       	ldi	r16, 0x08	; 8
     4d0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__lshrdi3>
     4d4:	ea 17       	cp	r30, r26
     4d6:	fb 07       	cpc	r31, r27
     4d8:	c9 f7       	brne	.-14     	; 0x4cc <_Z10numToArrayy+0xa>
     4da:	8e e8       	ldi	r24, 0x8E	; 142
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <_Z10hexToASCIIh>:
     4e2:	8a 30       	cpi	r24, 0x0A	; 10
     4e4:	10 f0       	brcs	.+4      	; 0x4ea <_Z10hexToASCIIh+0x8>
     4e6:	89 5c       	subi	r24, 0xC9	; 201
     4e8:	08 95       	ret
     4ea:	80 5d       	subi	r24, 0xD0	; 208
     4ec:	08 95       	ret

000004ee <_Z11hexToStringh>:
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	18 2f       	mov	r17, r24
     4f6:	82 95       	swap	r24
     4f8:	8f 70       	andi	r24, 0x0F	; 15
     4fa:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z10hexToASCIIh>
     4fe:	c6 e9       	ldi	r28, 0x96	; 150
     500:	d1 e0       	ldi	r29, 0x01	; 1
     502:	88 83       	st	Y, r24
     504:	81 2f       	mov	r24, r17
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <_ZZ11hexToStringhE4temp>
     50c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z10hexToASCIIh>
     510:	89 83       	std	Y+1, r24	; 0x01
     512:	1a 82       	std	Y+2, r1	; 0x02
     514:	ce 01       	movw	r24, r28
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	08 95       	ret

0000051e <_Z11printNumbery>:
     51e:	2f 92       	push	r2
     520:	3f 92       	push	r3
     522:	4f 92       	push	r4
     524:	5f 92       	push	r5
     526:	6f 92       	push	r6
     528:	7f 92       	push	r7
     52a:	8f 92       	push	r8
     52c:	9f 92       	push	r9
     52e:	af 92       	push	r10
     530:	bf 92       	push	r11
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	c7 56       	subi	r28, 0x67	; 103
     548:	d1 09       	sbc	r29, r1
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	a6 96       	adiw	r28, 0x26	; 38
     556:	2f af       	std	Y+63, r18	; 0x3f
     558:	a6 97       	sbiw	r28, 0x26	; 38
     55a:	83 2e       	mov	r8, r19
     55c:	74 2e       	mov	r7, r20
     55e:	65 2e       	mov	r6, r21
     560:	56 2e       	mov	r5, r22
     562:	47 2e       	mov	r4, r23
     564:	38 2e       	mov	r3, r24
     566:	29 2e       	mov	r2, r25
     568:	a0 e0       	ldi	r26, 0x00	; 0
     56a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__cmpdi2_s8>
     56e:	21 f4       	brne	.+8      	; 0x578 <_Z11printNumbery+0x5a>
     570:	80 e3       	ldi	r24, 0x30	; 48
     572:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     576:	52 c0       	rjmp	.+164    	; 0x61c <_Z11printNumbery+0xfe>
     578:	91 2c       	mov	r9, r1
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	8c 0f       	add	r24, r28
     580:	9d 1f       	adc	r25, r29
     582:	89 0d       	add	r24, r9
     584:	91 1d       	adc	r25, r1
     586:	a8 96       	adiw	r28, 0x28	; 40
     588:	9f af       	std	Y+63, r25	; 0x3f
     58a:	8e af       	std	Y+62, r24	; 0x3e
     58c:	a8 97       	sbiw	r28, 0x28	; 40
     58e:	0f 2e       	mov	r0, r31
     590:	fa e0       	ldi	r31, 0x0A	; 10
     592:	af 2e       	mov	r10, r31
     594:	f0 2d       	mov	r31, r0
     596:	b1 2c       	mov	r11, r1
     598:	c1 2c       	mov	r12, r1
     59a:	d1 2c       	mov	r13, r1
     59c:	e1 2c       	mov	r14, r1
     59e:	f1 2c       	mov	r15, r1
     5a0:	00 e0       	ldi	r16, 0x00	; 0
     5a2:	10 e0       	ldi	r17, 0x00	; 0
     5a4:	a6 96       	adiw	r28, 0x26	; 38
     5a6:	2f ad       	ldd	r18, Y+63	; 0x3f
     5a8:	a6 97       	sbiw	r28, 0x26	; 38
     5aa:	38 2d       	mov	r19, r8
     5ac:	47 2d       	mov	r20, r7
     5ae:	56 2d       	mov	r21, r6
     5b0:	65 2d       	mov	r22, r5
     5b2:	74 2d       	mov	r23, r4
     5b4:	83 2d       	mov	r24, r3
     5b6:	92 2d       	mov	r25, r2
     5b8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__umoddi3>
     5bc:	20 5d       	subi	r18, 0xD0	; 208
     5be:	a8 96       	adiw	r28, 0x28	; 40
     5c0:	ee ad       	ldd	r30, Y+62	; 0x3e
     5c2:	ff ad       	ldd	r31, Y+63	; 0x3f
     5c4:	a8 97       	sbiw	r28, 0x28	; 40
     5c6:	20 83       	st	Z, r18
     5c8:	a6 96       	adiw	r28, 0x26	; 38
     5ca:	2f ad       	ldd	r18, Y+63	; 0x3f
     5cc:	a6 97       	sbiw	r28, 0x26	; 38
     5ce:	38 2d       	mov	r19, r8
     5d0:	47 2d       	mov	r20, r7
     5d2:	56 2d       	mov	r21, r6
     5d4:	65 2d       	mov	r22, r5
     5d6:	74 2d       	mov	r23, r4
     5d8:	83 2d       	mov	r24, r3
     5da:	92 2d       	mov	r25, r2
     5dc:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__udivdi3>
     5e0:	a6 96       	adiw	r28, 0x26	; 38
     5e2:	2f af       	std	Y+63, r18	; 0x3f
     5e4:	a6 97       	sbiw	r28, 0x26	; 38
     5e6:	83 2e       	mov	r8, r19
     5e8:	74 2e       	mov	r7, r20
     5ea:	65 2e       	mov	r6, r21
     5ec:	56 2e       	mov	r5, r22
     5ee:	47 2e       	mov	r4, r23
     5f0:	38 2e       	mov	r3, r24
     5f2:	29 2e       	mov	r2, r25
     5f4:	93 94       	inc	r9
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__cmpdi2_s8>
     5fc:	09 f0       	breq	.+2      	; 0x600 <_Z11printNumbery+0xe2>
     5fe:	bd cf       	rjmp	.-134    	; 0x57a <_Z11printNumbery+0x5c>
     600:	99 20       	and	r9, r9
     602:	61 f0       	breq	.+24     	; 0x61c <_Z11printNumbery+0xfe>
     604:	9a 94       	dec	r9
     606:	e1 e0       	ldi	r30, 0x01	; 1
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	ec 0f       	add	r30, r28
     60c:	fd 1f       	adc	r31, r29
     60e:	e9 0d       	add	r30, r9
     610:	f1 1d       	adc	r31, r1
     612:	80 81       	ld	r24, Z
     614:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     618:	91 10       	cpse	r9, r1
     61a:	f4 cf       	rjmp	.-24     	; 0x604 <_Z11printNumbery+0xe6>
     61c:	80 e2       	ldi	r24, 0x20	; 32
     61e:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     622:	c9 59       	subi	r28, 0x99	; 153
     624:	df 4f       	sbci	r29, 0xFF	; 255
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	ff 90       	pop	r15
     63a:	ef 90       	pop	r14
     63c:	df 90       	pop	r13
     63e:	cf 90       	pop	r12
     640:	bf 90       	pop	r11
     642:	af 90       	pop	r10
     644:	9f 90       	pop	r9
     646:	8f 90       	pop	r8
     648:	7f 90       	pop	r7
     64a:	6f 90       	pop	r6
     64c:	5f 90       	pop	r5
     64e:	4f 90       	pop	r4
     650:	3f 90       	pop	r3
     652:	2f 90       	pop	r2
     654:	08 95       	ret

00000656 <_Z6NotifyPKc>:
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	ec 01       	movw	r28, r24
     65c:	8d e0       	ldi	r24, 0x0D	; 13
     65e:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     662:	8a e0       	ldi	r24, 0x0A	; 10
     664:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     668:	fe 01       	movw	r30, r28
     66a:	84 91       	lpm	r24, Z
     66c:	88 23       	and	r24, r24
     66e:	49 f0       	breq	.+18     	; 0x682 <_Z6NotifyPKc+0x2c>
     670:	fe 01       	movw	r30, r28
     672:	84 91       	lpm	r24, Z
     674:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	fe 01       	movw	r30, r28
     67c:	84 91       	lpm	r24, Z
     67e:	81 11       	cpse	r24, r1
     680:	f7 cf       	rjmp	.-18     	; 0x670 <_Z6NotifyPKc+0x1a>
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <_Z15printStringCRNLPKc>:

void printStringCRNL(const char *p){
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
	USART_Transmit('\r');
     68e:	8d e0       	ldi	r24, 0x0D	; 13
     690:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
	USART_Transmit('\n');
     694:	8a e0       	ldi	r24, 0x0A	; 10
     696:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
	while(*p != 0){
     69a:	88 81       	ld	r24, Y
     69c:	88 23       	and	r24, r24
     69e:	31 f0       	breq	.+12     	; 0x6ac <_Z15printStringCRNLPKc+0x24>
     6a0:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     6a2:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
}

void printStringCRNL(const char *p){
	USART_Transmit('\r');
	USART_Transmit('\n');
	while(*p != 0){
     6a6:	89 91       	ld	r24, Y+
     6a8:	81 11       	cpse	r24, r1
     6aa:	fb cf       	rjmp	.-10     	; 0x6a2 <_Z15printStringCRNLPKc+0x1a>
		USART_Transmit(*p);
		p++;
	}
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <_Z11printStringPKc>:

void printString(const char *p){
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	ec 01       	movw	r28, r24
	while(*p != 0){
     6b8:	88 81       	ld	r24, Y
     6ba:	88 23       	and	r24, r24
     6bc:	31 f0       	breq	.+12     	; 0x6ca <_Z11printStringPKc+0x18>
     6be:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     6c0:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
		p++;
	}
}

void printString(const char *p){
	while(*p != 0){
     6c4:	89 91       	ld	r24, Y+
     6c6:	81 11       	cpse	r24, r1
     6c8:	fb cf       	rjmp	.-10     	; 0x6c0 <_Z11printStringPKc+0xe>
		USART_Transmit(*p);
		p++;
	}
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <_Z16hexArrayToStringPhh>:
		data >>= 8;
	}
	return array;
} 

char* hexArrayToString(uint8_t *data, uint8_t length){
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	f6 2e       	mov	r15, r22
	static char str[64], t;
	data += length - 1;
     6dc:	06 2f       	mov	r16, r22
     6de:	10 e0       	ldi	r17, 0x00	; 0
     6e0:	01 50       	subi	r16, 0x01	; 1
     6e2:	11 09       	sbc	r17, r1
     6e4:	08 0f       	add	r16, r24
     6e6:	19 1f       	adc	r17, r25
		p++;
	}
}

void printChar(unsigned char data){
	USART_Transmit(data);
     6e8:	80 e3       	ldi	r24, 0x30	; 48
     6ea:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
     6ee:	88 e7       	ldi	r24, 0x78	; 120
     6f0:	0e 94 17 02 	call	0x42e	; 0x42e <_Z14USART_Transmith>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     6f4:	ff 20       	and	r15, r15
     6f6:	81 f0       	breq	.+32     	; 0x718 <_Z16hexArrayToStringPhh+0x48>
     6f8:	e8 01       	movw	r28, r16
     6fa:	21 96       	adiw	r28, 0x01	; 1
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	8f 0d       	add	r24, r15
     700:	08 1b       	sub	r16, r24
     702:	11 09       	sbc	r17, r1
	{	
		t = *data;
     704:	8a 91       	ld	r24, -Y
     706:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_ZZ16hexArrayToStringPhhE1t>
		printString(hexToString(t));
     70a:	0e 94 77 02 	call	0x4ee	; 0x4ee <_Z11hexToStringh>
     70e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z11printStringPKc>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     712:	c0 17       	cp	r28, r16
     714:	d1 07       	cpc	r29, r17
     716:	b1 f7       	brne	.-20     	; 0x704 <_Z16hexArrayToStringPhh+0x34>
	{	
		t = *data;
		printString(hexToString(t));
		data -= 1;
	}
	str[length + 2] = 0;
     718:	ef 2d       	mov	r30, r15
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	e3 5b       	subi	r30, 0xB3	; 179
     71e:	fe 4f       	sbci	r31, 0xFE	; 254
     720:	12 82       	std	Z+2, r1	; 0x02
	return str;
}
     722:	8d e4       	ldi	r24, 0x4D	; 77
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	08 95       	ret

00000732 <_Z14printHexNumberyh>:
	ascii[1] = hexToASCII(temp);
	ascii[2] = '\0';
	return ascii;
}

void printHexNumber(uint64_t data,uint8_t length){
     732:	0f 93       	push	r16
	printString(hexArrayToString(numToArray((data)),length));
     734:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z10numToArrayy>
     738:	60 2f       	mov	r22, r16
     73a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_Z16hexArrayToStringPhh>
     73e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z11printStringPKc>
}
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <_ZN8NRF24L0114toggleActivateEv>:
	for(i = 0; i < BufferLength_MasterRX; i++){
		SPI_MasterTransmit(*data);
		data += 1;
	}
	CSN = 1;
}
     746:	40 98       	cbi	0x08, 0	; 8
     748:	80 e5       	ldi	r24, 0x50	; 80
     74a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     74e:	83 e7       	ldi	r24, 0x73	; 115
     750:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     754:	40 9a       	sbi	0x08, 0	; 8
     756:	08 95       	ret

00000758 <_ZN8NRF24L0114sendSPICommandEh>:
     758:	86 2f       	mov	r24, r22
     75a:	40 98       	cbi	0x08, 0	; 8
     75c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     760:	40 9a       	sbi	0x08, 0	; 8
     762:	08 95       	ret

00000764 <_ZN8NRF24L0115readSPIRegisterEhh>:
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	86 2f       	mov	r24, r22
     77a:	a4 2e       	mov	r10, r20
     77c:	40 98       	cbi	0x08, 0	; 8
     77e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     782:	aa 20       	and	r10, r10
     784:	21 f1       	breq	.+72     	; 0x7ce <_ZN8NRF24L0115readSPIRegisterEhh+0x6a>
     786:	d0 e0       	ldi	r29, 0x00	; 0
     788:	c0 e0       	ldi	r28, 0x00	; 0
     78a:	b1 2c       	mov	r11, r1
     78c:	c1 2c       	mov	r12, r1
     78e:	d1 2c       	mov	r13, r1
     790:	e1 2c       	mov	r14, r1
     792:	f1 2c       	mov	r15, r1
     794:	00 e0       	ldi	r16, 0x00	; 0
     796:	10 e0       	ldi	r17, 0x00	; 0
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     79e:	2c 2f       	mov	r18, r28
     7a0:	28 2b       	or	r18, r24
     7a2:	3b 2d       	mov	r19, r11
     7a4:	4c 2d       	mov	r20, r12
     7a6:	5d 2d       	mov	r21, r13
     7a8:	6e 2d       	mov	r22, r14
     7aa:	7f 2d       	mov	r23, r15
     7ac:	80 2f       	mov	r24, r16
     7ae:	91 2f       	mov	r25, r17
     7b0:	08 e0       	ldi	r16, 0x08	; 8
     7b2:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__ashldi3>
     7b6:	c2 2f       	mov	r28, r18
     7b8:	b3 2e       	mov	r11, r19
     7ba:	c4 2e       	mov	r12, r20
     7bc:	d5 2e       	mov	r13, r21
     7be:	e6 2e       	mov	r14, r22
     7c0:	f7 2e       	mov	r15, r23
     7c2:	08 2f       	mov	r16, r24
     7c4:	19 2f       	mov	r17, r25
     7c6:	df 5f       	subi	r29, 0xFF	; 255
     7c8:	da 11       	cpse	r29, r10
     7ca:	e6 cf       	rjmp	.-52     	; 0x798 <_ZN8NRF24L0115readSPIRegisterEhh+0x34>
     7cc:	08 c0       	rjmp	.+16     	; 0x7de <_ZN8NRF24L0115readSPIRegisterEhh+0x7a>
     7ce:	c0 e0       	ldi	r28, 0x00	; 0
     7d0:	b1 2c       	mov	r11, r1
     7d2:	c1 2c       	mov	r12, r1
     7d4:	d1 2c       	mov	r13, r1
     7d6:	e1 2c       	mov	r14, r1
     7d8:	f1 2c       	mov	r15, r1
     7da:	00 e0       	ldi	r16, 0x00	; 0
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	40 9a       	sbi	0x08, 0	; 8
     7e0:	2c 2f       	mov	r18, r28
     7e2:	3b 2d       	mov	r19, r11
     7e4:	4c 2d       	mov	r20, r12
     7e6:	5d 2d       	mov	r21, r13
     7e8:	6e 2d       	mov	r22, r14
     7ea:	7f 2d       	mov	r23, r15
     7ec:	80 2f       	mov	r24, r16
     7ee:	91 2f       	mov	r25, r17
     7f0:	08 e0       	ldi	r16, 0x08	; 8
     7f2:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__lshrdi3>
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	bf 90       	pop	r11
     808:	af 90       	pop	r10
     80a:	08 95       	ret

0000080c <_ZN8NRF24L018isRXFullEv>:
     80c:	41 e0       	ldi	r20, 0x01	; 1
     80e:	67 e1       	ldi	r22, 0x17	; 23
     810:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     814:	82 2f       	mov	r24, r18
     816:	82 70       	andi	r24, 0x02	; 2
     818:	08 95       	ret

0000081a <_ZN8NRF24L0111isDataReadyEv>:
     81a:	0f 93       	push	r16
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	67 e0       	ldi	r22, 0x07	; 7
     820:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     824:	06 e0       	ldi	r16, 0x06	; 6
     826:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__lshrdi3>
     82a:	82 2f       	mov	r24, r18
     82c:	81 70       	andi	r24, 0x01	; 1
     82e:	0f 91       	pop	r16
     830:	08 95       	ret

00000832 <_ZN8NRF24L0116writeSPIRegisterEhyh>:
     832:	9f 92       	push	r9
     834:	af 92       	push	r10
     836:	bf 92       	push	r11
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	c2 2f       	mov	r28, r18
     84a:	d3 2f       	mov	r29, r19
     84c:	b4 2e       	mov	r11, r20
     84e:	a5 2e       	mov	r10, r21
     850:	40 98       	cbi	0x08, 0	; 8
     852:	86 2f       	mov	r24, r22
     854:	80 62       	ori	r24, 0x20	; 32
     856:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     85a:	98 2e       	mov	r9, r24
     85c:	cc 20       	and	r12, r12
     85e:	d1 f0       	breq	.+52     	; 0x894 <_ZN8NRF24L0116writeSPIRegisterEhyh+0x62>
     860:	d1 2c       	mov	r13, r1
     862:	8e 2d       	mov	r24, r14
     864:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     868:	2e 2d       	mov	r18, r14
     86a:	3f 2d       	mov	r19, r15
     86c:	40 2f       	mov	r20, r16
     86e:	51 2f       	mov	r21, r17
     870:	6c 2f       	mov	r22, r28
     872:	7d 2f       	mov	r23, r29
     874:	8b 2d       	mov	r24, r11
     876:	9a 2d       	mov	r25, r10
     878:	08 e0       	ldi	r16, 0x08	; 8
     87a:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__lshrdi3>
     87e:	e2 2e       	mov	r14, r18
     880:	f3 2e       	mov	r15, r19
     882:	04 2f       	mov	r16, r20
     884:	15 2f       	mov	r17, r21
     886:	c6 2f       	mov	r28, r22
     888:	d7 2f       	mov	r29, r23
     88a:	b8 2e       	mov	r11, r24
     88c:	a9 2e       	mov	r10, r25
     88e:	d3 94       	inc	r13
     890:	dc 10       	cpse	r13, r12
     892:	e7 cf       	rjmp	.-50     	; 0x862 <_ZN8NRF24L0116writeSPIRegisterEhyh+0x30>
     894:	40 9a       	sbi	0x08, 0	; 8
     896:	89 2d       	mov	r24, r9
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	df 90       	pop	r13
     8a6:	cf 90       	pop	r12
     8a8:	bf 90       	pop	r11
     8aa:	af 90       	pop	r10
     8ac:	9f 90       	pop	r9
     8ae:	08 95       	ret

000008b0 <_ZN8NRF24L017powerONEb>:
     8b0:	cf 92       	push	r12
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	ec 01       	movw	r28, r24
     8c0:	e6 2e       	mov	r14, r22
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     8ca:	2d 7f       	andi	r18, 0xFD	; 253
     8cc:	ee 0c       	add	r14, r14
     8ce:	e2 2a       	or	r14, r18
     8d0:	eb 82       	std	Y+3, r14	; 0x03
     8d2:	cc 24       	eor	r12, r12
     8d4:	c3 94       	inc	r12
     8d6:	f1 2c       	mov	r15, r1
     8d8:	00 e0       	ldi	r16, 0x00	; 0
     8da:	10 e0       	ldi	r17, 0x00	; 0
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	ce 01       	movw	r24, r28
     8e8:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	cf 90       	pop	r12
     8fa:	08 95       	ret

000008fc <_ZN8NRF24L017setModeEb>:
     8fc:	af 92       	push	r10
     8fe:	bf 92       	push	r11
     900:	cf 92       	push	r12
     902:	df 92       	push	r13
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	ec 01       	movw	r28, r24
     912:	d6 2e       	mov	r13, r22
     914:	41 e0       	ldi	r20, 0x01	; 1
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     91c:	2e 7f       	andi	r18, 0xFE	; 254
     91e:	e2 2e       	mov	r14, r18
     920:	ed 28       	or	r14, r13
     922:	eb 82       	std	Y+3, r14	; 0x03
     924:	cc 24       	eor	r12, r12
     926:	c3 94       	inc	r12
     928:	f1 2c       	mov	r15, r1
     92a:	00 e0       	ldi	r16, 0x00	; 0
     92c:	10 e0       	ldi	r17, 0x00	; 0
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     93e:	dd 20       	and	r13, r13
     940:	29 f0       	breq	.+10     	; 0x94c <__stack+0x4d>
     942:	8d ed       	ldi	r24, 0xDD	; 221
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     94a:	04 c0       	rjmp	.+8      	; 0x954 <__stack+0x55>
     94c:	87 eb       	ldi	r24, 0xB7	; 183
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	ce 01       	movw	r24, r28
     95a:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     95e:	ab 80       	ldd	r10, Y+3	; 0x03
     960:	b1 2c       	mov	r11, r1
     962:	c1 2c       	mov	r12, r1
     964:	d1 2c       	mov	r13, r1
     966:	e1 2c       	mov	r14, r1
     968:	f1 2c       	mov	r15, r1
     96a:	00 e0       	ldi	r16, 0x00	; 0
     96c:	10 e0       	ldi	r17, 0x00	; 0
     96e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__cmpdi2>
     972:	29 f0       	breq	.+10     	; 0x97e <__stack+0x7f>
     974:	81 e8       	ldi	r24, 0x81	; 129
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     97c:	04 c0       	rjmp	.+8      	; 0x986 <__stack+0x87>
     97e:	88 e6       	ldi	r24, 0x68	; 104
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	bf 90       	pop	r11
     998:	af 90       	pop	r10
     99a:	08 95       	ret

0000099c <_ZN8NRF24L0120enableReceiveAddressEhb>:
     99c:	af 92       	push	r10
     99e:	bf 92       	push	r11
     9a0:	cf 92       	push	r12
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	5c 01       	movw	r10, r24
     9ae:	e6 2e       	mov	r14, r22
     9b0:	c4 2f       	mov	r28, r20
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	62 e0       	ldi	r22, 0x02	; 2
     9b6:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 2c       	mov	r0, r14
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <_ZN8NRF24L0120enableReceiveAddressEhb+0x2a>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	0a 94       	dec	r0
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <_ZN8NRF24L0120enableReceiveAddressEhb+0x26>
     9ca:	80 95       	com	r24
     9cc:	82 23       	and	r24, r18
     9ce:	4c 2f       	mov	r20, r28
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <_ZN8NRF24L0120enableReceiveAddressEhb+0x3c>
     9d4:	44 0f       	add	r20, r20
     9d6:	55 1f       	adc	r21, r21
     9d8:	ea 94       	dec	r14
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <_ZN8NRF24L0120enableReceiveAddressEhb+0x38>
     9dc:	e8 2e       	mov	r14, r24
     9de:	e4 2a       	or	r14, r20
     9e0:	f5 01       	movw	r30, r10
     9e2:	e3 82       	std	Z+3, r14	; 0x03
     9e4:	cc 24       	eor	r12, r12
     9e6:	c3 94       	inc	r12
     9e8:	f1 2c       	mov	r15, r1
     9ea:	00 e0       	ldi	r16, 0x00	; 0
     9ec:	10 e0       	ldi	r17, 0x00	; 0
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	62 e0       	ldi	r22, 0x02	; 2
     9f8:	c5 01       	movw	r24, r10
     9fa:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	cf 90       	pop	r12
     a0a:	bf 90       	pop	r11
     a0c:	af 90       	pop	r10
     a0e:	08 95       	ret

00000a10 <_ZN8NRF24L0120enableACKWithPayloadEb>:
     a10:	cf 92       	push	r12
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
     a20:	e6 2e       	mov	r14, r22
     a22:	41 e0       	ldi	r20, 0x01	; 1
     a24:	6d e1       	ldi	r22, 0x1D	; 29
     a26:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     a2a:	2d 7f       	andi	r18, 0xFD	; 253
     a2c:	ee 0c       	add	r14, r14
     a2e:	e2 2a       	or	r14, r18
     a30:	eb 82       	std	Y+3, r14	; 0x03
     a32:	cc 24       	eor	r12, r12
     a34:	c3 94       	inc	r12
     a36:	f1 2c       	mov	r15, r1
     a38:	00 e0       	ldi	r16, 0x00	; 0
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	6d e1       	ldi	r22, 0x1D	; 29
     a46:	ce 01       	movw	r24, r28
     a48:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	cf 90       	pop	r12
     a5a:	08 95       	ret

00000a5c <_ZN8NRF24L0126enableDynamicPayloadLengthEb>:
     a5c:	cf 92       	push	r12
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	ec 01       	movw	r28, r24
     a6c:	e6 2e       	mov	r14, r22
     a6e:	41 e0       	ldi	r20, 0x01	; 1
     a70:	6d e1       	ldi	r22, 0x1D	; 29
     a72:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     a76:	2b 7f       	andi	r18, 0xFB	; 251
     a78:	ee 0c       	add	r14, r14
     a7a:	ee 0c       	add	r14, r14
     a7c:	e2 2a       	or	r14, r18
     a7e:	eb 82       	std	Y+3, r14	; 0x03
     a80:	cc 24       	eor	r12, r12
     a82:	c3 94       	inc	r12
     a84:	f1 2c       	mov	r15, r1
     a86:	00 e0       	ldi	r16, 0x00	; 0
     a88:	10 e0       	ldi	r17, 0x00	; 0
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	6d e1       	ldi	r22, 0x1D	; 29
     a94:	ce 01       	movw	r24, r28
     a96:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	cf 90       	pop	r12
     aa8:	08 95       	ret

00000aaa <_ZN8NRF24L0118enableDPLForRXPipeEhb>:
     aaa:	af 92       	push	r10
     aac:	bf 92       	push	r11
     aae:	cf 92       	push	r12
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	66 30       	cpi	r22, 0x06	; 6
     abe:	48 f5       	brcc	.+82     	; 0xb12 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x68>
     ac0:	c4 2f       	mov	r28, r20
     ac2:	d6 2f       	mov	r29, r22
     ac4:	5c 01       	movw	r10, r24
     ac6:	41 e0       	ldi	r20, 0x01	; 1
     ac8:	6c e1       	ldi	r22, 0x1C	; 28
     aca:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0d 2e       	mov	r0, r29
     ad4:	02 c0       	rjmp	.+4      	; 0xada <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x30>
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	0a 94       	dec	r0
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x2c>
     ade:	80 95       	com	r24
     ae0:	82 23       	and	r24, r18
     ae2:	4c 2f       	mov	r20, r28
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x42>
     ae8:	44 0f       	add	r20, r20
     aea:	55 1f       	adc	r21, r21
     aec:	da 95       	dec	r29
     aee:	e2 f7       	brpl	.-8      	; 0xae8 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x3e>
     af0:	e8 2e       	mov	r14, r24
     af2:	e4 2a       	or	r14, r20
     af4:	f5 01       	movw	r30, r10
     af6:	e3 82       	std	Z+3, r14	; 0x03
     af8:	cc 24       	eor	r12, r12
     afa:	c3 94       	inc	r12
     afc:	f1 2c       	mov	r15, r1
     afe:	00 e0       	ldi	r16, 0x00	; 0
     b00:	10 e0       	ldi	r17, 0x00	; 0
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	6c e1       	ldi	r22, 0x1C	; 28
     b0c:	c5 01       	movw	r24, r10
     b0e:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	08 95       	ret

00000b26 <_ZN8NRF24L0110clearRX_DREv>:
     b26:	cf 92       	push	r12
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cc 24       	eor	r12, r12
     b32:	c3 94       	inc	r12
     b34:	68 94       	set
     b36:	ee 24       	eor	r14, r14
     b38:	e6 f8       	bld	r14, 6
     b3a:	f1 2c       	mov	r15, r1
     b3c:	00 e0       	ldi	r16, 0x00	; 0
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	67 e0       	ldi	r22, 0x07	; 7
     b4a:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	cf 90       	pop	r12
     b58:	08 95       	ret

00000b5a <_ZN8NRF24L0113setRFDataRateEb>:
     b5a:	cf 92       	push	r12
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	ec 01       	movw	r28, r24
     b6a:	e6 2e       	mov	r14, r22
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	66 e0       	ldi	r22, 0x06	; 6
     b70:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh>
     b74:	27 7f       	andi	r18, 0xF7	; 247
     b76:	ee 0c       	add	r14, r14
     b78:	ee 0c       	add	r14, r14
     b7a:	ee 0c       	add	r14, r14
     b7c:	e2 2a       	or	r14, r18
     b7e:	eb 82       	std	Y+3, r14	; 0x03
     b80:	cc 24       	eor	r12, r12
     b82:	c3 94       	inc	r12
     b84:	f1 2c       	mov	r15, r1
     b86:	00 e0       	ldi	r16, 0x00	; 0
     b88:	10 e0       	ldi	r17, 0x00	; 0
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	66 e0       	ldi	r22, 0x06	; 6
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	cf 90       	pop	r12
     ba8:	08 95       	ret

00000baa <_ZN8NRF24L0110initializeEv>:
     baa:	cf 92       	push	r12
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	ec 01       	movw	r28, r24
     bba:	38 9a       	sbi	0x07, 0	; 7
     bbc:	39 9a       	sbi	0x07, 1	; 7
     bbe:	41 9a       	sbi	0x08, 1	; 8
     bc0:	57 9a       	sbi	0x0a, 7	; 10
     bc2:	1a 82       	std	Y+2, r1	; 0x02
     bc4:	85 e2       	ldi	r24, 0x25	; 37
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     bcc:	28 81       	ld	r18, Y
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z11printNumbery>
     be0:	82 e0       	ldi	r24, 0x02	; 2
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
     be8:	29 81       	ldd	r18, Y+1	; 0x01
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z11printNumbery>
     bfc:	cc 24       	eor	r12, r12
     bfe:	c3 94       	inc	r12
     c00:	e1 2c       	mov	r14, r1
     c02:	f1 2c       	mov	r15, r1
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	10 e0       	ldi	r17, 0x00	; 0
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	64 e0       	ldi	r22, 0x04	; 4
     c12:	ce 01       	movw	r24, r28
     c14:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	ce 01       	movw	r24, r28
     c1c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <_ZN8NRF24L0113setRFDataRateEb>
     c20:	6f 81       	ldd	r22, Y+7	; 0x07
     c22:	ce 01       	movw	r24, r28
     c24:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN8NRF24L017setModeEb>
     c28:	88 85       	ldd	r24, Y+8	; 0x08
     c2a:	88 23       	and	r24, r24
     c2c:	59 f0       	breq	.+22     	; 0xc44 <_ZN8NRF24L0110initializeEv+0x9a>
     c2e:	ce 01       	movw	r24, r28
     c30:	0e 94 a3 03 	call	0x746	; 0x746 <_ZN8NRF24L0114toggleActivateEv>
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	ce 01       	movw	r24, r28
     c38:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN8NRF24L0126enableDynamicPayloadLengthEb>
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	ce 01       	movw	r24, r28
     c40:	0e 94 08 05 	call	0xa10	; 0xa10 <_ZN8NRF24L0120enableACKWithPayloadEb>
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	ce 01       	movw	r24, r28
     c48:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_ZN8NRF24L017powerONEb>
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	cf 90       	pop	r12
     c5a:	08 95       	ret

00000c5c <_ZN8NRF24L01C1Ehhb>:
     c5c:	3f ef       	ldi	r19, 0xFF	; 255
     c5e:	51 ee       	ldi	r21, 0xE1	; 225
     c60:	74 e0       	ldi	r23, 0x04	; 4
     c62:	31 50       	subi	r19, 0x01	; 1
     c64:	50 40       	sbci	r21, 0x00	; 0
     c66:	70 40       	sbci	r23, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <_ZN8NRF24L01C1Ehhb+0x6>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <_ZN8NRF24L01C1Ehhb+0x10>
     c6c:	00 00       	nop
     c6e:	fc 01       	movw	r30, r24
     c70:	27 83       	std	Z+7, r18	; 0x07
     c72:	21 e0       	ldi	r18, 0x01	; 1
     c74:	20 87       	std	Z+8, r18	; 0x08
     c76:	60 83       	st	Z, r22
     c78:	41 83       	std	Z+1, r20	; 0x01
     c7a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_ZN8NRF24L0110initializeEv>
     c7e:	08 95       	ret

00000c80 <_ZN8NRF24L0117setReceiveAddressEyh>:
     c80:	cf 92       	push	r12
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	f2 2f       	mov	r31, r18
     c8c:	24 2f       	mov	r18, r20
     c8e:	46 2f       	mov	r20, r22
     c90:	6a e0       	ldi	r22, 0x0A	; 10
     c92:	6e 0d       	add	r22, r14
     c94:	0f 2e       	mov	r0, r31
     c96:	f5 e0       	ldi	r31, 0x05	; 5
     c98:	cf 2e       	mov	r12, r31
     c9a:	f0 2d       	mov	r31, r0
     c9c:	e0 2e       	mov	r14, r16
     c9e:	f1 2e       	mov	r15, r17
     ca0:	0f 2f       	mov	r16, r31
     ca2:	13 2f       	mov	r17, r19
     ca4:	35 2f       	mov	r19, r21
     ca6:	57 2f       	mov	r21, r23
     ca8:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	cf 90       	pop	r12
     cb6:	08 95       	ret

00000cb8 <_ZN8NRF24L017flushRXEv>:
void NRF24L01::flushTX(){
	sendSPICommand(FLUSH_TX);
}

void NRF24L01::flushRX(){
	sendSPICommand(FLUSH_RX);
     cb8:	62 ee       	ldi	r22, 0xE2	; 226
     cba:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN8NRF24L0114sendSPICommandEh>
     cbe:	08 95       	ret

00000cc0 <_ZN8NRF24L018readFIFOEPVh>:
		data += 1;
	}
	CSN = 1;
}

void NRF24L01::readFIFO(volatile uint8_t *data){
     cc0:	9f 92       	push	r9
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	5c 01       	movw	r10, r24
     cd8:	d6 2e       	mov	r13, r22
     cda:	97 2e       	mov	r9, r23
	writeSPIRegister(STATUS, (1 << 6), 1);
     cdc:	cc 24       	eor	r12, r12
     cde:	c3 94       	inc	r12
     ce0:	68 94       	set
     ce2:	ee 24       	eor	r14, r14
     ce4:	e6 f8       	bld	r14, 6
     ce6:	f1 2c       	mov	r15, r1
     ce8:	00 e0       	ldi	r16, 0x00	; 0
     cea:	10 e0       	ldi	r17, 0x00	; 0
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	67 e0       	ldi	r22, 0x07	; 7
     cf6:	0e 94 19 04 	call	0x832	; 0x832 <_ZN8NRF24L0116writeSPIRegisterEhyh>
	CSN = 0;
     cfa:	40 98       	cbi	0x08, 0	; 8
	SPI_MasterTransmit(0x61);
     cfc:	81 e6       	ldi	r24, 0x61	; 97
     cfe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
	for(uint8_t i = 0; i < BufferLength_MasterTX; i++){
     d02:	f5 01       	movw	r30, r10
     d04:	80 81       	ld	r24, Z
     d06:	88 23       	and	r24, r24
     d08:	61 f0       	breq	.+24     	; 0xd22 <_ZN8NRF24L018readFIFOEPVh+0x62>
     d0a:	cd 2d       	mov	r28, r13
     d0c:	d9 2d       	mov	r29, r9
		*data =  SPI_MasterTransmit(0x00);
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z18SPI_MasterTransmitc>
     d14:	89 93       	st	Y+, r24
     d16:	2c 2f       	mov	r18, r28
     d18:	2d 19       	sub	r18, r13

void NRF24L01::readFIFO(volatile uint8_t *data){
	writeSPIRegister(STATUS, (1 << 6), 1);
	CSN = 0;
	SPI_MasterTransmit(0x61);
	for(uint8_t i = 0; i < BufferLength_MasterTX; i++){
     d1a:	f5 01       	movw	r30, r10
     d1c:	90 81       	ld	r25, Z
     d1e:	29 17       	cp	r18, r25
     d20:	b0 f3       	brcs	.-20     	; 0xd0e <_ZN8NRF24L018readFIFOEPVh+0x4e>
		*data =  SPI_MasterTransmit(0x00);
		data += 1;
	}
	CSN = 1;
     d22:	40 9a       	sbi	0x08, 0	; 8
	if(isRXFull()){
     d24:	c5 01       	movw	r24, r10
     d26:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8NRF24L018isRXFullEv>
     d2a:	88 23       	and	r24, r24
     d2c:	19 f0       	breq	.+6      	; 0xd34 <_ZN8NRF24L018readFIFOEPVh+0x74>
		flushRX();
     d2e:	c5 01       	movw	r24, r10
     d30:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN8NRF24L017flushRXEv>
	}
}
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	bf 90       	pop	r11
     d46:	af 90       	pop	r10
     d48:	9f 90       	pop	r9
     d4a:	08 95       	ret

00000d4c <_ZN11SwitchClass9doNothingEh>:
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     d4c:	08 95       	ret

00000d4e <_ZN11SwitchClass5beginEv>:
     d4e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <_ZN11SwitchClass1iE>
     d52:	86 ea       	ldi	r24, 0xA6	; 166
     d54:	96 e0       	ldi	r25, 0x06	; 6
     d56:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     d5a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZN11SwitchClass17PinStateChangePtrE>
     d5e:	08 95       	ret

00000d60 <_ZN11SwitchClass10shortPressEPFvhE>:
     d60:	fc 01       	movw	r30, r24
     d62:	77 87       	std	Z+15, r23	; 0x0f
     d64:	66 87       	std	Z+14, r22	; 0x0e
     d66:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     d6a:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <_ZN11SwitchClass16AllShortPressPtrE>
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	24 8f       	std	Z+28, r18	; 0x1c
     d72:	08 95       	ret

00000d74 <_ZN11SwitchClass18doubleWaitCompleteEv>:
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	ec 01       	movw	r28, r24
     d7a:	1b a2       	std	Y+35, r1	; 0x23
     d7c:	1c a2       	std	Y+36, r1	; 0x24
     d7e:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN10TimerClass10resetTimerEv>
     d82:	ce 01       	movw	r24, r28
     d84:	0e 94 e5 09 	call	0x13ca	; 0x13ca <_ZN10TimerClass18resetCallbackTimerEv>
     d88:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d8a:	81 11       	cpse	r24, r1
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <_ZN11SwitchClass18doubleWaitCompleteEv+0x22>
     d8e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN11SwitchClass11AllShort_ENE>
     d92:	88 23       	and	r24, r24
     d94:	c9 f0       	breq	.+50     	; 0xdc8 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     d96:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
     d9a:	88 23       	and	r24, r24
     d9c:	61 f0       	breq	.+24     	; 0xdb6 <_ZN11SwitchClass18doubleWaitCompleteEv+0x42>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     da4:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <_ZN11SwitchClass16AllShortPressPtrE>
     da8:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     dac:	30 97       	sbiw	r30, 0x00	; 0
     dae:	61 f0       	breq	.+24     	; 0xdc8 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     db0:	8e a1       	ldd	r24, Y+38	; 0x26
     db2:	09 95       	icall
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     dbc:	ee 85       	ldd	r30, Y+14	; 0x0e
     dbe:	ff 85       	ldd	r31, Y+15	; 0x0f
     dc0:	30 97       	sbiw	r30, 0x00	; 0
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     dc4:	8e a1       	ldd	r24, Y+38	; 0x26
     dc6:	09 95       	icall
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <_ZN11SwitchClass17callAllDoubleWaitEh>:
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
     dd6:	99 23       	and	r25, r25
     dd8:	c1 f0       	breq	.+48     	; 0xe0a <_ZN11SwitchClass17callAllDoubleWaitEh+0x3c>
     dda:	d8 2f       	mov	r29, r24
     ddc:	c0 e0       	ldi	r28, 0x00	; 0
     dde:	ec 2f       	mov	r30, r28
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	e0 55       	subi	r30, 0x50	; 80
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	01 90       	ld	r0, Z+
     dec:	f0 81       	ld	r31, Z
     dee:	e0 2d       	mov	r30, r0
     df0:	91 a5       	ldd	r25, Z+41	; 0x29
     df2:	9d 13       	cpse	r25, r29
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     df6:	30 97       	sbiw	r30, 0x00	; 0
     df8:	19 f0       	breq	.+6      	; 0xe00 <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     dfa:	cf 01       	movw	r24, r30
     dfc:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZN11SwitchClass18doubleWaitCompleteEv>
     e00:	cf 5f       	subi	r28, 0xFF	; 255
     e02:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
     e06:	c9 17       	cp	r28, r25
     e08:	50 f3       	brcs	.-44     	; 0xdde <_ZN11SwitchClass17callAllDoubleWaitEh+0x10>
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <_ZN11SwitchClass17enableSamePtrModeEb>:
     e10:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
     e14:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_ZN11SwitchClass11AllShort_ENE>
     e18:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <_ZN11SwitchClass12AllDouble_ENE>
     e1c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_ZN11SwitchClass10AllLong_ENE>
     e20:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <_ZN11SwitchClass20AllContinuousLong_ENE>
     e24:	08 95       	ret

00000e26 <_ZN11SwitchClass16updatePinBuffersEv>:
     e26:	83 b1       	in	r24, 0x03	; 3
     e28:	eb ea       	ldi	r30, 0xAB	; 171
     e2a:	f1 e0       	ldi	r31, 0x01	; 1
     e2c:	80 83       	st	Z, r24
     e2e:	86 b1       	in	r24, 0x06	; 6
     e30:	81 83       	std	Z+1, r24	; 0x01
     e32:	89 b1       	in	r24, 0x09	; 9
     e34:	82 83       	std	Z+2, r24	; 0x02
     e36:	08 95       	ret

00000e38 <_ZN11SwitchClass10pollSwitchEv>:
     e38:	fc 01       	movw	r30, r24
     e3a:	80 a5       	ldd	r24, Z+40	; 0x28
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	49 f0       	breq	.+18     	; 0xe52 <_ZN11SwitchClass10pollSwitchEv+0x1a>
     e40:	18 f0       	brcs	.+6      	; 0xe48 <_ZN11SwitchClass10pollSwitchEv+0x10>
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	59 f0       	breq	.+22     	; 0xe5c <_ZN11SwitchClass10pollSwitchEv+0x24>
     e46:	0e c0       	rjmp	.+28     	; 0xe64 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e48:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN11SwitchClass9PinBufferE>
     e4c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e50:	09 c0       	rjmp	.+18     	; 0xe64 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e52:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <_ZN11SwitchClass9PinBufferE+0x1>
     e56:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e5a:	04 c0       	rjmp	.+8      	; 0xe64 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e5c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN11SwitchClass9PinBufferE+0x2>
     e60:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e64:	82 8d       	ldd	r24, Z+26	; 0x1a
     e66:	81 a3       	std	Z+33, r24	; 0x21
     e68:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	07 a0       	ldd	r0, Z+39	; 0x27
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <_ZN11SwitchClass10pollSwitchEv+0x3e>
     e72:	35 95       	asr	r19
     e74:	27 95       	ror	r18
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <_ZN11SwitchClass10pollSwitchEv+0x3a>
     e7a:	21 70       	andi	r18, 0x01	; 1
     e7c:	22 8f       	std	Z+26, r18	; 0x1a
     e7e:	08 95       	ret

00000e80 <_ZN11SwitchClass16initializeSwitchEhhPS_>:
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	ec 01       	movw	r28, r24
     e8e:	f6 2e       	mov	r15, r22
     e90:	e4 2e       	mov	r14, r20
     e92:	89 01       	movw	r16, r18
     e94:	1f 86       	std	Y+15, r1	; 0x0f
     e96:	1e 86       	std	Y+14, r1	; 0x0e
     e98:	1b 8a       	std	Y+19, r1	; 0x13
     e9a:	1a 8a       	std	Y+18, r1	; 0x12
     e9c:	19 8a       	std	Y+17, r1	; 0x11
     e9e:	18 8a       	std	Y+16, r1	; 0x10
     ea0:	1d 8a       	std	Y+21, r1	; 0x15
     ea2:	1c 8a       	std	Y+20, r1	; 0x14
     ea4:	1f 8a       	std	Y+23, r1	; 0x17
     ea6:	1e 8a       	std	Y+22, r1	; 0x16
     ea8:	19 8e       	std	Y+25, r1	; 0x19
     eaa:	18 8e       	std	Y+24, r1	; 0x18
     eac:	0e 94 c6 09 	call	0x138c	; 0x138c <_ZN10TimerClass15initializeTimerEv>
     eb0:	ef a2       	std	Y+39, r14	; 0x27
     eb2:	f8 a6       	std	Y+40, r15	; 0x28
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	6e 2d       	mov	r22, r14
     eb8:	8f 2d       	mov	r24, r15
     eba:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	6f a1       	ldd	r22, Y+39	; 0x27
     ec2:	88 a5       	ldd	r24, Y+40	; 0x28
     ec4:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	6e 2d       	mov	r22, r14
     ecc:	8f 2d       	mov	r24, r15
     ece:	0e 94 b2 01 	call	0x364	; 0x364 <_Z21setPinChangeInterrupthhb>
     ed2:	88 a5       	ldd	r24, Y+40	; 0x28
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	41 f0       	breq	.+16     	; 0xee8 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x68>
     ed8:	18 f0       	brcs	.+6      	; 0xee0 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x60>
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	49 f0       	breq	.+18     	; 0xef0 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x70>
     ede:	0b c0       	rjmp	.+22     	; 0xef6 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     ee0:	83 b1       	in	r24, 0x03	; 3
     ee2:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     ee6:	07 c0       	rjmp	.+14     	; 0xef6 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     ee8:	86 b1       	in	r24, 0x06	; 6
     eea:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     ef0:	89 b1       	in	r24, 0x09	; 9
     ef2:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     ef6:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
     efa:	e8 2f       	mov	r30, r24
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	e0 55       	subi	r30, 0x50	; 80
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	11 83       	std	Z+1, r17	; 0x01
     f08:	00 83       	st	Z, r16
     f0a:	8e a3       	std	Y+38, r24	; 0x26
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <_ZN11SwitchClass1iE>
     f12:	ce 01       	movw	r24, r28
     f14:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZN11SwitchClass16updatePinBuffersEv>
     f18:	ce 01       	movw	r24, r28
     f1a:	0e 94 1c 07 	call	0xe38	; 0xe38 <_ZN11SwitchClass10pollSwitchEv>
     f1e:	1f 8e       	std	Y+31, r1	; 0x1f
     f20:	ce 01       	movw	r24, r28
     f22:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN10TimerClass10getTimerIDEv>
     f26:	89 a7       	std	Y+41, r24	; 0x29
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	08 95       	ret

00000f36 <_ZN11SwitchClass18processStateChangeEv>:
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	ec 01       	movw	r28, r24
     f3c:	0e 94 1c 07 	call	0xe38	; 0xe38 <_ZN11SwitchClass10pollSwitchEv>
     f40:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f42:	81 11       	cpse	r24, r1
     f44:	20 c0       	rjmp	.+64     	; 0xf86 <_ZN11SwitchClass18processStateChangeEv+0x50>
     f46:	89 a1       	ldd	r24, Y+33	; 0x21
     f48:	88 23       	and	r24, r24
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_ZN11SwitchClass18processStateChangeEv+0x18>
     f4c:	78 c0       	rjmp	.+240    	; 0x103e <_ZN11SwitchClass18processStateChangeEv+0x108>
     f4e:	8b a1       	ldd	r24, Y+35	; 0x23
     f50:	81 11       	cpse	r24, r1
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <_ZN11SwitchClass18processStateChangeEv+0x2e>
     f54:	2f ea       	ldi	r18, 0xAF	; 175
     f56:	38 e0       	ldi	r19, 0x08	; 8
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	6c eb       	ldi	r22, 0xBC	; 188
     f5c:	72 e0       	ldi	r23, 0x02	; 2
     f5e:	ce 01       	movw	r24, r28
     f60:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	8a a3       	std	Y+34, r24	; 0x22
     f68:	8b a1       	ldd	r24, Y+35	; 0x23
     f6a:	88 23       	and	r24, r24
     f6c:	41 f0       	breq	.+16     	; 0xf7e <_ZN11SwitchClass18processStateChangeEv+0x48>
     f6e:	68 e5       	ldi	r22, 0x58	; 88
     f70:	72 e0       	ldi	r23, 0x02	; 2
     f72:	ce 01       	movw	r24, r28
     f74:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN10TimerClass7setTimeEj>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	8c a3       	std	Y+36, r24	; 0x24
     f7c:	1b a2       	std	Y+35, r1	; 0x23
     f7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f80:	88 23       	and	r24, r24
     f82:	09 f4       	brne	.+2      	; 0xf86 <_ZN11SwitchClass18processStateChangeEv+0x50>
     f84:	5c c0       	rjmp	.+184    	; 0x103e <_ZN11SwitchClass18processStateChangeEv+0x108>
     f86:	89 a1       	ldd	r24, Y+33	; 0x21
     f88:	81 11       	cpse	r24, r1
     f8a:	59 c0       	rjmp	.+178    	; 0x103e <_ZN11SwitchClass18processStateChangeEv+0x108>
     f8c:	8c a1       	ldd	r24, Y+36	; 0x24
     f8e:	81 11       	cpse	r24, r1
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <_ZN11SwitchClass18processStateChangeEv+0x68>
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <_ZN10TimerClass15getCallBackTimeEv>
     f98:	9d a7       	std	Y+45, r25	; 0x2d
     f9a:	8c a7       	std	Y+44, r24	; 0x2c
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <_ZN11SwitchClass18processStateChangeEv+0x72>
     f9e:	ce 01       	movw	r24, r28
     fa0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZN10TimerClass7getTimeEv>
     fa4:	9d a7       	std	Y+45, r25	; 0x2d
     fa6:	8c a7       	std	Y+44, r24	; 0x2c
     fa8:	ce 01       	movw	r24, r28
     faa:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN10TimerClass10resetTimerEv>
     fae:	ce 01       	movw	r24, r28
     fb0:	0e 94 e5 09 	call	0x13ca	; 0x13ca <_ZN10TimerClass18resetCallbackTimerEv>
     fb4:	1a a2       	std	Y+34, r1	; 0x22
     fb6:	8c a5       	ldd	r24, Y+44	; 0x2c
     fb8:	9d a5       	ldd	r25, Y+45	; 0x2d
     fba:	0b 97       	sbiw	r24, 0x0b	; 11
     fbc:	8d 34       	cpi	r24, 0x4D	; 77
     fbe:	92 40       	sbci	r25, 0x02	; 2
     fc0:	98 f5       	brcc	.+102    	; 0x1028 <_ZN11SwitchClass18processStateChangeEv+0xf2>
     fc2:	8c a1       	ldd	r24, Y+36	; 0x24
     fc4:	81 11       	cpse	r24, r1
     fc6:	17 c0       	rjmp	.+46     	; 0xff6 <_ZN11SwitchClass18processStateChangeEv+0xc0>
     fc8:	8d a1       	ldd	r24, Y+37	; 0x25
     fca:	81 11       	cpse	r24, r1
     fcc:	2f c0       	rjmp	.+94     	; 0x102c <_ZN11SwitchClass18processStateChangeEv+0xf6>
     fce:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fd0:	88 23       	and	r24, r24
     fd2:	59 f0       	breq	.+22     	; 0xfea <_ZN11SwitchClass18processStateChangeEv+0xb4>
     fd4:	27 ee       	ldi	r18, 0xE7	; 231
     fd6:	36 e0       	ldi	r19, 0x06	; 6
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	64 e6       	ldi	r22, 0x64	; 100
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	8b a3       	std	Y+35, r24	; 0x23
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <_ZN11SwitchClass18processStateChangeEv+0xba>
     fea:	ce 01       	movw	r24, r28
     fec:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZN11SwitchClass18doubleWaitCompleteEv>
     ff0:	8c a1       	ldd	r24, Y+36	; 0x24
     ff2:	88 23       	and	r24, r24
     ff4:	09 f1       	breq	.+66     	; 0x1038 <_ZN11SwitchClass18processStateChangeEv+0x102>
     ff6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
     ffa:	88 23       	and	r24, r24
     ffc:	61 f0       	breq	.+24     	; 0x1016 <_ZN11SwitchClass18processStateChangeEv+0xe0>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1004:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <_ZN11SwitchClass17AllDoublePressPtrE>
    1008:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <_ZN11SwitchClass17AllDoublePressPtrE+0x1>
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	61 f0       	breq	.+24     	; 0x1028 <_ZN11SwitchClass18processStateChangeEv+0xf2>
    1010:	8e a1       	ldd	r24, Y+38	; 0x26
    1012:	09 95       	icall
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <_ZN11SwitchClass18processStateChangeEv+0xf2>
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    101c:	ea 89       	ldd	r30, Y+18	; 0x12
    101e:	fb 89       	ldd	r31, Y+19	; 0x13
    1020:	30 97       	sbiw	r30, 0x00	; 0
    1022:	11 f0       	breq	.+4      	; 0x1028 <_ZN11SwitchClass18processStateChangeEv+0xf2>
    1024:	8e a1       	ldd	r24, Y+38	; 0x26
    1026:	09 95       	icall
    1028:	8d a1       	ldd	r24, Y+37	; 0x25
    102a:	81 11       	cpse	r24, r1
    102c:	1d a2       	std	Y+37, r1	; 0x25
    102e:	8c a1       	ldd	r24, Y+36	; 0x24
    1030:	88 23       	and	r24, r24
    1032:	29 f0       	breq	.+10     	; 0x103e <_ZN11SwitchClass18processStateChangeEv+0x108>
    1034:	1c a2       	std	Y+36, r1	; 0x24
    1036:	03 c0       	rjmp	.+6      	; 0x103e <_ZN11SwitchClass18processStateChangeEv+0x108>
    1038:	8d a1       	ldd	r24, Y+37	; 0x25
    103a:	81 11       	cpse	r24, r1
    103c:	f7 cf       	rjmp	.-18     	; 0x102c <_ZN11SwitchClass18processStateChangeEv+0xf6>
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <_ZN11SwitchClass25callAllProcessStateChangeEv>:
    1044:	cf 93       	push	r28
    1046:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    104a:	88 23       	and	r24, r24
    104c:	91 f0       	breq	.+36     	; 0x1072 <_ZN11SwitchClass25callAllProcessStateChangeEv+0x2e>
    104e:	c0 e0       	ldi	r28, 0x00	; 0
    1050:	ec 2f       	mov	r30, r28
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	e0 55       	subi	r30, 0x50	; 80
    105a:	fe 4f       	sbci	r31, 0xFE	; 254
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	11 f0       	breq	.+4      	; 0x1068 <_ZN11SwitchClass25callAllProcessStateChangeEv+0x24>
    1064:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN11SwitchClass18processStateChangeEv>
    1068:	cf 5f       	subi	r28, 0xFF	; 255
    106a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    106e:	c8 17       	cp	r28, r24
    1070:	78 f3       	brcs	.-34     	; 0x1050 <_ZN11SwitchClass25callAllProcessStateChangeEv+0xc>
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <_ZN11SwitchClass16longWaitCompleteEv>:
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	ec 01       	movw	r28, r24
    107c:	18 a2       	std	Y+32, r1	; 0x20
    107e:	1b a2       	std	Y+35, r1	; 0x23
    1080:	1c a2       	std	Y+36, r1	; 0x24
    1082:	8d a1       	ldd	r24, Y+37	; 0x25
    1084:	88 23       	and	r24, r24
    1086:	89 f1       	breq	.+98     	; 0x10ea <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1088:	ce 01       	movw	r24, r28
    108a:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZN11SwitchClass16updatePinBuffersEv>
    108e:	ce 01       	movw	r24, r28
    1090:	0e 94 1c 07 	call	0xe38	; 0xe38 <_ZN11SwitchClass10pollSwitchEv>
    1094:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1096:	81 11       	cpse	r24, r1
    1098:	28 c0       	rjmp	.+80     	; 0x10ea <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    109a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    109c:	81 11       	cpse	r24, r1
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <_ZN11SwitchClass16longWaitCompleteEv+0x32>
    10a0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN11SwitchClass20AllContinuousLong_ENE>
    10a4:	88 23       	and	r24, r24
    10a6:	09 f1       	breq	.+66     	; 0x10ea <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10a8:	2f ea       	ldi	r18, 0xAF	; 175
    10aa:	38 e0       	ldi	r19, 0x08	; 8
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	66 e4       	ldi	r22, 0x46	; 70
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	ce 01       	movw	r24, r28
    10b4:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    10b8:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
    10bc:	88 23       	and	r24, r24
    10be:	61 f0       	breq	.+24     	; 0x10d8 <_ZN11SwitchClass16longWaitCompleteEv+0x62>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    10c6:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <_ZN11SwitchClass25AllContinuousLongPressPtrE>
    10ca:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <_ZN11SwitchClass25AllContinuousLongPressPtrE+0x1>
    10ce:	30 97       	sbiw	r30, 0x00	; 0
    10d0:	61 f0       	breq	.+24     	; 0x10ea <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10d2:	8e a1       	ldd	r24, Y+38	; 0x26
    10d4:	09 95       	icall
    10d6:	09 c0       	rjmp	.+18     	; 0x10ea <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    10de:	ec 89       	ldd	r30, Y+20	; 0x14
    10e0:	fd 89       	ldd	r31, Y+21	; 0x15
    10e2:	30 97       	sbiw	r30, 0x00	; 0
    10e4:	11 f0       	breq	.+4      	; 0x10ea <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10e6:	8e a1       	ldd	r24, Y+38	; 0x26
    10e8:	09 95       	icall
    10ea:	8a a1       	ldd	r24, Y+34	; 0x22
    10ec:	88 23       	and	r24, r24
    10ee:	a1 f1       	breq	.+104    	; 0x1158 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    10f0:	ce 01       	movw	r24, r28
    10f2:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZN11SwitchClass16updatePinBuffersEv>
    10f6:	ce 01       	movw	r24, r28
    10f8:	0e 94 1c 07 	call	0xe38	; 0xe38 <_ZN11SwitchClass10pollSwitchEv>
    10fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10fe:	81 11       	cpse	r24, r1
    1100:	2b c0       	rjmp	.+86     	; 0x1158 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1102:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1104:	81 11       	cpse	r24, r1
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <_ZN11SwitchClass16longWaitCompleteEv+0x9a>
    1108:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN11SwitchClass10AllLong_ENE>
    110c:	88 23       	and	r24, r24
    110e:	21 f1       	breq	.+72     	; 0x1158 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1110:	1a a2       	std	Y+34, r1	; 0x22
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	8d a3       	std	Y+37, r24	; 0x25
    1116:	2f ea       	ldi	r18, 0xAF	; 175
    1118:	38 e0       	ldi	r19, 0x08	; 8
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	62 e3       	ldi	r22, 0x32	; 50
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	ce 01       	movw	r24, r28
    1122:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    1126:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
    112a:	88 23       	and	r24, r24
    112c:	61 f0       	breq	.+24     	; 0x1146 <_ZN11SwitchClass16longWaitCompleteEv+0xd0>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1134:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <_ZN11SwitchClass15AllLongPressPtrE>
    1138:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <_ZN11SwitchClass15AllLongPressPtrE+0x1>
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	61 f0       	breq	.+24     	; 0x1158 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1140:	8e a1       	ldd	r24, Y+38	; 0x26
    1142:	09 95       	icall
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    114c:	e8 89       	ldd	r30, Y+16	; 0x10
    114e:	f9 89       	ldd	r31, Y+17	; 0x11
    1150:	30 97       	sbiw	r30, 0x00	; 0
    1152:	11 f0       	breq	.+4      	; 0x1158 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1154:	8e a1       	ldd	r24, Y+38	; 0x26
    1156:	09 95       	icall
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	08 95       	ret

0000115e <_ZN11SwitchClass20callAllOjectLongWaitEh>:
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    1166:	99 23       	and	r25, r25
    1168:	c1 f0       	breq	.+48     	; 0x119a <_ZN11SwitchClass20callAllOjectLongWaitEh+0x3c>
    116a:	d8 2f       	mov	r29, r24
    116c:	c0 e0       	ldi	r28, 0x00	; 0
    116e:	ec 2f       	mov	r30, r28
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	ee 0f       	add	r30, r30
    1174:	ff 1f       	adc	r31, r31
    1176:	e0 55       	subi	r30, 0x50	; 80
    1178:	fe 4f       	sbci	r31, 0xFE	; 254
    117a:	01 90       	ld	r0, Z+
    117c:	f0 81       	ld	r31, Z
    117e:	e0 2d       	mov	r30, r0
    1180:	91 a5       	ldd	r25, Z+41	; 0x29
    1182:	9d 13       	cpse	r25, r29
    1184:	05 c0       	rjmp	.+10     	; 0x1190 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    1186:	30 97       	sbiw	r30, 0x00	; 0
    1188:	19 f0       	breq	.+6      	; 0x1190 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    118a:	cf 01       	movw	r24, r30
    118c:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN11SwitchClass16longWaitCompleteEv>
    1190:	cf 5f       	subi	r28, 0xFF	; 255
    1192:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    1196:	c9 17       	cp	r28, r25
    1198:	50 f3       	brcs	.-44     	; 0x116e <_ZN11SwitchClass20callAllOjectLongWaitEh+0x10>
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <__vector_1>:
}

ISR(INT0_vect){
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	2f 93       	push	r18
    11ac:	3f 93       	push	r19
    11ae:	4f 93       	push	r20
    11b0:	5f 93       	push	r21
    11b2:	6f 93       	push	r22
    11b4:	7f 93       	push	r23
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
	Switch.PinBuffer[0] = PINB;
    11c2:	83 b1       	in	r24, 0x03	; 3
    11c4:	eb ea       	ldi	r30, 0xAB	; 171
    11c6:	f1 e0       	ldi	r31, 0x01	; 1
    11c8:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    11ca:	86 b1       	in	r24, 0x06	; 6
    11cc:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    11ce:	89 b1       	in	r24, 0x09	; 9
    11d0:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    11d2:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    11dc:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    11e0:	ff 91       	pop	r31
    11e2:	ef 91       	pop	r30
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	9f 91       	pop	r25
    11ea:	8f 91       	pop	r24
    11ec:	7f 91       	pop	r23
    11ee:	6f 91       	pop	r22
    11f0:	5f 91       	pop	r21
    11f2:	4f 91       	pop	r20
    11f4:	3f 91       	pop	r19
    11f6:	2f 91       	pop	r18
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	0f 90       	pop	r0
    11fe:	1f 90       	pop	r1
    1200:	18 95       	reti

00001202 <__vector_2>:

ISR(INT1_vect){
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	2f 93       	push	r18
    120e:	3f 93       	push	r19
    1210:	4f 93       	push	r20
    1212:	5f 93       	push	r21
    1214:	6f 93       	push	r22
    1216:	7f 93       	push	r23
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25
    121c:	af 93       	push	r26
    121e:	bf 93       	push	r27
    1220:	ef 93       	push	r30
    1222:	ff 93       	push	r31
	wakeUp();
    1224:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    122e:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    1232:	ff 91       	pop	r31
    1234:	ef 91       	pop	r30
    1236:	bf 91       	pop	r27
    1238:	af 91       	pop	r26
    123a:	9f 91       	pop	r25
    123c:	8f 91       	pop	r24
    123e:	7f 91       	pop	r23
    1240:	6f 91       	pop	r22
    1242:	5f 91       	pop	r21
    1244:	4f 91       	pop	r20
    1246:	3f 91       	pop	r19
    1248:	2f 91       	pop	r18
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f 90       	pop	r0
    1250:	1f 90       	pop	r1
    1252:	18 95       	reti

00001254 <__vector_3>:

ISR(PCINT0_vect){
    1254:	1f 92       	push	r1
    1256:	0f 92       	push	r0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	0f 92       	push	r0
    125c:	11 24       	eor	r1, r1
    125e:	2f 93       	push	r18
    1260:	3f 93       	push	r19
    1262:	4f 93       	push	r20
    1264:	5f 93       	push	r21
    1266:	6f 93       	push	r22
    1268:	7f 93       	push	r23
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	af 93       	push	r26
    1270:	bf 93       	push	r27
    1272:	ef 93       	push	r30
    1274:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_B);
	Switch.PinBuffer[0] = PINB;
    1276:	83 b1       	in	r24, 0x03	; 3
    1278:	eb ea       	ldi	r30, 0xAB	; 171
    127a:	f1 e0       	ldi	r31, 0x01	; 1
    127c:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    127e:	86 b1       	in	r24, 0x06	; 6
    1280:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1282:	89 b1       	in	r24, 0x09	; 9
    1284:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1286:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1290:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    1294:	ff 91       	pop	r31
    1296:	ef 91       	pop	r30
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <__vector_4>:

ISR(PCINT1_vect){
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	4f 93       	push	r20
    12c6:	5f 93       	push	r21
    12c8:	6f 93       	push	r22
    12ca:	7f 93       	push	r23
    12cc:	8f 93       	push	r24
    12ce:	9f 93       	push	r25
    12d0:	af 93       	push	r26
    12d2:	bf 93       	push	r27
    12d4:	ef 93       	push	r30
    12d6:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_C);
	Switch.PinBuffer[0] = PINB;
    12d8:	83 b1       	in	r24, 0x03	; 3
    12da:	eb ea       	ldi	r30, 0xAB	; 171
    12dc:	f1 e0       	ldi	r31, 0x01	; 1
    12de:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    12e0:	86 b1       	in	r24, 0x06	; 6
    12e2:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    12e4:	89 b1       	in	r24, 0x09	; 9
    12e6:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    12e8:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    12f2:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
	Switch.pinStateChanged();
}
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <__vector_5>:

ISR(PCINT2_vect){
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
    1322:	2f 93       	push	r18
    1324:	3f 93       	push	r19
    1326:	4f 93       	push	r20
    1328:	5f 93       	push	r21
    132a:	6f 93       	push	r22
    132c:	7f 93       	push	r23
    132e:	8f 93       	push	r24
    1330:	9f 93       	push	r25
    1332:	af 93       	push	r26
    1334:	bf 93       	push	r27
    1336:	ef 93       	push	r30
    1338:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_D);
	Switch.PinBuffer[0] = PINB;
    133a:	83 b1       	in	r24, 0x03	; 3
    133c:	eb ea       	ldi	r30, 0xAB	; 171
    133e:	f1 e0       	ldi	r31, 0x01	; 1
    1340:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1342:	86 b1       	in	r24, 0x06	; 6
    1344:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1346:	89 b1       	in	r24, 0x09	; 9
    1348:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    134a:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1354:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    1358:	ff 91       	pop	r31
    135a:	ef 91       	pop	r30
    135c:	bf 91       	pop	r27
    135e:	af 91       	pop	r26
    1360:	9f 91       	pop	r25
    1362:	8f 91       	pop	r24
    1364:	7f 91       	pop	r23
    1366:	6f 91       	pop	r22
    1368:	5f 91       	pop	r21
    136a:	4f 91       	pop	r20
    136c:	3f 91       	pop	r19
    136e:	2f 91       	pop	r18
    1370:	0f 90       	pop	r0
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	0f 90       	pop	r0
    1376:	1f 90       	pop	r1
    1378:	18 95       	reti

0000137a <_ZN10TimerClass5beginEv>:
}


uint64_t TimerClass::millis(){
	return Time;
}
    137a:	60 e8       	ldi	r22, 0x80	; 128
    137c:	7e e3       	ldi	r23, 0x3E	; 62
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	0e 94 01 01 	call	0x202	; 0x202 <_Z11Init_CTC_T1hj>
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <_ZN10TimerClass1iE>
    138a:	08 95       	ret

0000138c <_ZN10TimerClass15initializeTimerEv>:
    138c:	dc 01       	movw	r26, r24
    138e:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <_ZN10TimerClass1iE>
    1392:	e9 2f       	mov	r30, r25
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	eb 53       	subi	r30, 0x3B	; 59
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	b1 83       	std	Z+1, r27	; 0x01
    13a0:	a0 83       	st	Z, r26
    13a2:	15 96       	adiw	r26, 0x05	; 5
    13a4:	9c 93       	st	X, r25
    13a6:	9f 5f       	subi	r25, 0xFF	; 255
    13a8:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <_ZN10TimerClass1iE>
    13ac:	08 95       	ret

000013ae <_ZN10TimerClass15setCallBackTimeEjhPFvhE>:
    13ae:	fc 01       	movw	r30, r24
    13b0:	71 83       	std	Z+1, r23	; 0x01
    13b2:	60 83       	st	Z, r22
    13b4:	73 83       	std	Z+3, r23	; 0x03
    13b6:	62 83       	std	Z+2, r22	; 0x02
    13b8:	35 87       	std	Z+13, r19	; 0x0d
    13ba:	24 87       	std	Z+12, r18	; 0x0c
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	83 87       	std	Z+11, r24	; 0x0b
    13c0:	44 83       	std	Z+4, r20	; 0x04
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    13c8:	08 95       	ret

000013ca <_ZN10TimerClass18resetCallbackTimerEv>:
    13ca:	fc 01       	movw	r30, r24
    13cc:	13 86       	std	Z+11, r1	; 0x0b
    13ce:	11 82       	std	Z+1, r1	; 0x01
    13d0:	10 82       	st	Z, r1
    13d2:	08 95       	ret

000013d4 <_ZN10TimerClass15getCallBackTimeEv>:
    13d4:	fc 01       	movw	r30, r24
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	20 81       	ld	r18, Z
    13dc:	31 81       	ldd	r19, Z+1	; 0x01
    13de:	82 1b       	sub	r24, r18
    13e0:	93 0b       	sbc	r25, r19
    13e2:	08 95       	ret

000013e4 <_ZN10TimerClass7setTimeEj>:
    13e4:	fc 01       	movw	r30, r24
    13e6:	77 83       	std	Z+7, r23	; 0x07
    13e8:	66 83       	std	Z+6, r22	; 0x06
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	82 87       	std	Z+10, r24	; 0x0a
    13ee:	71 87       	std	Z+9, r23	; 0x09
    13f0:	60 87       	std	Z+8, r22	; 0x08
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    13f8:	08 95       	ret

000013fa <_ZN10TimerClass7getTimeEv>:
    13fa:	fc 01       	movw	r30, r24
    13fc:	80 85       	ldd	r24, Z+8	; 0x08
    13fe:	91 85       	ldd	r25, Z+9	; 0x09
    1400:	26 81       	ldd	r18, Z+6	; 0x06
    1402:	37 81       	ldd	r19, Z+7	; 0x07
    1404:	82 1b       	sub	r24, r18
    1406:	93 0b       	sbc	r25, r19
    1408:	08 95       	ret

0000140a <_ZN10TimerClass10resetTimerEv>:
    140a:	fc 01       	movw	r30, r24
    140c:	17 82       	std	Z+7, r1	; 0x07
    140e:	16 82       	std	Z+6, r1	; 0x06
    1410:	12 86       	std	Z+10, r1	; 0x0a
    1412:	08 95       	ret

00001414 <_ZN10TimerClass11milliPassedEv>:

void TimerClass::milliPassed(){
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
	if(Count_EN){
    141a:	8b 85       	ldd	r24, Y+11	; 0x0b
    141c:	88 23       	and	r24, r24
    141e:	e1 f0       	breq	.+56     	; 0x1458 <_ZN10TimerClass11milliPassedEv+0x44>
		#ifdef DEBUG_TIMER
		//printChar('T');
		#endif
		if(Count)
    1420:	88 81       	ld	r24, Y
    1422:	99 81       	ldd	r25, Y+1	; 0x01
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	29 f0       	breq	.+10     	; 0x1432 <_ZN10TimerClass11milliPassedEv+0x1e>
		Count -= 1;
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	99 83       	std	Y+1, r25	; 0x01
    142c:	88 83       	st	Y, r24
		if(!Count){
    142e:	89 2b       	or	r24, r25
    1430:	99 f4       	brne	.+38     	; 0x1458 <_ZN10TimerClass11milliPassedEv+0x44>
			if(Mode == TIMER_MODE_REPEAT){
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	29 f4       	brne	.+10     	; 0x1442 <_ZN10TimerClass11milliPassedEv+0x2e>
				Count = Count_Save;
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	9b 81       	ldd	r25, Y+3	; 0x03
    143c:	99 83       	std	Y+1, r25	; 0x01
    143e:	88 83       	st	Y, r24
    1440:	05 c0       	rjmp	.+10     	; 0x144c <_ZN10TimerClass11milliPassedEv+0x38>
			}
			if(Mode == TIMER_MODE_ONCE){
    1442:	81 11       	cpse	r24, r1
    1444:	03 c0       	rjmp	.+6      	; 0x144c <_ZN10TimerClass11milliPassedEv+0x38>
				Count_EN = 0;
    1446:	1b 86       	std	Y+11, r1	; 0x0b
				Count = 0;
    1448:	19 82       	std	Y+1, r1	; 0x01
    144a:	18 82       	st	Y, r1
			}
			if(CallBackPtr != NULL){
    144c:	ec 85       	ldd	r30, Y+12	; 0x0c
    144e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1450:	30 97       	sbiw	r30, 0x00	; 0
    1452:	11 f0       	breq	.+4      	; 0x1458 <_ZN10TimerClass11milliPassedEv+0x44>
				#ifdef DEBUG_TIMER
				printStringCRNL("Timer Done : ");
				printNumber(Timer_ID);
				#endif
				//allowSleep(1);
				CallBackPtr(Timer_ID);
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	09 95       	icall
			}
		}
	}
	if(NCount_EN){
    1458:	8a 85       	ldd	r24, Y+10	; 0x0a
    145a:	88 23       	and	r24, r24
    145c:	51 f0       	breq	.+20     	; 0x1472 <_ZN10TimerClass11milliPassedEv+0x5e>
		if(NCount)
    145e:	8e 81       	ldd	r24, Y+6	; 0x06
    1460:	9f 81       	ldd	r25, Y+7	; 0x07
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	29 f0       	breq	.+10     	; 0x1470 <_ZN10TimerClass11milliPassedEv+0x5c>
		NCount -= 1;
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	9f 83       	std	Y+7, r25	; 0x07
    146a:	8e 83       	std	Y+6, r24	; 0x06
		if(!NCount){
    146c:	89 2b       	or	r24, r25
    146e:	09 f4       	brne	.+2      	; 0x1472 <_ZN10TimerClass11milliPassedEv+0x5e>
			NCount_EN = 0;
    1470:	1a 86       	std	Y+10, r1	; 0x0a
		}
	}
}
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <_ZN10TimerClass19callAllTimerObjectsEv>:

void TimerClass::callAllTimerObjects(){
    1478:	cf 93       	push	r28
	for(uint8_t a = 0; a < i; a += 1){
    147a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZN10TimerClass1iE>
    147e:	88 23       	and	r24, r24
    1480:	91 f0       	breq	.+36     	; 0x14a6 <_ZN10TimerClass19callAllTimerObjectsEv+0x2e>
    1482:	c0 e0       	ldi	r28, 0x00	; 0
		if(Timers[a] != NULL)
    1484:	ec 2f       	mov	r30, r28
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	eb 53       	subi	r30, 0x3B	; 59
    148e:	fe 4f       	sbci	r31, 0xFE	; 254
    1490:	80 81       	ld	r24, Z
    1492:	91 81       	ldd	r25, Z+1	; 0x01
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	11 f0       	breq	.+4      	; 0x149c <_ZN10TimerClass19callAllTimerObjectsEv+0x24>
		Timers[a]->milliPassed();
    1498:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN10TimerClass11milliPassedEv>
		}
	}
}

void TimerClass::callAllTimerObjects(){
	for(uint8_t a = 0; a < i; a += 1){
    149c:	cf 5f       	subi	r28, 0xFF	; 255
    149e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZN10TimerClass1iE>
    14a2:	c8 17       	cp	r28, r24
    14a4:	78 f3       	brcs	.-34     	; 0x1484 <_ZN10TimerClass19callAllTimerObjectsEv+0xc>
		if(Timers[a] != NULL)
		Timers[a]->milliPassed();
	}
}
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <_ZN10TimerClass10getTimerIDEv>:

uint8_t TimerClass::getTimerID(){
	return Timer_ID;
}
    14aa:	fc 01       	movw	r30, r24
    14ac:	85 81       	ldd	r24, Z+5	; 0x05
    14ae:	08 95       	ret

000014b0 <__vector_11>:



ISR(TIMER1_COMPA_vect){
    14b0:	1f 92       	push	r1
    14b2:	0f 92       	push	r0
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
	//printChar('I');
	milliHappened();
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z13milliHappenedv>
	Timer.Time += 1;
    14d6:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <_ZN10TimerClass4TimeE>
    14da:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <_ZN10TimerClass4TimeE+0x1>
    14de:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <_ZN10TimerClass4TimeE+0x2>
    14e2:	50 91 c0 01 	lds	r21, 0x01C0	; 0x8001c0 <_ZN10TimerClass4TimeE+0x3>
    14e6:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <_ZN10TimerClass4TimeE+0x4>
    14ea:	70 91 c2 01 	lds	r23, 0x01C2	; 0x8001c2 <_ZN10TimerClass4TimeE+0x5>
    14ee:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <_ZN10TimerClass4TimeE+0x6>
    14f2:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <_ZN10TimerClass4TimeE+0x7>
    14f6:	a1 e0       	ldi	r26, 0x01	; 1
    14f8:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__adddi3_s8>
    14fc:	20 93 bd 01 	sts	0x01BD, r18	; 0x8001bd <_ZN10TimerClass4TimeE>
    1500:	30 93 be 01 	sts	0x01BE, r19	; 0x8001be <_ZN10TimerClass4TimeE+0x1>
    1504:	40 93 bf 01 	sts	0x01BF, r20	; 0x8001bf <_ZN10TimerClass4TimeE+0x2>
    1508:	50 93 c0 01 	sts	0x01C0, r21	; 0x8001c0 <_ZN10TimerClass4TimeE+0x3>
    150c:	60 93 c1 01 	sts	0x01C1, r22	; 0x8001c1 <_ZN10TimerClass4TimeE+0x4>
    1510:	70 93 c2 01 	sts	0x01C2, r23	; 0x8001c2 <_ZN10TimerClass4TimeE+0x5>
    1514:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <_ZN10TimerClass4TimeE+0x6>
    1518:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <_ZN10TimerClass4TimeE+0x7>
	Timer.callAllTimerObjects();
    151c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN10TimerClass19callAllTimerObjectsEv>
	//printChar('O');
}
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <_Z13switchPressedh>:
void portStateChange(uint8_t PortNo){
	printStringCRNL("Pin state changed");
	if(PortNo == PORT_C){
		setPinState(PORT_C, 2, getPinState(PORT_C, 0));
	}
}
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <SwitchFlag>
    1548:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <SwitchID>
    154c:	08 95       	ret

0000154e <_Z9timerDoneh>:
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Timer1_Flag>
    1554:	43 99       	sbic	0x08, 3	; 8
    1556:	43 98       	cbi	0x08, 3	; 8
    1558:	08 95       	ret

0000155a <_Z17setAllSocketStateb>:
    155a:	cf 93       	push	r28
    155c:	c8 2f       	mov	r28, r24
    155e:	48 2f       	mov	r20, r24
    1560:	63 e0       	ldi	r22, 0x03	; 3
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    1568:	4c 2f       	mov	r20, r28
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    1572:	4c 2f       	mov	r20, r28
    1574:	65 e0       	ldi	r22, 0x05	; 5
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    157c:	4c 2f       	mov	r20, r28
    157e:	64 e0       	ldi	r22, 0x04	; 4
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <_Z14setSocketStatehb>:
    158a:	82 30       	cpi	r24, 0x02	; 2
    158c:	79 f0       	breq	.+30     	; 0x15ac <_Z14setSocketStatehb+0x22>
    158e:	18 f4       	brcc	.+6      	; 0x1596 <_Z14setSocketStatehb+0xc>
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	31 f0       	breq	.+12     	; 0x15a0 <_Z14setSocketStatehb+0x16>
    1594:	08 95       	ret
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	79 f0       	breq	.+30     	; 0x15b8 <_Z14setSocketStatehb+0x2e>
    159a:	84 30       	cpi	r24, 0x04	; 4
    159c:	99 f0       	breq	.+38     	; 0x15c4 <_Z14setSocketStatehb+0x3a>
    159e:	08 95       	ret
    15a0:	46 2f       	mov	r20, r22
    15a2:	63 e0       	ldi	r22, 0x03	; 3
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    15aa:	08 95       	ret
    15ac:	46 2f       	mov	r20, r22
    15ae:	62 e0       	ldi	r22, 0x02	; 2
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    15b6:	08 95       	ret
    15b8:	46 2f       	mov	r20, r22
    15ba:	65 e0       	ldi	r22, 0x05	; 5
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    15c2:	08 95       	ret
    15c4:	46 2f       	mov	r20, r22
    15c6:	64 e0       	ldi	r22, 0x04	; 4
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
    15ce:	08 95       	ret

000015d0 <_Z14getSocketStateh>:
    15d0:	82 30       	cpi	r24, 0x02	; 2
    15d2:	71 f0       	breq	.+28     	; 0x15f0 <_Z14getSocketStateh+0x20>
    15d4:	18 f4       	brcc	.+6      	; 0x15dc <_Z14getSocketStateh+0xc>
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	31 f0       	breq	.+12     	; 0x15e6 <_Z14getSocketStateh+0x16>
    15da:	19 c0       	rjmp	.+50     	; 0x160e <_Z14getSocketStateh+0x3e>
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	69 f0       	breq	.+26     	; 0x15fa <_Z14getSocketStateh+0x2a>
    15e0:	84 30       	cpi	r24, 0x04	; 4
    15e2:	81 f0       	breq	.+32     	; 0x1604 <_Z14getSocketStateh+0x34>
    15e4:	14 c0       	rjmp	.+40     	; 0x160e <_Z14getSocketStateh+0x3e>
    15e6:	63 e0       	ldi	r22, 0x03	; 3
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z11getPinStatehh>
    15ee:	08 95       	ret
    15f0:	62 e0       	ldi	r22, 0x02	; 2
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z11getPinStatehh>
    15f8:	08 95       	ret
    15fa:	65 e0       	ldi	r22, 0x05	; 5
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z11getPinStatehh>
    1602:	08 95       	ret
    1604:	64 e0       	ldi	r22, 0x04	; 4
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z11getPinStatehh>
    160c:	08 95       	ret
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	08 95       	ret

00001612 <_Z8runSetupv>:

void runSetup(){
	
	USART_Init(MYUBRR);
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 0c 02 	call	0x418	; 0x418 <_Z10USART_Initj>
	//Init_CTC_T1(2,2000);
	setPinDirection(PORT_C, 2, OUTPUT);
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	62 e0       	ldi	r22, 0x02	; 2
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_C, 3, OUTPUT);
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	63 e0       	ldi	r22, 0x03	; 3
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 2, OUTPUT);
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	62 e0       	ldi	r22, 0x02	; 2
    1632:	82 e0       	ldi	r24, 0x02	; 2
    1634:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 3, OUTPUT);
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	63 e0       	ldi	r22, 0x03	; 3
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 4, OUTPUT);
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	64 e0       	ldi	r22, 0x04	; 4
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 5, OUTPUT);
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	65 e0       	ldi	r22, 0x05	; 5
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	setPinState(PORT_D, 2, LOW);
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	62 e0       	ldi	r22, 0x02	; 2
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_D, 3, LOW);
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	63 e0       	ldi	r22, 0x03	; 3
    1664:	82 e0       	ldi	r24, 0x02	; 2
    1666:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_D, 4, LOW);
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	64 e0       	ldi	r22, 0x04	; 4
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_D, 5, LOW);
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	65 e0       	ldi	r22, 0x05	; 5
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinState(PORT_C, 2, LOW);
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	62 e0       	ldi	r22, 0x02	; 2
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	0e 94 10 01 	call	0x220	; 0x220 <_Z11setPinStatehhb>
	setPinDirection(PORT_C, 0, INPUT);
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z15setPinDirectionhhb>
	SPI_MasterInit();
    1692:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
    1696:	08 95       	ret

00001698 <main>:
volatile bool newSPIData, Timer1_Flag, SwitchFlag = false;
uint8_t Socket, State, Payload, StateAll, CurrentState;
TimerClass Timer1;
SwitchClass S1, S2, S3, S4;
int main(void)
{
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	29 97       	sbiw	r28, 0x09	; 9
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    runSetup();
    16ac:	0e 94 09 0b 	call	0x1612	; 0x1612 <_Z8runSetupv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16b0:	2f ef       	ldi	r18, 0xFF	; 255
    16b2:	89 e6       	ldi	r24, 0x69	; 105
    16b4:	98 e1       	ldi	r25, 0x18	; 24
    16b6:	21 50       	subi	r18, 0x01	; 1
    16b8:	80 40       	sbci	r24, 0x00	; 0
    16ba:	90 40       	sbci	r25, 0x00	; 0
    16bc:	e1 f7       	brne	.-8      	; 0x16b6 <main+0x1e>
    16be:	00 c0       	rjmp	.+0      	; 0x16c0 <main+0x28>
    16c0:	00 00       	nop
	_delay_ms(500);
	Notify(PSTR("Powering on..."));
    16c2:	8d e4       	ldi	r24, 0x4D	; 77
    16c4:	91 e0       	ldi	r25, 0x01	; 1
    16c6:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
	NRF24L01 Radio(1,1,1);
    16ca:	21 e0       	ldi	r18, 0x01	; 1
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	ce 01       	movw	r24, r28
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <_ZN8NRF24L01C1Ehhb>
	Radio.enableReceiveAddress(2, true);
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN8NRF24L0120enableReceiveAddressEhb>
	Radio.enableReceiveAddress(3, true);
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	63 e0       	ldi	r22, 0x03	; 3
    16e8:	ce 01       	movw	r24, r28
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN8NRF24L0120enableReceiveAddressEhb>
	Radio.enableReceiveAddress(4, true);
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	64 e0       	ldi	r22, 0x04	; 4
    16f4:	ce 01       	movw	r24, r28
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN8NRF24L0120enableReceiveAddressEhb>
	Radio.enableReceiveAddress(5, true);
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	65 e0       	ldi	r22, 0x05	; 5
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN8NRF24L0120enableReceiveAddressEhb>
	Radio.enableDPLForRXPipe(0, true);
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	ce 01       	movw	r24, r28
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN8NRF24L0118enableDPLForRXPipeEhb>
	Radio.enableDPLForRXPipe(1, true);
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	ce 01       	movw	r24, r28
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN8NRF24L0118enableDPLForRXPipeEhb>
	Radio.enableDPLForRXPipe(2, true);
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	62 e0       	ldi	r22, 0x02	; 2
    1724:	ce 01       	movw	r24, r28
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN8NRF24L0118enableDPLForRXPipeEhb>
	Radio.enableDPLForRXPipe(3, true);
    172c:	41 e0       	ldi	r20, 0x01	; 1
    172e:	63 e0       	ldi	r22, 0x03	; 3
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN8NRF24L0118enableDPLForRXPipeEhb>
	Radio.enableDPLForRXPipe(4, true);
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	64 e0       	ldi	r22, 0x04	; 4
    173c:	ce 01       	movw	r24, r28
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN8NRF24L0118enableDPLForRXPipeEhb>
	Radio.enableDPLForRXPipe(5, true);
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	65 e0       	ldi	r22, 0x05	; 5
    1748:	ce 01       	movw	r24, r28
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN8NRF24L0118enableDPLForRXPipeEhb>
	Radio.setReceiveAddress(0xEABABABAC1, 0);
    1750:	e1 2c       	mov	r14, r1
    1752:	01 ec       	ldi	r16, 0xC1	; 193
    1754:	1a eb       	ldi	r17, 0xBA	; 186
    1756:	2a eb       	ldi	r18, 0xBA	; 186
    1758:	3a eb       	ldi	r19, 0xBA	; 186
    175a:	4a ee       	ldi	r20, 0xEA	; 234
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN8NRF24L0117setReceiveAddressEyh>
	Radio.setReceiveAddress(0xEABABABAC2, 1);
    176a:	ee 24       	eor	r14, r14
    176c:	e3 94       	inc	r14
    176e:	02 ec       	ldi	r16, 0xC2	; 194
    1770:	2a eb       	ldi	r18, 0xBA	; 186
    1772:	3a eb       	ldi	r19, 0xBA	; 186
    1774:	4a ee       	ldi	r20, 0xEA	; 234
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	ce 01       	movw	r24, r28
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN8NRF24L0117setReceiveAddressEyh>
	Radio.powerON(true);
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_ZN8NRF24L017powerONEb>
	initSPISlave();
    178e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z12initSPISlavev>
	enableSPIInterrupt(true);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18enableSPIInterruptb>
	sei();
    1798:	78 94       	sei
	Timer1.begin();
    179a:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN10TimerClass5beginEv>
	Timer1.initializeTimer();
    179e:	89 eb       	ldi	r24, 0xB9	; 185
    17a0:	92 e0       	ldi	r25, 0x02	; 2
    17a2:	0e 94 c6 09 	call	0x138c	; 0x138c <_ZN10TimerClass15initializeTimerEv>
	Timer1.setCallBackTime(100, 0, timerDone);
    17a6:	27 ea       	ldi	r18, 0xA7	; 167
    17a8:	3a e0       	ldi	r19, 0x0A	; 10
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	64 e6       	ldi	r22, 0x64	; 100
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	89 eb       	ldi	r24, 0xB9	; 185
    17b2:	92 e0       	ldi	r25, 0x02	; 2
    17b4:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
	S1.begin();
    17b8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN11SwitchClass5beginEv>
	S1.initializeSwitch(PORT_D, 6, &S1);
    17bc:	2b e8       	ldi	r18, 0x8B	; 139
    17be:	32 e0       	ldi	r19, 0x02	; 2
    17c0:	46 e0       	ldi	r20, 0x06	; 6
    17c2:	62 e0       	ldi	r22, 0x02	; 2
    17c4:	c9 01       	movw	r24, r18
    17c6:	0e 94 40 07 	call	0xe80	; 0xe80 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S2.initializeSwitch(PORT_D, 7, &S2);
    17ca:	2d e5       	ldi	r18, 0x5D	; 93
    17cc:	32 e0       	ldi	r19, 0x02	; 2
    17ce:	47 e0       	ldi	r20, 0x07	; 7
    17d0:	62 e0       	ldi	r22, 0x02	; 2
    17d2:	c9 01       	movw	r24, r18
    17d4:	0e 94 40 07 	call	0xe80	; 0xe80 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S3.initializeSwitch(PORT_B, 0, &S3);
    17d8:	2f e2       	ldi	r18, 0x2F	; 47
    17da:	32 e0       	ldi	r19, 0x02	; 2
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	c9 01       	movw	r24, r18
    17e2:	0e 94 40 07 	call	0xe80	; 0xe80 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S4.initializeSwitch(PORT_B, 1, &S4);
    17e6:	21 e0       	ldi	r18, 0x01	; 1
    17e8:	32 e0       	ldi	r19, 0x02	; 2
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	c9 01       	movw	r24, r18
    17f0:	0e 94 40 07 	call	0xe80	; 0xe80 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S1.shortPress(switchPressed);
    17f4:	61 ea       	ldi	r22, 0xA1	; 161
    17f6:	7a e0       	ldi	r23, 0x0A	; 10
    17f8:	8b e8       	ldi	r24, 0x8B	; 139
    17fa:	92 e0       	ldi	r25, 0x02	; 2
    17fc:	0e 94 b0 06 	call	0xd60	; 0xd60 <_ZN11SwitchClass10shortPressEPFvhE>
	S1.enableSamePtrMode(true);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	0e 94 08 07 	call	0xe10	; 0xe10 <_ZN11SwitchClass17enableSamePtrModeEb>
	Notify(PSTR("Done"));
    1806:	88 e4       	ldi	r24, 0x48	; 72
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	0e 94 2b 03 	call	0x656	; 0x656 <_Z6NotifyPKc>
    while (1) 
    {
		if(newSPIData)	{
    180e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <newSPIData>
    1812:	88 23       	and	r24, r24
    1814:	09 f4       	brne	.+2      	; 0x1818 <main+0x180>
    1816:	e0 c0       	rjmp	.+448    	; 0x19d8 <main+0x340>
			newSPIData = false;
    1818:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <newSPIData>
			if(SPIdata != 0xAA){
    181c:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <SPIdata>
    1820:	8a 3a       	cpi	r24, 0xAA	; 170
    1822:	09 f4       	brne	.+2      	; 0x1826 <main+0x18e>
    1824:	46 c0       	rjmp	.+140    	; 0x18b2 <main+0x21a>
				Socket = SPIdata & 0xF0;
    1826:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <SPIdata>
    182a:	80 7f       	andi	r24, 0xF0	; 240
				Socket = Socket >> 4;
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	95 95       	asr	r25
    1830:	87 95       	ror	r24
    1832:	95 95       	asr	r25
    1834:	87 95       	ror	r24
    1836:	95 95       	asr	r25
    1838:	87 95       	ror	r24
    183a:	95 95       	asr	r25
    183c:	87 95       	ror	r24
    183e:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <Socket>
				State = SPIdata & 0x0F;
    1842:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SPIdata>
    1846:	2f 70       	andi	r18, 0x0F	; 15
    1848:	20 93 c9 02 	sts	0x02C9, r18	; 0x8002c9 <State>
				if((SPIdata & 0xD0) == 0xD0){
    184c:	30 91 cf 02 	lds	r19, 0x02CF	; 0x8002cf <SPIdata>
    1850:	30 7d       	andi	r19, 0xD0	; 208
    1852:	30 3d       	cpi	r19, 0xD0	; 208
    1854:	69 f4       	brne	.+26     	; 0x1870 <main+0x1d8>
					printStringCRNL("Changing all");
    1856:	82 e1       	ldi	r24, 0x12	; 18
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	0e 94 44 03 	call	0x688	; 0x688 <_Z15printStringCRNLPKc>
					setAllSocketState(State);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <State>
    1864:	91 11       	cpse	r25, r1
    1866:	01 c0       	rjmp	.+2      	; 0x186a <main+0x1d2>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	0e 94 ad 0a 	call	0x155a	; 0x155a <_Z17setAllSocketStateb>
    186e:	06 c0       	rjmp	.+12     	; 0x187c <main+0x1e4>
				}
				else{
				setSocketState(Socket, State);
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	21 11       	cpse	r18, r1
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <main+0x1e0>
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	0e 94 c5 0a 	call	0x158a	; 0x158a <_Z14setSocketStatehb>
				}
				BEEP = 1;
    187c:	43 9a       	sbi	0x08, 3	; 8
				Timer1.setCallBackTime(BEEP_TIME, 0, timerDone);
    187e:	27 ea       	ldi	r18, 0xA7	; 167
    1880:	3a e0       	ldi	r19, 0x0A	; 10
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	6e e1       	ldi	r22, 0x1E	; 30
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	89 eb       	ldi	r24, 0xB9	; 185
    188a:	92 e0       	ldi	r25, 0x02	; 2
    188c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
				printStringCRNL("Command received: ");
    1890:	8f e1       	ldi	r24, 0x1F	; 31
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	0e 94 44 03 	call	0x688	; 0x688 <_Z15printStringCRNLPKc>
				printHexNumber(SPIdata, 1);
    1898:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SPIdata>
    189c:	01 e0       	ldi	r16, 0x01	; 1
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 99 03 	call	0x732	; 0x732 <_Z14printHexNumberyh>
    18b0:	73 c0       	rjmp	.+230    	; 0x1998 <main+0x300>
			}
			else{
				enableSPIInterrupt(false);
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18enableSPIInterruptb>
				enableSPI(false);
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9enableSPIb>
				SPI_MasterInit();
    18be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18c2:	87 ec       	ldi	r24, 0xC7	; 199
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <main+0x22e>
    18ca:	00 c0       	rjmp	.+0      	; 0x18cc <main+0x234>
    18cc:	00 00       	nop
				_delay_us(50);
				if(Radio.isDataReady()){
    18ce:	ce 01       	movw	r24, r28
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN8NRF24L0111isDataReadyEv>
    18d6:	88 23       	and	r24, r24
    18d8:	09 f4       	brne	.+2      	; 0x18dc <main+0x244>
    18da:	56 c0       	rjmp	.+172    	; 0x1988 <main+0x2f0>
					Radio.readFIFO(&Payload);
    18dc:	68 ec       	ldi	r22, 0xC8	; 200
    18de:	72 e0       	ldi	r23, 0x02	; 2
    18e0:	ce 01       	movw	r24, r28
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN8NRF24L018readFIFOEPVh>
					Radio.clearRX_DR();
    18e8:	ce 01       	movw	r24, r28
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	0e 94 93 05 	call	0xb26	; 0xb26 <_ZN8NRF24L0110clearRX_DREv>
					Radio.flushRX();
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN8NRF24L017flushRXEv>
					if(Payload & 0xF0){
    18f8:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <Payload>
    18fc:	28 2f       	mov	r18, r24
    18fe:	20 7f       	andi	r18, 0xF0	; 240
    1900:	09 f1       	breq	.+66     	; 0x1944 <main+0x2ac>
						Socket = Payload & 0xF0;
						Socket = Socket >> 4;
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	35 95       	asr	r19
    1906:	27 95       	ror	r18
    1908:	35 95       	asr	r19
    190a:	27 95       	ror	r18
    190c:	35 95       	asr	r19
    190e:	27 95       	ror	r18
    1910:	35 95       	asr	r19
    1912:	27 95       	ror	r18
    1914:	20 93 ca 02 	sts	0x02CA, r18	; 0x8002ca <Socket>
						State = Payload & 0x0F;
    1918:	98 2f       	mov	r25, r24
    191a:	9f 70       	andi	r25, 0x0F	; 15
    191c:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <State>
						if((Payload & 0xD0) == 0xD0){
    1920:	80 7d       	andi	r24, 0xD0	; 208
    1922:	80 3d       	cpi	r24, 0xD0	; 208
    1924:	39 f4       	brne	.+14     	; 0x1934 <main+0x29c>
							setAllSocketState(State);
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	91 11       	cpse	r25, r1
    192a:	01 c0       	rjmp	.+2      	; 0x192e <main+0x296>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	0e 94 ad 0a 	call	0x155a	; 0x155a <_Z17setAllSocketStateb>
    1932:	10 c0       	rjmp	.+32     	; 0x1954 <main+0x2bc>
						}
						else{
							setSocketState(Socket, State);
    1934:	61 e0       	ldi	r22, 0x01	; 1
    1936:	91 11       	cpse	r25, r1
    1938:	01 c0       	rjmp	.+2      	; 0x193c <main+0x2a4>
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	82 2f       	mov	r24, r18
    193e:	0e 94 c5 0a 	call	0x158a	; 0x158a <_Z14setSocketStatehb>
    1942:	08 c0       	rjmp	.+16     	; 0x1954 <main+0x2bc>
						}
					}
					else{
						setSocketState(Payload, !getSocketState(Payload));
    1944:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_Z14getSocketStateh>
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	68 27       	eor	r22, r24
    194c:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <Payload>
    1950:	0e 94 c5 0a 	call	0x158a	; 0x158a <_Z14setSocketStatehb>
					}
					BEEP = 1;
    1954:	43 9a       	sbi	0x08, 3	; 8
					Timer1.setCallBackTime(BEEP_TIME, 0, timerDone);
    1956:	27 ea       	ldi	r18, 0xA7	; 167
    1958:	3a e0       	ldi	r19, 0x0A	; 10
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	6e e1       	ldi	r22, 0x1E	; 30
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	89 eb       	ldi	r24, 0xB9	; 185
    1962:	92 e0       	ldi	r25, 0x02	; 2
    1964:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
					printStringCRNL("Data received: ");
    1968:	82 e3       	ldi	r24, 0x32	; 50
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	0e 94 44 03 	call	0x688	; 0x688 <_Z15printStringCRNLPKc>
					printHexNumber(Payload, 1);
    1970:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <Payload>
    1974:	01 e0       	ldi	r16, 0x01	; 1
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 99 03 	call	0x732	; 0x732 <_Z14printHexNumberyh>
				}
				//printStringCRNL("Tick");
				enableSPI(false);
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9enableSPIb>
				initSPISlave();
    198e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z12initSPISlavev>
				enableSPIInterrupt(true);
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18enableSPIInterruptb>
			}
			CurrentState = (getSocketState(1) << 0) | (getSocketState(2) << 1) | (getSocketState(3) << 2) | (getSocketState(4) << 3);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_Z14getSocketStateh>
    199e:	08 2f       	mov	r16, r24
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_Z14getSocketStateh>
    19a6:	18 2f       	mov	r17, r24
    19a8:	83 e0       	ldi	r24, 0x03	; 3
    19aa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_Z14getSocketStateh>
    19ae:	11 0f       	add	r17, r17
    19b0:	24 e0       	ldi	r18, 0x04	; 4
    19b2:	82 9f       	mul	r24, r18
    19b4:	c0 01       	movw	r24, r0
    19b6:	11 24       	eor	r1, r1
    19b8:	21 2f       	mov	r18, r17
    19ba:	28 2b       	or	r18, r24
    19bc:	12 2f       	mov	r17, r18
    19be:	10 2b       	or	r17, r16
    19c0:	84 e0       	ldi	r24, 0x04	; 4
    19c2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_Z14getSocketStateh>
    19c6:	28 e0       	ldi	r18, 0x08	; 8
    19c8:	82 9f       	mul	r24, r18
    19ca:	c0 01       	movw	r24, r0
    19cc:	11 24       	eor	r1, r1
    19ce:	21 2f       	mov	r18, r17
    19d0:	28 2b       	or	r18, r24
    19d2:	20 93 c7 02 	sts	0x02C7, r18	; 0x8002c7 <CurrentState>
			SPDR = CurrentState;
    19d6:	2e bd       	out	0x2e, r18	; 46
		}
		if(SwitchFlag){
    19d8:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <SwitchFlag>
    19dc:	88 23       	and	r24, r24
    19de:	c9 f0       	breq	.+50     	; 0x1a12 <main+0x37a>
			SwitchFlag = false;
    19e0:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <SwitchFlag>
			setSocketState(SwitchID + 1, !getSocketState(SwitchID + 1));
    19e4:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SwitchID>
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
    19ea:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_Z14getSocketStateh>
    19ee:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <SwitchID>
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	68 27       	eor	r22, r24
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	89 0f       	add	r24, r25
    19fa:	0e 94 c5 0a 	call	0x158a	; 0x158a <_Z14setSocketStatehb>
			BEEP = 1;
    19fe:	43 9a       	sbi	0x08, 3	; 8
			Timer1.setCallBackTime(BEEP_TIME, 0, timerDone);
    1a00:	27 ea       	ldi	r18, 0xA7	; 167
    1a02:	3a e0       	ldi	r19, 0x0A	; 10
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	6e e1       	ldi	r22, 0x1E	; 30
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	89 eb       	ldi	r24, 0xB9	; 185
    1a0c:	92 e0       	ldi	r25, 0x02	; 2
    1a0e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
		}
		if(Timer1_Flag){
    1a12:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1_Flag>
    1a16:	88 23       	and	r24, r24
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <main+0x384>
    1a1a:	f9 ce       	rjmp	.-526    	; 0x180e <main+0x176>
			Timer1_Flag = false;
    1a1c:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <Timer1_Flag>
    1a20:	f6 ce       	rjmp	.-532    	; 0x180e <main+0x176>

00001a22 <__vector_17>:
	//enableSPIInterrupt(true);
	//sei();
}

ISR(SPI_STC_vect)
{															//Grab the data byte from the SPI Data Register (SPDR)
    1a22:	1f 92       	push	r1
    1a24:	0f 92       	push	r0
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	0f 92       	push	r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	8f 93       	push	r24
	SPIdata = SPDR;                                         //Put the byte into a temporary variable for processin                                       //process the data byte and put it back into the SPDR for the Master to read it
    1a2e:	8e b5       	in	r24, 0x2e	; 46
    1a30:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <SPIdata>
	newSPIData = true;                                       //Set the Flag as TRUE
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <newSPIData>
    1a3a:	8f 91       	pop	r24
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	0f 90       	pop	r0
    1a42:	1f 90       	pop	r1
    1a44:	18 95       	reti

00001a46 <__umoddi3>:
    1a46:	68 94       	set
    1a48:	01 c0       	rjmp	.+2      	; 0x1a4c <__udivdi3_umoddi3>

00001a4a <__udivdi3>:
    1a4a:	e8 94       	clt

00001a4c <__udivdi3_umoddi3>:
    1a4c:	8f 92       	push	r8
    1a4e:	9f 92       	push	r9
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__udivmod64>
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	9f 90       	pop	r9
    1a5e:	8f 90       	pop	r8
    1a60:	08 95       	ret

00001a62 <__udivmod64>:
    1a62:	88 24       	eor	r8, r8
    1a64:	99 24       	eor	r9, r9
    1a66:	f4 01       	movw	r30, r8
    1a68:	e4 01       	movw	r28, r8
    1a6a:	b0 e4       	ldi	r27, 0x40	; 64
    1a6c:	9f 93       	push	r25
    1a6e:	aa 27       	eor	r26, r26
    1a70:	9a 15       	cp	r25, r10
    1a72:	8b 04       	cpc	r8, r11
    1a74:	9c 04       	cpc	r9, r12
    1a76:	ed 05       	cpc	r30, r13
    1a78:	fe 05       	cpc	r31, r14
    1a7a:	cf 05       	cpc	r28, r15
    1a7c:	d0 07       	cpc	r29, r16
    1a7e:	a1 07       	cpc	r26, r17
    1a80:	98 f4       	brcc	.+38     	; 0x1aa8 <__udivmod64+0x46>
    1a82:	ad 2f       	mov	r26, r29
    1a84:	dc 2f       	mov	r29, r28
    1a86:	cf 2f       	mov	r28, r31
    1a88:	fe 2f       	mov	r31, r30
    1a8a:	e9 2d       	mov	r30, r9
    1a8c:	98 2c       	mov	r9, r8
    1a8e:	89 2e       	mov	r8, r25
    1a90:	98 2f       	mov	r25, r24
    1a92:	87 2f       	mov	r24, r23
    1a94:	76 2f       	mov	r23, r22
    1a96:	65 2f       	mov	r22, r21
    1a98:	54 2f       	mov	r21, r20
    1a9a:	43 2f       	mov	r20, r19
    1a9c:	32 2f       	mov	r19, r18
    1a9e:	22 27       	eor	r18, r18
    1aa0:	b8 50       	subi	r27, 0x08	; 8
    1aa2:	31 f7       	brne	.-52     	; 0x1a70 <__udivmod64+0xe>
    1aa4:	bf 91       	pop	r27
    1aa6:	27 c0       	rjmp	.+78     	; 0x1af6 <__udivmod64+0x94>
    1aa8:	1b 2e       	mov	r1, r27
    1aaa:	bf 91       	pop	r27
    1aac:	bb 27       	eor	r27, r27
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	44 1f       	adc	r20, r20
    1ab4:	55 1f       	adc	r21, r21
    1ab6:	66 1f       	adc	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	88 1f       	adc	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	88 1c       	adc	r8, r8
    1ac0:	99 1c       	adc	r9, r9
    1ac2:	ee 1f       	adc	r30, r30
    1ac4:	ff 1f       	adc	r31, r31
    1ac6:	cc 1f       	adc	r28, r28
    1ac8:	dd 1f       	adc	r29, r29
    1aca:	aa 1f       	adc	r26, r26
    1acc:	bb 1f       	adc	r27, r27
    1ace:	8a 14       	cp	r8, r10
    1ad0:	9b 04       	cpc	r9, r11
    1ad2:	ec 05       	cpc	r30, r12
    1ad4:	fd 05       	cpc	r31, r13
    1ad6:	ce 05       	cpc	r28, r14
    1ad8:	df 05       	cpc	r29, r15
    1ada:	a0 07       	cpc	r26, r16
    1adc:	b1 07       	cpc	r27, r17
    1ade:	48 f0       	brcs	.+18     	; 0x1af2 <__udivmod64+0x90>
    1ae0:	8a 18       	sub	r8, r10
    1ae2:	9b 08       	sbc	r9, r11
    1ae4:	ec 09       	sbc	r30, r12
    1ae6:	fd 09       	sbc	r31, r13
    1ae8:	ce 09       	sbc	r28, r14
    1aea:	df 09       	sbc	r29, r15
    1aec:	a0 0b       	sbc	r26, r16
    1aee:	b1 0b       	sbc	r27, r17
    1af0:	21 60       	ori	r18, 0x01	; 1
    1af2:	1a 94       	dec	r1
    1af4:	e1 f6       	brne	.-72     	; 0x1aae <__udivmod64+0x4c>
    1af6:	2e f4       	brtc	.+10     	; 0x1b02 <__udivmod64+0xa0>
    1af8:	94 01       	movw	r18, r8
    1afa:	af 01       	movw	r20, r30
    1afc:	be 01       	movw	r22, r28
    1afe:	cd 01       	movw	r24, r26
    1b00:	00 0c       	add	r0, r0
    1b02:	08 95       	ret

00001b04 <__ashldi3>:
    1b04:	0f 93       	push	r16
    1b06:	08 30       	cpi	r16, 0x08	; 8
    1b08:	90 f0       	brcs	.+36     	; 0x1b2e <__ashldi3+0x2a>
    1b0a:	98 2f       	mov	r25, r24
    1b0c:	87 2f       	mov	r24, r23
    1b0e:	76 2f       	mov	r23, r22
    1b10:	65 2f       	mov	r22, r21
    1b12:	54 2f       	mov	r21, r20
    1b14:	43 2f       	mov	r20, r19
    1b16:	32 2f       	mov	r19, r18
    1b18:	22 27       	eor	r18, r18
    1b1a:	08 50       	subi	r16, 0x08	; 8
    1b1c:	f4 cf       	rjmp	.-24     	; 0x1b06 <__ashldi3+0x2>
    1b1e:	22 0f       	add	r18, r18
    1b20:	33 1f       	adc	r19, r19
    1b22:	44 1f       	adc	r20, r20
    1b24:	55 1f       	adc	r21, r21
    1b26:	66 1f       	adc	r22, r22
    1b28:	77 1f       	adc	r23, r23
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 95       	dec	r16
    1b30:	b2 f7       	brpl	.-20     	; 0x1b1e <__ashldi3+0x1a>
    1b32:	0f 91       	pop	r16
    1b34:	08 95       	ret

00001b36 <__ashrdi3>:
    1b36:	97 fb       	bst	r25, 7
    1b38:	10 f8       	bld	r1, 0

00001b3a <__lshrdi3>:
    1b3a:	16 94       	lsr	r1
    1b3c:	00 08       	sbc	r0, r0
    1b3e:	0f 93       	push	r16
    1b40:	08 30       	cpi	r16, 0x08	; 8
    1b42:	98 f0       	brcs	.+38     	; 0x1b6a <__lshrdi3+0x30>
    1b44:	08 50       	subi	r16, 0x08	; 8
    1b46:	23 2f       	mov	r18, r19
    1b48:	34 2f       	mov	r19, r20
    1b4a:	45 2f       	mov	r20, r21
    1b4c:	56 2f       	mov	r21, r22
    1b4e:	67 2f       	mov	r22, r23
    1b50:	78 2f       	mov	r23, r24
    1b52:	89 2f       	mov	r24, r25
    1b54:	90 2d       	mov	r25, r0
    1b56:	f4 cf       	rjmp	.-24     	; 0x1b40 <__lshrdi3+0x6>
    1b58:	05 94       	asr	r0
    1b5a:	97 95       	ror	r25
    1b5c:	87 95       	ror	r24
    1b5e:	77 95       	ror	r23
    1b60:	67 95       	ror	r22
    1b62:	57 95       	ror	r21
    1b64:	47 95       	ror	r20
    1b66:	37 95       	ror	r19
    1b68:	27 95       	ror	r18
    1b6a:	0a 95       	dec	r16
    1b6c:	aa f7       	brpl	.-22     	; 0x1b58 <__lshrdi3+0x1e>
    1b6e:	0f 91       	pop	r16
    1b70:	08 95       	ret

00001b72 <__adddi3_s8>:
    1b72:	00 24       	eor	r0, r0
    1b74:	a7 fd       	sbrc	r26, 7
    1b76:	00 94       	com	r0
    1b78:	2a 0f       	add	r18, r26
    1b7a:	30 1d       	adc	r19, r0
    1b7c:	40 1d       	adc	r20, r0
    1b7e:	50 1d       	adc	r21, r0
    1b80:	60 1d       	adc	r22, r0
    1b82:	70 1d       	adc	r23, r0
    1b84:	80 1d       	adc	r24, r0
    1b86:	90 1d       	adc	r25, r0
    1b88:	08 95       	ret

00001b8a <__cmpdi2>:
    1b8a:	2a 15       	cp	r18, r10
    1b8c:	3b 05       	cpc	r19, r11
    1b8e:	4c 05       	cpc	r20, r12
    1b90:	5d 05       	cpc	r21, r13
    1b92:	6e 05       	cpc	r22, r14
    1b94:	7f 05       	cpc	r23, r15
    1b96:	80 07       	cpc	r24, r16
    1b98:	91 07       	cpc	r25, r17
    1b9a:	08 95       	ret

00001b9c <__cmpdi2_s8>:
    1b9c:	00 24       	eor	r0, r0
    1b9e:	a7 fd       	sbrc	r26, 7
    1ba0:	00 94       	com	r0
    1ba2:	2a 17       	cp	r18, r26
    1ba4:	30 05       	cpc	r19, r0
    1ba6:	40 05       	cpc	r20, r0
    1ba8:	50 05       	cpc	r21, r0
    1baa:	60 05       	cpc	r22, r0
    1bac:	70 05       	cpc	r23, r0
    1bae:	80 05       	cpc	r24, r0
    1bb0:	90 05       	cpc	r25, r0
    1bb2:	08 95       	ret

00001bb4 <_exit>:
    1bb4:	f8 94       	cli

00001bb6 <__stop_program>:
    1bb6:	ff cf       	rjmp	.-2      	; 0x1bb6 <__stop_program>
