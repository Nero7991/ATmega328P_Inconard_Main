
ATmega328P_Inconard_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001b18  00001bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018e  00800142  00800142  00001bee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c0  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006fe7  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ee  00000000  00000000  00009207  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e75  00000000  00000000  0000a8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001310  00000000  00000000  0000d76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000247e  00000000  00000000  0000ea7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000042a1  00000000  00000000  00010efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  0001519b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__ctors_end>
       4:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_1>
       8:	0c 94 07 09 	jmp	0x120e	; 0x120e <__vector_2>
       c:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_3>
      10:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_4>
      14:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__vector_5>
      18:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_6>
      1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      2c:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_11>
      30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      44:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__vector_17>
      48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	49 6e       	ori	r20, 0xE9	; 233
      6a:	69 74       	andi	r22, 0x49	; 73
      6c:	69 61       	ori	r22, 0x19	; 25
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	7a 69       	ori	r23, 0x9A	; 154
      72:	6e 67       	ori	r22, 0x7E	; 126
      74:	20 73       	andi	r18, 0x30	; 48
      76:	75 63       	ori	r23, 0x35	; 53
      78:	63 65       	ori	r22, 0x53	; 83
      7a:	73 73       	andi	r23, 0x33	; 51
      7c:	66 75       	andi	r22, 0x56	; 86
      7e:	6c 2e       	mov	r6, r28
	...

00000081 <_ZZN8NRF24L017setModeEbE3__c_1>:
      81:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
      91:	61 69 6c 65 64 20 66 6f 72 20 6e 52 46 32 34 4c     ailed for nRF24L
      a1:	30 31 2e 20 43 68 65 63 6b 20 63 6f 6e 6e 65 63     01. Check connec
      b1:	74 69 6f 6e 73 00                                   tions.

000000b7 <_ZZN8NRF24L017setModeEbE3__c_0>:
      b7:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      c7:	31 20 69 6e 20 54 72 61 6e 73 6d 69 74 20 4d 6f     1 in Transmit Mo
      d7:	64 65 2e 2e 2e 00                                   de....

000000dd <_ZZN8NRF24L017setModeEbE3__c>:
      dd:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      ed:	31 20 69 6e 20 52 65 63 65 69 76 65 20 4d 6f 64     1 in Receive Mod
      fd:	65 2e 2e 2e 00                                      e....

00000102 <_ZZN8NRF24L0110initializeEvE3__c_0>:
     102:	4d 61 73 74 65 72 20 52 58 20 50 61 79 6c 6f 61     Master RX Payloa
     112:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     122:	3a 20 00                                            : .

00000125 <_ZZN8NRF24L0110initializeEvE3__c>:
     125:	4d 61 73 74 65 72 20 54 58 20 50 61 79 6c 6f 61     Master TX Payloa
     135:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     145:	3a 20 00                                            : .

00000148 <_ZZ4mainE3__c_0>:
     148:	44 6f 6e 65 00                                      Done.

0000014d <_ZZ4mainE3__c>:
     14d:	50 6f 77 65 72 69 6e 67 20 6f 6e 2e 2e 2e 00        Powering on....

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf ef       	ldi	r28, 0xFF	; 255
     162:	d8 e0       	ldi	r29, 0x08	; 8
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	a0 e0       	ldi	r26, 0x00	; 0
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	e8 e1       	ldi	r30, 0x18	; 24
     170:	fb e1       	ldi	r31, 0x1B	; 27
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	a2 34       	cpi	r26, 0x42	; 66
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	22 e0       	ldi	r18, 0x02	; 2
     180:	a2 e4       	ldi	r26, 0x42	; 66
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a0 3d       	cpi	r26, 0xD0	; 208
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <main>
     192:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <_exit>

00000196 <__bad_interrupt>:
     196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <_Z6wakeUpv>:
	MCUSR &= ~(1<<WDRF);
	/* Start timed sequence */
	WDTCR = (1<<WDCE) | (1<<WDE);
	/* Set new prescaler (time-out) value = 64K cycles (~0.5 s) */
	WDTCR = prescale;
	asm volatile("sei"::);
     19a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     19e:	08 95       	ret

000001a0 <_Z10allowSleepb>:
     1a0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
     1a4:	08 95       	ret

000001a6 <_Z14SPI_MasterInitv>:
     1a6:	24 98       	cbi	0x04, 4	; 4
     1a8:	84 b1       	in	r24, 0x04	; 4
     1aa:	8c 62       	ori	r24, 0x2C	; 44
     1ac:	84 b9       	out	0x04, r24	; 4
     1ae:	2a 9a       	sbi	0x05, 2	; 5
     1b0:	8c b5       	in	r24, 0x2c	; 44
     1b2:	81 65       	ori	r24, 0x51	; 81
     1b4:	8c bd       	out	0x2c, r24	; 44
     1b6:	8d b5       	in	r24, 0x2d	; 45
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	8d bd       	out	0x2d, r24	; 45
     1bc:	08 95       	ret

000001be <_Z12initSPISlavev>:
     1be:	84 b1       	in	r24, 0x04	; 4
     1c0:	83 7d       	andi	r24, 0xD3	; 211
     1c2:	84 b9       	out	0x04, r24	; 4
     1c4:	24 9a       	sbi	0x04, 4	; 4
     1c6:	8c b5       	in	r24, 0x2c	; 44
     1c8:	8f 7e       	andi	r24, 0xEF	; 239
     1ca:	8c bd       	out	0x2c, r24	; 44
     1cc:	8c b5       	in	r24, 0x2c	; 44
     1ce:	80 64       	ori	r24, 0x40	; 64
     1d0:	8c bd       	out	0x2c, r24	; 44
     1d2:	08 95       	ret

000001d4 <_Z9enableSPIb>:
     1d4:	88 23       	and	r24, r24
     1d6:	21 f0       	breq	.+8      	; 0x1e0 <_Z9enableSPIb+0xc>
     1d8:	8c b5       	in	r24, 0x2c	; 44
     1da:	80 64       	ori	r24, 0x40	; 64
     1dc:	8c bd       	out	0x2c, r24	; 44
     1de:	08 95       	ret
     1e0:	8c b5       	in	r24, 0x2c	; 44
     1e2:	8f 7b       	andi	r24, 0xBF	; 191
     1e4:	8c bd       	out	0x2c, r24	; 44
     1e6:	08 95       	ret

000001e8 <_Z18enableSPIInterruptb>:
     1e8:	88 23       	and	r24, r24
     1ea:	21 f0       	breq	.+8      	; 0x1f4 <_Z18enableSPIInterruptb+0xc>
     1ec:	8c b5       	in	r24, 0x2c	; 44
     1ee:	80 68       	ori	r24, 0x80	; 128
     1f0:	8c bd       	out	0x2c, r24	; 44
     1f2:	08 95       	ret
     1f4:	8c b5       	in	r24, 0x2c	; 44
     1f6:	8f 77       	andi	r24, 0x7F	; 127
     1f8:	8c bd       	out	0x2c, r24	; 44
     1fa:	08 95       	ret

000001fc <_Z18SPI_MasterTransmitc>:
     1fc:	8e bd       	out	0x2e, r24	; 46
     1fe:	0d b4       	in	r0, 0x2d	; 45
     200:	07 fe       	sbrs	r0, 7
     202:	fd cf       	rjmp	.-6      	; 0x1fe <_Z18SPI_MasterTransmitc+0x2>
     204:	8e b5       	in	r24, 0x2e	; 46
     206:	08 95       	ret

00000208 <_Z11Init_CTC_T1hj>:
     208:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     20c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     210:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     214:	87 70       	andi	r24, 0x07	; 7
     216:	88 60       	ori	r24, 0x08	; 8
     218:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     222:	78 94       	sei
     224:	08 95       	ret

00000226 <_Z11setPinStatehhb>:
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	e9 f0       	breq	.+58     	; 0x264 <_Z11setPinStatehhb+0x3e>
     22a:	18 f0       	brcs	.+6      	; 0x232 <_Z11setPinStatehhb+0xc>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	99 f1       	breq	.+102    	; 0x296 <_Z11setPinStatehhb+0x70>
     230:	08 95       	ret
     232:	44 23       	and	r20, r20
     234:	59 f0       	breq	.+22     	; 0x24c <_Z11setPinStatehhb+0x26>
     236:	25 b1       	in	r18, 0x05	; 5
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	02 c0       	rjmp	.+4      	; 0x242 <_Z11setPinStatehhb+0x1c>
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	6a 95       	dec	r22
     244:	e2 f7       	brpl	.-8      	; 0x23e <_Z11setPinStatehhb+0x18>
     246:	82 2b       	or	r24, r18
     248:	85 b9       	out	0x05, r24	; 5
     24a:	08 95       	ret
     24c:	25 b1       	in	r18, 0x05	; 5
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	02 c0       	rjmp	.+4      	; 0x258 <_Z11setPinStatehhb+0x32>
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	6a 95       	dec	r22
     25a:	e2 f7       	brpl	.-8      	; 0x254 <_Z11setPinStatehhb+0x2e>
     25c:	80 95       	com	r24
     25e:	82 23       	and	r24, r18
     260:	85 b9       	out	0x05, r24	; 5
     262:	08 95       	ret
     264:	44 23       	and	r20, r20
     266:	59 f0       	breq	.+22     	; 0x27e <_Z11setPinStatehhb+0x58>
     268:	28 b1       	in	r18, 0x08	; 8
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	02 c0       	rjmp	.+4      	; 0x274 <_Z11setPinStatehhb+0x4e>
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <_Z11setPinStatehhb+0x4a>
     278:	82 2b       	or	r24, r18
     27a:	88 b9       	out	0x08, r24	; 8
     27c:	08 95       	ret
     27e:	28 b1       	in	r18, 0x08	; 8
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <_Z11setPinStatehhb+0x64>
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	6a 95       	dec	r22
     28c:	e2 f7       	brpl	.-8      	; 0x286 <_Z11setPinStatehhb+0x60>
     28e:	80 95       	com	r24
     290:	82 23       	and	r24, r18
     292:	88 b9       	out	0x08, r24	; 8
     294:	08 95       	ret
     296:	44 23       	and	r20, r20
     298:	59 f0       	breq	.+22     	; 0x2b0 <_Z11setPinStatehhb+0x8a>
     29a:	2b b1       	in	r18, 0x0b	; 11
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <_Z11setPinStatehhb+0x80>
     2a2:	88 0f       	add	r24, r24
     2a4:	99 1f       	adc	r25, r25
     2a6:	6a 95       	dec	r22
     2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <_Z11setPinStatehhb+0x7c>
     2aa:	82 2b       	or	r24, r18
     2ac:	8b b9       	out	0x0b, r24	; 11
     2ae:	08 95       	ret
     2b0:	2b b1       	in	r18, 0x0b	; 11
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <_Z11setPinStatehhb+0x96>
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	6a 95       	dec	r22
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <_Z11setPinStatehhb+0x92>
     2c0:	80 95       	com	r24
     2c2:	82 23       	and	r24, r18
     2c4:	8b b9       	out	0x0b, r24	; 11
     2c6:	08 95       	ret

000002c8 <_Z15setPinDirectionhhb>:
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	e9 f0       	breq	.+58     	; 0x306 <_Z15setPinDirectionhhb+0x3e>
     2cc:	18 f0       	brcs	.+6      	; 0x2d4 <_Z15setPinDirectionhhb+0xc>
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	99 f1       	breq	.+102    	; 0x338 <_Z15setPinDirectionhhb+0x70>
     2d2:	08 95       	ret
     2d4:	44 23       	and	r20, r20
     2d6:	59 f0       	breq	.+22     	; 0x2ee <_Z15setPinDirectionhhb+0x26>
     2d8:	24 b1       	in	r18, 0x04	; 4
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <_Z15setPinDirectionhhb+0x1c>
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	6a 95       	dec	r22
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <_Z15setPinDirectionhhb+0x18>
     2e8:	82 2b       	or	r24, r18
     2ea:	84 b9       	out	0x04, r24	; 4
     2ec:	08 95       	ret
     2ee:	24 b1       	in	r18, 0x04	; 4
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <_Z15setPinDirectionhhb+0x32>
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	6a 95       	dec	r22
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <_Z15setPinDirectionhhb+0x2e>
     2fe:	80 95       	com	r24
     300:	82 23       	and	r24, r18
     302:	84 b9       	out	0x04, r24	; 4
     304:	08 95       	ret
     306:	44 23       	and	r20, r20
     308:	59 f0       	breq	.+22     	; 0x320 <_Z15setPinDirectionhhb+0x58>
     30a:	27 b1       	in	r18, 0x07	; 7
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	02 c0       	rjmp	.+4      	; 0x316 <_Z15setPinDirectionhhb+0x4e>
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <_Z15setPinDirectionhhb+0x4a>
     31a:	82 2b       	or	r24, r18
     31c:	87 b9       	out	0x07, r24	; 7
     31e:	08 95       	ret
     320:	27 b1       	in	r18, 0x07	; 7
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	02 c0       	rjmp	.+4      	; 0x32c <_Z15setPinDirectionhhb+0x64>
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	6a 95       	dec	r22
     32e:	e2 f7       	brpl	.-8      	; 0x328 <_Z15setPinDirectionhhb+0x60>
     330:	80 95       	com	r24
     332:	82 23       	and	r24, r18
     334:	87 b9       	out	0x07, r24	; 7
     336:	08 95       	ret
     338:	44 23       	and	r20, r20
     33a:	59 f0       	breq	.+22     	; 0x352 <_Z15setPinDirectionhhb+0x8a>
     33c:	2a b1       	in	r18, 0x0a	; 10
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <_Z15setPinDirectionhhb+0x80>
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	6a 95       	dec	r22
     34a:	e2 f7       	brpl	.-8      	; 0x344 <_Z15setPinDirectionhhb+0x7c>
     34c:	82 2b       	or	r24, r18
     34e:	8a b9       	out	0x0a, r24	; 10
     350:	08 95       	ret
     352:	2a b1       	in	r18, 0x0a	; 10
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	02 c0       	rjmp	.+4      	; 0x35e <_Z15setPinDirectionhhb+0x96>
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	6a 95       	dec	r22
     360:	e2 f7       	brpl	.-8      	; 0x35a <_Z15setPinDirectionhhb+0x92>
     362:	80 95       	com	r24
     364:	82 23       	and	r24, r18
     366:	8a b9       	out	0x0a, r24	; 10
     368:	08 95       	ret

0000036a <_Z21setPinChangeInterrupthhb>:
     36a:	e8 e6       	ldi	r30, 0x68	; 104
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	90 81       	ld	r25, Z
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	08 2e       	mov	r0, r24
     376:	02 c0       	rjmp	.+4      	; 0x37c <_Z21setPinChangeInterrupthhb+0x12>
     378:	22 0f       	add	r18, r18
     37a:	33 1f       	adc	r19, r19
     37c:	0a 94       	dec	r0
     37e:	e2 f7       	brpl	.-8      	; 0x378 <_Z21setPinChangeInterrupthhb+0xe>
     380:	29 2b       	or	r18, r25
     382:	20 83       	st	Z, r18
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	81 f0       	breq	.+32     	; 0x3a8 <_Z21setPinChangeInterrupthhb+0x3e>
     388:	18 f0       	brcs	.+6      	; 0x390 <_Z21setPinChangeInterrupthhb+0x26>
     38a:	82 30       	cpi	r24, 0x02	; 2
     38c:	c9 f0       	breq	.+50     	; 0x3c0 <_Z21setPinChangeInterrupthhb+0x56>
     38e:	08 95       	ret
     390:	eb e6       	ldi	r30, 0x6B	; 107
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <_Z21setPinChangeInterrupthhb+0x34>
     39a:	44 0f       	add	r20, r20
     39c:	55 1f       	adc	r21, r21
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <_Z21setPinChangeInterrupthhb+0x30>
     3a2:	48 2b       	or	r20, r24
     3a4:	40 83       	st	Z, r20
     3a6:	08 95       	ret
     3a8:	ec e6       	ldi	r30, 0x6C	; 108
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <_Z21setPinChangeInterrupthhb+0x4c>
     3b2:	44 0f       	add	r20, r20
     3b4:	55 1f       	adc	r21, r21
     3b6:	6a 95       	dec	r22
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <_Z21setPinChangeInterrupthhb+0x48>
     3ba:	48 2b       	or	r20, r24
     3bc:	40 83       	st	Z, r20
     3be:	08 95       	ret
     3c0:	ed e6       	ldi	r30, 0x6D	; 109
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <_Z21setPinChangeInterrupthhb+0x64>
     3ca:	44 0f       	add	r20, r20
     3cc:	55 1f       	adc	r21, r21
     3ce:	6a 95       	dec	r22
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <_Z21setPinChangeInterrupthhb+0x60>
     3d2:	48 2b       	or	r20, r24
     3d4:	40 83       	st	Z, r20
     3d6:	08 95       	ret

000003d8 <_Z11getPinStatehh>:
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	69 f0       	breq	.+26     	; 0x3f6 <_Z11getPinStatehh+0x1e>
     3dc:	18 f0       	brcs	.+6      	; 0x3e4 <_Z11getPinStatehh+0xc>
     3de:	82 30       	cpi	r24, 0x02	; 2
     3e0:	99 f0       	breq	.+38     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3e2:	1b c0       	rjmp	.+54     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3e4:	83 b1       	in	r24, 0x03	; 3
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <_Z11getPinStatehh+0x16>
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	6a 95       	dec	r22
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <_Z11getPinStatehh+0x12>
     3f2:	81 70       	andi	r24, 0x01	; 1
     3f4:	08 95       	ret
     3f6:	86 b1       	in	r24, 0x06	; 6
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	95 95       	asr	r25
     3fe:	87 95       	ror	r24
     400:	6a 95       	dec	r22
     402:	e2 f7       	brpl	.-8      	; 0x3fc <_Z11getPinStatehh+0x24>
     404:	81 70       	andi	r24, 0x01	; 1
     406:	08 95       	ret
     408:	89 b1       	in	r24, 0x09	; 9
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40e:	95 95       	asr	r25
     410:	87 95       	ror	r24
     412:	6a 95       	dec	r22
     414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     416:	81 70       	andi	r24, 0x01	; 1
     418:	08 95       	ret
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	08 95       	ret

0000041e <_Z10USART_Initj>:
     41e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     422:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     426:	88 e1       	ldi	r24, 0x18	; 24
     428:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     42c:	8e e0       	ldi	r24, 0x0E	; 14
     42e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     432:	08 95       	ret

00000434 <_Z14USART_Transmith>:
     434:	e0 ec       	ldi	r30, 0xC0	; 192
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	90 81       	ld	r25, Z
     43a:	95 ff       	sbrs	r25, 5
     43c:	fd cf       	rjmp	.-6      	; 0x438 <_Z14USART_Transmith+0x4>
     43e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     442:	08 95       	ret

00000444 <_Z13milliHappenedv>:
}


void milliHappened(){
	time += 1;
     444:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <time>
     448:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <time+0x1>
     44c:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <time+0x2>
     450:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <time+0x3>
     454:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <time+0x4>
     458:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <time+0x5>
     45c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <time+0x6>
     460:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <time+0x7>
     464:	a1 e0       	ldi	r26, 0x01	; 1
     466:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__adddi3_s8>
     46a:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <time>
     46e:	30 93 46 01 	sts	0x0146, r19	; 0x800146 <time+0x1>
     472:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <time+0x2>
     476:	50 93 48 01 	sts	0x0148, r21	; 0x800148 <time+0x3>
     47a:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <time+0x4>
     47e:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <time+0x5>
     482:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <time+0x6>
     486:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <time+0x7>
	if(cdown != 0){
     48a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cdown>
     48e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <cdown+0x1>
     492:	89 2b       	or	r24, r25
     494:	49 f0       	breq	.+18     	; 0x4a8 <_Z13milliHappenedv+0x64>
		cdown -= 1;
     496:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cdown>
     49a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <cdown+0x1>
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <cdown+0x1>
     4a4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cdown>
     4a8:	08 95       	ret

000004aa <__vector_6>:
	}
	count1 += 1;
}*/


ISR(WDT_vect){
     4aa:	1f 92       	push	r1
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	8f 93       	push	r24
	MCUSR &= ~(1 << SE);
     4b6:	84 b7       	in	r24, 0x34	; 52
     4b8:	8e 7f       	andi	r24, 0xFE	; 254
     4ba:	84 bf       	out	0x34, r24	; 52
     4bc:	8f 91       	pop	r24
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <_Z10numToArrayy>:
	USART_Transmit('\n');
	while(*p != 0){
		USART_Transmit(*p);
		p++;
	}
}
     4c8:	0f 93       	push	r16
     4ca:	ee e8       	ldi	r30, 0x8E	; 142
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	a6 e9       	ldi	r26, 0x96	; 150
     4d0:	b1 e0       	ldi	r27, 0x01	; 1
     4d2:	21 93       	st	Z+, r18
     4d4:	08 e0       	ldi	r16, 0x08	; 8
     4d6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__lshrdi3>
     4da:	ea 17       	cp	r30, r26
     4dc:	fb 07       	cpc	r31, r27
     4de:	c9 f7       	brne	.-14     	; 0x4d2 <_Z10numToArrayy+0xa>
     4e0:	8e e8       	ldi	r24, 0x8E	; 142
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0f 91       	pop	r16
     4e6:	08 95       	ret

000004e8 <_Z10hexToASCIIh>:
     4e8:	8a 30       	cpi	r24, 0x0A	; 10
     4ea:	10 f0       	brcs	.+4      	; 0x4f0 <_Z10hexToASCIIh+0x8>
     4ec:	89 5c       	subi	r24, 0xC9	; 201
     4ee:	08 95       	ret
     4f0:	80 5d       	subi	r24, 0xD0	; 208
     4f2:	08 95       	ret

000004f4 <_Z11hexToStringh>:
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	18 2f       	mov	r17, r24
     4fc:	82 95       	swap	r24
     4fe:	8f 70       	andi	r24, 0x0F	; 15
     500:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_Z10hexToASCIIh>
     504:	c6 e9       	ldi	r28, 0x96	; 150
     506:	d1 e0       	ldi	r29, 0x01	; 1
     508:	88 83       	st	Y, r24
     50a:	81 2f       	mov	r24, r17
     50c:	8f 70       	andi	r24, 0x0F	; 15
     50e:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <_ZZ11hexToStringhE4temp>
     512:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_Z10hexToASCIIh>
     516:	89 83       	std	Y+1, r24	; 0x01
     518:	1a 82       	std	Y+2, r1	; 0x02
     51a:	ce 01       	movw	r24, r28
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <_Z11printNumbery>:
     524:	2f 92       	push	r2
     526:	3f 92       	push	r3
     528:	4f 92       	push	r4
     52a:	5f 92       	push	r5
     52c:	6f 92       	push	r6
     52e:	7f 92       	push	r7
     530:	8f 92       	push	r8
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	c7 56       	subi	r28, 0x67	; 103
     54e:	d1 09       	sbc	r29, r1
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	a6 96       	adiw	r28, 0x26	; 38
     55c:	2f af       	std	Y+63, r18	; 0x3f
     55e:	a6 97       	sbiw	r28, 0x26	; 38
     560:	83 2e       	mov	r8, r19
     562:	74 2e       	mov	r7, r20
     564:	65 2e       	mov	r6, r21
     566:	56 2e       	mov	r5, r22
     568:	47 2e       	mov	r4, r23
     56a:	38 2e       	mov	r3, r24
     56c:	29 2e       	mov	r2, r25
     56e:	a0 e0       	ldi	r26, 0x00	; 0
     570:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__cmpdi2_s8>
     574:	21 f4       	brne	.+8      	; 0x57e <_Z11printNumbery+0x5a>
     576:	80 e3       	ldi	r24, 0x30	; 48
     578:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
     57c:	52 c0       	rjmp	.+164    	; 0x622 <_Z11printNumbery+0xfe>
     57e:	91 2c       	mov	r9, r1
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	8c 0f       	add	r24, r28
     586:	9d 1f       	adc	r25, r29
     588:	89 0d       	add	r24, r9
     58a:	91 1d       	adc	r25, r1
     58c:	a8 96       	adiw	r28, 0x28	; 40
     58e:	9f af       	std	Y+63, r25	; 0x3f
     590:	8e af       	std	Y+62, r24	; 0x3e
     592:	a8 97       	sbiw	r28, 0x28	; 40
     594:	0f 2e       	mov	r0, r31
     596:	fa e0       	ldi	r31, 0x0A	; 10
     598:	af 2e       	mov	r10, r31
     59a:	f0 2d       	mov	r31, r0
     59c:	b1 2c       	mov	r11, r1
     59e:	c1 2c       	mov	r12, r1
     5a0:	d1 2c       	mov	r13, r1
     5a2:	e1 2c       	mov	r14, r1
     5a4:	f1 2c       	mov	r15, r1
     5a6:	00 e0       	ldi	r16, 0x00	; 0
     5a8:	10 e0       	ldi	r17, 0x00	; 0
     5aa:	a6 96       	adiw	r28, 0x26	; 38
     5ac:	2f ad       	ldd	r18, Y+63	; 0x3f
     5ae:	a6 97       	sbiw	r28, 0x26	; 38
     5b0:	38 2d       	mov	r19, r8
     5b2:	47 2d       	mov	r20, r7
     5b4:	56 2d       	mov	r21, r6
     5b6:	65 2d       	mov	r22, r5
     5b8:	74 2d       	mov	r23, r4
     5ba:	83 2d       	mov	r24, r3
     5bc:	92 2d       	mov	r25, r2
     5be:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__umoddi3>
     5c2:	20 5d       	subi	r18, 0xD0	; 208
     5c4:	a8 96       	adiw	r28, 0x28	; 40
     5c6:	ee ad       	ldd	r30, Y+62	; 0x3e
     5c8:	ff ad       	ldd	r31, Y+63	; 0x3f
     5ca:	a8 97       	sbiw	r28, 0x28	; 40
     5cc:	20 83       	st	Z, r18
     5ce:	a6 96       	adiw	r28, 0x26	; 38
     5d0:	2f ad       	ldd	r18, Y+63	; 0x3f
     5d2:	a6 97       	sbiw	r28, 0x26	; 38
     5d4:	38 2d       	mov	r19, r8
     5d6:	47 2d       	mov	r20, r7
     5d8:	56 2d       	mov	r21, r6
     5da:	65 2d       	mov	r22, r5
     5dc:	74 2d       	mov	r23, r4
     5de:	83 2d       	mov	r24, r3
     5e0:	92 2d       	mov	r25, r2
     5e2:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__udivdi3>
     5e6:	a6 96       	adiw	r28, 0x26	; 38
     5e8:	2f af       	std	Y+63, r18	; 0x3f
     5ea:	a6 97       	sbiw	r28, 0x26	; 38
     5ec:	83 2e       	mov	r8, r19
     5ee:	74 2e       	mov	r7, r20
     5f0:	65 2e       	mov	r6, r21
     5f2:	56 2e       	mov	r5, r22
     5f4:	47 2e       	mov	r4, r23
     5f6:	38 2e       	mov	r3, r24
     5f8:	29 2e       	mov	r2, r25
     5fa:	93 94       	inc	r9
     5fc:	a0 e0       	ldi	r26, 0x00	; 0
     5fe:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__cmpdi2_s8>
     602:	09 f0       	breq	.+2      	; 0x606 <_Z11printNumbery+0xe2>
     604:	bd cf       	rjmp	.-134    	; 0x580 <_Z11printNumbery+0x5c>
     606:	99 20       	and	r9, r9
     608:	61 f0       	breq	.+24     	; 0x622 <_Z11printNumbery+0xfe>
     60a:	9a 94       	dec	r9
     60c:	e1 e0       	ldi	r30, 0x01	; 1
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	ec 0f       	add	r30, r28
     612:	fd 1f       	adc	r31, r29
     614:	e9 0d       	add	r30, r9
     616:	f1 1d       	adc	r31, r1
     618:	80 81       	ld	r24, Z
     61a:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
     61e:	91 10       	cpse	r9, r1
     620:	f4 cf       	rjmp	.-24     	; 0x60a <_Z11printNumbery+0xe6>
     622:	80 e2       	ldi	r24, 0x20	; 32
     624:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
     628:	c9 59       	subi	r28, 0x99	; 153
     62a:	df 4f       	sbci	r29, 0xFF	; 255
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	cf 90       	pop	r12
     646:	bf 90       	pop	r11
     648:	af 90       	pop	r10
     64a:	9f 90       	pop	r9
     64c:	8f 90       	pop	r8
     64e:	7f 90       	pop	r7
     650:	6f 90       	pop	r6
     652:	5f 90       	pop	r5
     654:	4f 90       	pop	r4
     656:	3f 90       	pop	r3
     658:	2f 90       	pop	r2
     65a:	08 95       	ret

0000065c <_Z6NotifyPKc>:
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	ec 01       	movw	r28, r24
     662:	8d e0       	ldi	r24, 0x0D	; 13
     664:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
     668:	8a e0       	ldi	r24, 0x0A	; 10
     66a:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
     66e:	fe 01       	movw	r30, r28
     670:	84 91       	lpm	r24, Z
     672:	88 23       	and	r24, r24
     674:	49 f0       	breq	.+18     	; 0x688 <_Z6NotifyPKc+0x2c>
     676:	fe 01       	movw	r30, r28
     678:	84 91       	lpm	r24, Z
     67a:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
     67e:	21 96       	adiw	r28, 0x01	; 1
     680:	fe 01       	movw	r30, r28
     682:	84 91       	lpm	r24, Z
     684:	81 11       	cpse	r24, r1
     686:	f7 cf       	rjmp	.-18     	; 0x676 <_Z6NotifyPKc+0x1a>
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <_Z15printStringCRNLPKc>:

void printStringCRNL(const char *p){
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	ec 01       	movw	r28, r24
	USART_Transmit('\r');
     694:	8d e0       	ldi	r24, 0x0D	; 13
     696:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
	USART_Transmit('\n');
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
	while(*p != 0){
     6a0:	88 81       	ld	r24, Y
     6a2:	88 23       	and	r24, r24
     6a4:	31 f0       	breq	.+12     	; 0x6b2 <_Z15printStringCRNLPKc+0x24>
     6a6:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     6a8:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
}

void printStringCRNL(const char *p){
	USART_Transmit('\r');
	USART_Transmit('\n');
	while(*p != 0){
     6ac:	89 91       	ld	r24, Y+
     6ae:	81 11       	cpse	r24, r1
     6b0:	fb cf       	rjmp	.-10     	; 0x6a8 <_Z15printStringCRNLPKc+0x1a>
		USART_Transmit(*p);
		p++;
	}
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <_Z11printStringPKc>:

void printString(const char *p){
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	ec 01       	movw	r28, r24
	while(*p != 0){
     6be:	88 81       	ld	r24, Y
     6c0:	88 23       	and	r24, r24
     6c2:	31 f0       	breq	.+12     	; 0x6d0 <_Z11printStringPKc+0x18>
     6c4:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     6c6:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
		p++;
	}
}

void printString(const char *p){
	while(*p != 0){
     6ca:	89 91       	ld	r24, Y+
     6cc:	81 11       	cpse	r24, r1
     6ce:	fb cf       	rjmp	.-10     	; 0x6c6 <_Z11printStringPKc+0xe>
		USART_Transmit(*p);
		p++;
	}
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <_Z16hexArrayToStringPhh>:
		data >>= 8;
	}
	return array;
} 

char* hexArrayToString(uint8_t *data, uint8_t length){
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	f6 2e       	mov	r15, r22
	static char str[64], t;
	data += length - 1;
     6e2:	06 2f       	mov	r16, r22
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	01 50       	subi	r16, 0x01	; 1
     6e8:	11 09       	sbc	r17, r1
     6ea:	08 0f       	add	r16, r24
     6ec:	19 1f       	adc	r17, r25
		p++;
	}
}

void printChar(unsigned char data){
	USART_Transmit(data);
     6ee:	80 e3       	ldi	r24, 0x30	; 48
     6f0:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
     6f4:	88 e7       	ldi	r24, 0x78	; 120
     6f6:	0e 94 1a 02 	call	0x434	; 0x434 <_Z14USART_Transmith>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     6fa:	ff 20       	and	r15, r15
     6fc:	81 f0       	breq	.+32     	; 0x71e <_Z16hexArrayToStringPhh+0x48>
     6fe:	e8 01       	movw	r28, r16
     700:	21 96       	adiw	r28, 0x01	; 1
     702:	8f ef       	ldi	r24, 0xFF	; 255
     704:	8f 0d       	add	r24, r15
     706:	08 1b       	sub	r16, r24
     708:	11 09       	sbc	r17, r1
	{	
		t = *data;
     70a:	8a 91       	ld	r24, -Y
     70c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_ZZ16hexArrayToStringPhhE1t>
		printString(hexToString(t));
     710:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_Z11hexToStringh>
     714:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z11printStringPKc>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     718:	c0 17       	cp	r28, r16
     71a:	d1 07       	cpc	r29, r17
     71c:	b1 f7       	brne	.-20     	; 0x70a <_Z16hexArrayToStringPhh+0x34>
	{	
		t = *data;
		printString(hexToString(t));
		data -= 1;
	}
	str[length + 2] = 0;
     71e:	ef 2d       	mov	r30, r15
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	e3 5b       	subi	r30, 0xB3	; 179
     724:	fe 4f       	sbci	r31, 0xFE	; 254
     726:	12 82       	std	Z+2, r1	; 0x02
	return str;
}
     728:	8d e4       	ldi	r24, 0x4D	; 77
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	08 95       	ret

00000738 <_Z14printHexNumberyh>:
	ascii[1] = hexToASCII(temp);
	ascii[2] = '\0';
	return ascii;
}

void printHexNumber(uint64_t data,uint8_t length){
     738:	0f 93       	push	r16
	printString(hexArrayToString(numToArray((data)),length));
     73a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_Z10numToArrayy>
     73e:	60 2f       	mov	r22, r16
     740:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z16hexArrayToStringPhh>
     744:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z11printStringPKc>
}
     748:	0f 91       	pop	r16
     74a:	08 95       	ret

0000074c <_ZN8NRF24L0114toggleActivateEv>:
	for(i = 0; i < BufferLength_MasterRX; i++){
		SPI_MasterTransmit(*data);
		data += 1;
	}
	CSN = 1;
}
     74c:	40 98       	cbi	0x08, 0	; 8
     74e:	80 e5       	ldi	r24, 0x50	; 80
     750:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z18SPI_MasterTransmitc>
     754:	83 e7       	ldi	r24, 0x73	; 115
     756:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z18SPI_MasterTransmitc>
     75a:	40 9a       	sbi	0x08, 0	; 8
     75c:	08 95       	ret

0000075e <_ZN8NRF24L0114sendSPICommandEh>:
     75e:	86 2f       	mov	r24, r22
     760:	40 98       	cbi	0x08, 0	; 8
     762:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z18SPI_MasterTransmitc>
     766:	40 9a       	sbi	0x08, 0	; 8
     768:	08 95       	ret

0000076a <_ZN8NRF24L0115readSPIRegisterEhh>:
     76a:	af 92       	push	r10
     76c:	bf 92       	push	r11
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	86 2f       	mov	r24, r22
     780:	a4 2e       	mov	r10, r20
     782:	40 98       	cbi	0x08, 0	; 8
     784:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z18SPI_MasterTransmitc>
     788:	aa 20       	and	r10, r10
     78a:	21 f1       	breq	.+72     	; 0x7d4 <_ZN8NRF24L0115readSPIRegisterEhh+0x6a>
     78c:	d0 e0       	ldi	r29, 0x00	; 0
     78e:	c0 e0       	ldi	r28, 0x00	; 0
     790:	b1 2c       	mov	r11, r1
     792:	c1 2c       	mov	r12, r1
     794:	d1 2c       	mov	r13, r1
     796:	e1 2c       	mov	r14, r1
     798:	f1 2c       	mov	r15, r1
     79a:	00 e0       	ldi	r16, 0x00	; 0
     79c:	10 e0       	ldi	r17, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z18SPI_MasterTransmitc>
     7a4:	2c 2f       	mov	r18, r28
     7a6:	28 2b       	or	r18, r24
     7a8:	3b 2d       	mov	r19, r11
     7aa:	4c 2d       	mov	r20, r12
     7ac:	5d 2d       	mov	r21, r13
     7ae:	6e 2d       	mov	r22, r14
     7b0:	7f 2d       	mov	r23, r15
     7b2:	80 2f       	mov	r24, r16
     7b4:	91 2f       	mov	r25, r17
     7b6:	08 e0       	ldi	r16, 0x08	; 8
     7b8:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__ashldi3>
     7bc:	c2 2f       	mov	r28, r18
     7be:	b3 2e       	mov	r11, r19
     7c0:	c4 2e       	mov	r12, r20
     7c2:	d5 2e       	mov	r13, r21
     7c4:	e6 2e       	mov	r14, r22
     7c6:	f7 2e       	mov	r15, r23
     7c8:	08 2f       	mov	r16, r24
     7ca:	19 2f       	mov	r17, r25
     7cc:	df 5f       	subi	r29, 0xFF	; 255
     7ce:	da 11       	cpse	r29, r10
     7d0:	e6 cf       	rjmp	.-52     	; 0x79e <_ZN8NRF24L0115readSPIRegisterEhh+0x34>
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <_ZN8NRF24L0115readSPIRegisterEhh+0x7a>
     7d4:	c0 e0       	ldi	r28, 0x00	; 0
     7d6:	b1 2c       	mov	r11, r1
     7d8:	c1 2c       	mov	r12, r1
     7da:	d1 2c       	mov	r13, r1
     7dc:	e1 2c       	mov	r14, r1
     7de:	f1 2c       	mov	r15, r1
     7e0:	00 e0       	ldi	r16, 0x00	; 0
     7e2:	10 e0       	ldi	r17, 0x00	; 0
     7e4:	40 9a       	sbi	0x08, 0	; 8
     7e6:	2c 2f       	mov	r18, r28
     7e8:	3b 2d       	mov	r19, r11
     7ea:	4c 2d       	mov	r20, r12
     7ec:	5d 2d       	mov	r21, r13
     7ee:	6e 2d       	mov	r22, r14
     7f0:	7f 2d       	mov	r23, r15
     7f2:	80 2f       	mov	r24, r16
     7f4:	91 2f       	mov	r25, r17
     7f6:	08 e0       	ldi	r16, 0x08	; 8
     7f8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__lshrdi3>
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	bf 90       	pop	r11
     80e:	af 90       	pop	r10
     810:	08 95       	ret

00000812 <_ZN8NRF24L018isRXFullEv>:
     812:	41 e0       	ldi	r20, 0x01	; 1
     814:	67 e1       	ldi	r22, 0x17	; 23
     816:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN8NRF24L0115readSPIRegisterEhh>
     81a:	82 2f       	mov	r24, r18
     81c:	82 70       	andi	r24, 0x02	; 2
     81e:	08 95       	ret

00000820 <_ZN8NRF24L0111isDataReadyEv>:
     820:	0f 93       	push	r16
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	67 e0       	ldi	r22, 0x07	; 7
     826:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN8NRF24L0115readSPIRegisterEhh>
     82a:	06 e0       	ldi	r16, 0x06	; 6
     82c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__lshrdi3>
     830:	82 2f       	mov	r24, r18
     832:	81 70       	andi	r24, 0x01	; 1
     834:	0f 91       	pop	r16
     836:	08 95       	ret

00000838 <_ZN8NRF24L0116writeSPIRegisterEhyh>:
     838:	9f 92       	push	r9
     83a:	af 92       	push	r10
     83c:	bf 92       	push	r11
     83e:	cf 92       	push	r12
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	c2 2f       	mov	r28, r18
     850:	d3 2f       	mov	r29, r19
     852:	b4 2e       	mov	r11, r20
     854:	a5 2e       	mov	r10, r21
     856:	40 98       	cbi	0x08, 0	; 8
     858:	86 2f       	mov	r24, r22
     85a:	80 62       	ori	r24, 0x20	; 32
     85c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z18SPI_MasterTransmitc>
     860:	98 2e       	mov	r9, r24
     862:	cc 20       	and	r12, r12
     864:	d1 f0       	breq	.+52     	; 0x89a <_ZN8NRF24L0116writeSPIRegisterEhyh+0x62>
     866:	d1 2c       	mov	r13, r1
     868:	8e 2d       	mov	r24, r14
     86a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z18SPI_MasterTransmitc>
     86e:	2e 2d       	mov	r18, r14
     870:	3f 2d       	mov	r19, r15
     872:	40 2f       	mov	r20, r16
     874:	51 2f       	mov	r21, r17
     876:	6c 2f       	mov	r22, r28
     878:	7d 2f       	mov	r23, r29
     87a:	8b 2d       	mov	r24, r11
     87c:	9a 2d       	mov	r25, r10
     87e:	08 e0       	ldi	r16, 0x08	; 8
     880:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__lshrdi3>
     884:	e2 2e       	mov	r14, r18
     886:	f3 2e       	mov	r15, r19
     888:	04 2f       	mov	r16, r20
     88a:	15 2f       	mov	r17, r21
     88c:	c6 2f       	mov	r28, r22
     88e:	d7 2f       	mov	r29, r23
     890:	b8 2e       	mov	r11, r24
     892:	a9 2e       	mov	r10, r25
     894:	d3 94       	inc	r13
     896:	dc 10       	cpse	r13, r12
     898:	e7 cf       	rjmp	.-50     	; 0x868 <_ZN8NRF24L0116writeSPIRegisterEhyh+0x30>
     89a:	40 9a       	sbi	0x08, 0	; 8
     89c:	89 2d       	mov	r24, r9
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	bf 90       	pop	r11
     8b0:	af 90       	pop	r10
     8b2:	9f 90       	pop	r9
     8b4:	08 95       	ret

000008b6 <_ZN8NRF24L017powerONEb>:
     8b6:	cf 92       	push	r12
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	ec 01       	movw	r28, r24
     8c6:	e6 2e       	mov	r14, r22
     8c8:	41 e0       	ldi	r20, 0x01	; 1
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN8NRF24L0115readSPIRegisterEhh>
     8d0:	2d 7f       	andi	r18, 0xFD	; 253
     8d2:	ee 0c       	add	r14, r14
     8d4:	e2 2a       	or	r14, r18
     8d6:	eb 82       	std	Y+3, r14	; 0x03
     8d8:	cc 24       	eor	r12, r12
     8da:	c3 94       	inc	r12
     8dc:	f1 2c       	mov	r15, r1
     8de:	00 e0       	ldi	r16, 0x00	; 0
     8e0:	10 e0       	ldi	r17, 0x00	; 0
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	ce 01       	movw	r24, r28
     8ee:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	cf 90       	pop	r12
     900:	08 95       	ret

00000902 <_ZN8NRF24L017setModeEb>:
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
     918:	d6 2e       	mov	r13, r22
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN8NRF24L0115readSPIRegisterEhh>
     922:	2b 83       	std	Y+3, r18	; 0x03
     924:	01 e0       	ldi	r16, 0x01	; 1
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 9c 03 	call	0x738	; 0x738 <_Z14printHexNumberyh>
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	8e 7f       	andi	r24, 0xFE	; 254
     93c:	ed 2c       	mov	r14, r13
     93e:	e8 2a       	or	r14, r24
     940:	eb 82       	std	Y+3, r14	; 0x03
     942:	cc 24       	eor	r12, r12
     944:	c3 94       	inc	r12
     946:	f1 2c       	mov	r15, r1
     948:	00 e0       	ldi	r16, 0x00	; 0
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	ce 01       	movw	r24, r28
     958:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     95c:	dd 20       	and	r13, r13
     95e:	29 f0       	breq	.+10     	; 0x96a <_ZN8NRF24L017setModeEb+0x68>
     960:	8d ed       	ldi	r24, 0xDD	; 221
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 2e 03 	call	0x65c	; 0x65c <_Z6NotifyPKc>
     968:	04 c0       	rjmp	.+8      	; 0x972 <_ZN8NRF24L017setModeEb+0x70>
     96a:	87 eb       	ldi	r24, 0xB7	; 183
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 2e 03 	call	0x65c	; 0x65c <_Z6NotifyPKc>
     972:	41 e0       	ldi	r20, 0x01	; 1
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	ce 01       	movw	r24, r28
     978:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN8NRF24L0115readSPIRegisterEhh>
     97c:	ab 80       	ldd	r10, Y+3	; 0x03
     97e:	b1 2c       	mov	r11, r1
     980:	c1 2c       	mov	r12, r1
     982:	d1 2c       	mov	r13, r1
     984:	e1 2c       	mov	r14, r1
     986:	f1 2c       	mov	r15, r1
     988:	00 e0       	ldi	r16, 0x00	; 0
     98a:	10 e0       	ldi	r17, 0x00	; 0
     98c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__cmpdi2>
     990:	29 f0       	breq	.+10     	; 0x99c <_ZN8NRF24L017setModeEb+0x9a>
     992:	81 e8       	ldi	r24, 0x81	; 129
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 2e 03 	call	0x65c	; 0x65c <_Z6NotifyPKc>
     99a:	04 c0       	rjmp	.+8      	; 0x9a4 <_ZN8NRF24L017setModeEb+0xa2>
     99c:	88 e6       	ldi	r24, 0x68	; 104
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 2e 03 	call	0x65c	; 0x65c <_Z6NotifyPKc>
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	bf 90       	pop	r11
     9b6:	af 90       	pop	r10
     9b8:	08 95       	ret

000009ba <_ZN8NRF24L0120enableACKWithPayloadEb>:
     9ba:	cf 92       	push	r12
     9bc:	ef 92       	push	r14
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	ec 01       	movw	r28, r24
     9ca:	e6 2e       	mov	r14, r22
     9cc:	41 e0       	ldi	r20, 0x01	; 1
     9ce:	6d e1       	ldi	r22, 0x1D	; 29
     9d0:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN8NRF24L0115readSPIRegisterEhh>
     9d4:	2d 7f       	andi	r18, 0xFD	; 253
     9d6:	ee 0c       	add	r14, r14
     9d8:	e2 2a       	or	r14, r18
     9da:	eb 82       	std	Y+3, r14	; 0x03
     9dc:	cc 24       	eor	r12, r12
     9de:	c3 94       	inc	r12
     9e0:	f1 2c       	mov	r15, r1
     9e2:	00 e0       	ldi	r16, 0x00	; 0
     9e4:	10 e0       	ldi	r17, 0x00	; 0
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	6d e1       	ldi	r22, 0x1D	; 29
     9f0:	ce 01       	movw	r24, r28
     9f2:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	cf 90       	pop	r12
     a04:	08 95       	ret

00000a06 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>:
     a06:	cf 92       	push	r12
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	ec 01       	movw	r28, r24
     a16:	e6 2e       	mov	r14, r22
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	6d e1       	ldi	r22, 0x1D	; 29
     a1c:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN8NRF24L0115readSPIRegisterEhh>
     a20:	2b 7f       	andi	r18, 0xFB	; 251
     a22:	ee 0c       	add	r14, r14
     a24:	ee 0c       	add	r14, r14
     a26:	e2 2a       	or	r14, r18
     a28:	eb 82       	std	Y+3, r14	; 0x03
     a2a:	cc 24       	eor	r12, r12
     a2c:	c3 94       	inc	r12
     a2e:	f1 2c       	mov	r15, r1
     a30:	00 e0       	ldi	r16, 0x00	; 0
     a32:	10 e0       	ldi	r17, 0x00	; 0
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	6d e1       	ldi	r22, 0x1D	; 29
     a3e:	ce 01       	movw	r24, r28
     a40:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	cf 90       	pop	r12
     a52:	08 95       	ret

00000a54 <_ZN8NRF24L0118enableDPLForRXPipeEhb>:
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	66 30       	cpi	r22, 0x06	; 6
     a68:	48 f5       	brcc	.+82     	; 0xabc <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x68>
     a6a:	c4 2f       	mov	r28, r20
     a6c:	d6 2f       	mov	r29, r22
     a6e:	5c 01       	movw	r10, r24
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	6c e1       	ldi	r22, 0x1C	; 28
     a74:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN8NRF24L0115readSPIRegisterEhh>
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0d 2e       	mov	r0, r29
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x30>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	0a 94       	dec	r0
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x2c>
     a88:	80 95       	com	r24
     a8a:	82 23       	and	r24, r18
     a8c:	4c 2f       	mov	r20, r28
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x42>
     a92:	44 0f       	add	r20, r20
     a94:	55 1f       	adc	r21, r21
     a96:	da 95       	dec	r29
     a98:	e2 f7       	brpl	.-8      	; 0xa92 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x3e>
     a9a:	e8 2e       	mov	r14, r24
     a9c:	e4 2a       	or	r14, r20
     a9e:	f5 01       	movw	r30, r10
     aa0:	e3 82       	std	Z+3, r14	; 0x03
     aa2:	cc 24       	eor	r12, r12
     aa4:	c3 94       	inc	r12
     aa6:	f1 2c       	mov	r15, r1
     aa8:	00 e0       	ldi	r16, 0x00	; 0
     aaa:	10 e0       	ldi	r17, 0x00	; 0
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	6c e1       	ldi	r22, 0x1C	; 28
     ab6:	c5 01       	movw	r24, r10
     ab8:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	cf 90       	pop	r12
     aca:	bf 90       	pop	r11
     acc:	af 90       	pop	r10
     ace:	08 95       	ret

00000ad0 <_ZN8NRF24L0110clearRX_DREv>:
     ad0:	cf 92       	push	r12
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cc 24       	eor	r12, r12
     adc:	c3 94       	inc	r12
     ade:	68 94       	set
     ae0:	ee 24       	eor	r14, r14
     ae2:	e6 f8       	bld	r14, 6
     ae4:	f1 2c       	mov	r15, r1
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	10 e0       	ldi	r17, 0x00	; 0
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	67 e0       	ldi	r22, 0x07	; 7
     af4:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	cf 90       	pop	r12
     b02:	08 95       	ret

00000b04 <_ZN8NRF24L0113setRFDataRateEb>:
     b04:	cf 92       	push	r12
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	ec 01       	movw	r28, r24
     b14:	e6 2e       	mov	r14, r22
     b16:	41 e0       	ldi	r20, 0x01	; 1
     b18:	66 e0       	ldi	r22, 0x06	; 6
     b1a:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN8NRF24L0115readSPIRegisterEhh>
     b1e:	27 7f       	andi	r18, 0xF7	; 247
     b20:	ee 0c       	add	r14, r14
     b22:	ee 0c       	add	r14, r14
     b24:	ee 0c       	add	r14, r14
     b26:	e2 2a       	or	r14, r18
     b28:	eb 82       	std	Y+3, r14	; 0x03
     b2a:	cc 24       	eor	r12, r12
     b2c:	c3 94       	inc	r12
     b2e:	f1 2c       	mov	r15, r1
     b30:	00 e0       	ldi	r16, 0x00	; 0
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	66 e0       	ldi	r22, 0x06	; 6
     b3e:	ce 01       	movw	r24, r28
     b40:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	cf 90       	pop	r12
     b52:	08 95       	ret

00000b54 <_ZN8NRF24L0118setTransmitAddressEy>:
     b54:	cf 92       	push	r12
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	0f 2e       	mov	r0, r31
     b60:	f5 e0       	ldi	r31, 0x05	; 5
     b62:	cf 2e       	mov	r12, r31
     b64:	f0 2d       	mov	r31, r0
     b66:	e0 2e       	mov	r14, r16
     b68:	f1 2e       	mov	r15, r17
     b6a:	02 2f       	mov	r16, r18
     b6c:	13 2f       	mov	r17, r19
     b6e:	24 2f       	mov	r18, r20
     b70:	35 2f       	mov	r19, r21
     b72:	46 2f       	mov	r20, r22
     b74:	57 2f       	mov	r21, r23
     b76:	60 e1       	ldi	r22, 0x10	; 16
     b78:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	cf 90       	pop	r12
     b86:	08 95       	ret

00000b88 <_ZN8NRF24L0118setReceive0AddressEy>:
     b88:	cf 92       	push	r12
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	0f 2e       	mov	r0, r31
     b94:	f5 e0       	ldi	r31, 0x05	; 5
     b96:	cf 2e       	mov	r12, r31
     b98:	f0 2d       	mov	r31, r0
     b9a:	e0 2e       	mov	r14, r16
     b9c:	f1 2e       	mov	r15, r17
     b9e:	02 2f       	mov	r16, r18
     ba0:	13 2f       	mov	r17, r19
     ba2:	24 2f       	mov	r18, r20
     ba4:	35 2f       	mov	r19, r21
     ba6:	46 2f       	mov	r20, r22
     ba8:	57 2f       	mov	r21, r23
     baa:	6a e0       	ldi	r22, 0x0A	; 10
     bac:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	cf 90       	pop	r12
     bba:	08 95       	ret

00000bbc <_ZN8NRF24L0110initializeEv>:
     bbc:	cf 92       	push	r12
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	ec 01       	movw	r28, r24
     bcc:	38 9a       	sbi	0x07, 0	; 7
     bce:	39 9a       	sbi	0x07, 1	; 7
     bd0:	41 9a       	sbi	0x08, 1	; 8
     bd2:	57 9a       	sbi	0x0a, 7	; 10
     bd4:	1a 82       	std	Y+2, r1	; 0x02
     bd6:	85 e2       	ldi	r24, 0x25	; 37
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 2e 03 	call	0x65c	; 0x65c <_Z6NotifyPKc>
     bde:	28 81       	ld	r18, Y
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 92 02 	call	0x524	; 0x524 <_Z11printNumbery>
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 2e 03 	call	0x65c	; 0x65c <_Z6NotifyPKc>
     bfa:	29 81       	ldd	r18, Y+1	; 0x01
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 92 02 	call	0x524	; 0x524 <_Z11printNumbery>
     c0e:	05 eb       	ldi	r16, 0xB5	; 181
     c10:	1a eb       	ldi	r17, 0xBA	; 186
     c12:	2a eb       	ldi	r18, 0xBA	; 186
     c14:	3a eb       	ldi	r19, 0xBA	; 186
     c16:	4a eb       	ldi	r20, 0xBA	; 186
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	ce 01       	movw	r24, r28
     c20:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN8NRF24L0118setTransmitAddressEy>
     c24:	2a eb       	ldi	r18, 0xBA	; 186
     c26:	3a eb       	ldi	r19, 0xBA	; 186
     c28:	4a eb       	ldi	r20, 0xBA	; 186
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	ce 01       	movw	r24, r28
     c32:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN8NRF24L0118setReceive0AddressEy>
     c36:	cc 24       	eor	r12, r12
     c38:	c3 94       	inc	r12
     c3a:	e1 2c       	mov	r14, r1
     c3c:	f1 2c       	mov	r15, r1
     c3e:	00 e0       	ldi	r16, 0x00	; 0
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	64 e0       	ldi	r22, 0x04	; 4
     c4c:	ce 01       	movw	r24, r28
     c4e:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	ce 01       	movw	r24, r28
     c56:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN8NRF24L0113setRFDataRateEb>
     c5a:	6f 81       	ldd	r22, Y+7	; 0x07
     c5c:	ce 01       	movw	r24, r28
     c5e:	0e 94 81 04 	call	0x902	; 0x902 <_ZN8NRF24L017setModeEb>
     c62:	88 85       	ldd	r24, Y+8	; 0x08
     c64:	88 23       	and	r24, r24
     c66:	81 f0       	breq	.+32     	; 0xc88 <_ZN8NRF24L0110initializeEv+0xcc>
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN8NRF24L0114toggleActivateEv>
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	ce 01       	movw	r24, r28
     c72:	0e 94 03 05 	call	0xa06	; 0xa06 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN8NRF24L0118enableDPLForRXPipeEhb>
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN8NRF24L0120enableACKWithPayloadEb>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	ce 01       	movw	r24, r28
     c8c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN8NRF24L017powerONEb>
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	cf 90       	pop	r12
     c9e:	08 95       	ret

00000ca0 <_ZN8NRF24L01C1Ehhb>:
     ca0:	3f ef       	ldi	r19, 0xFF	; 255
     ca2:	51 ee       	ldi	r21, 0xE1	; 225
     ca4:	74 e0       	ldi	r23, 0x04	; 4
     ca6:	31 50       	subi	r19, 0x01	; 1
     ca8:	50 40       	sbci	r21, 0x00	; 0
     caa:	70 40       	sbci	r23, 0x00	; 0
     cac:	e1 f7       	brne	.-8      	; 0xca6 <_ZN8NRF24L01C1Ehhb+0x6>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <_ZN8NRF24L01C1Ehhb+0x10>
     cb0:	00 00       	nop
     cb2:	fc 01       	movw	r30, r24
     cb4:	27 83       	std	Z+7, r18	; 0x07
     cb6:	21 e0       	ldi	r18, 0x01	; 1
     cb8:	20 87       	std	Z+8, r18	; 0x08
     cba:	60 83       	st	Z, r22
     cbc:	41 83       	std	Z+1, r20	; 0x01
     cbe:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN8NRF24L0110initializeEv>
     cc2:	08 95       	ret

00000cc4 <_ZN8NRF24L017flushRXEv>:
void NRF24L01::flushTX(){
	sendSPICommand(FLUSH_TX);
}

void NRF24L01::flushRX(){
	sendSPICommand(FLUSH_RX);
     cc4:	62 ee       	ldi	r22, 0xE2	; 226
     cc6:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0114sendSPICommandEh>
     cca:	08 95       	ret

00000ccc <_ZN8NRF24L018readFIFOEPVh>:
		data += 1;
	}
	CSN = 1;
}

void NRF24L01::readFIFO(volatile uint8_t *data){
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	5c 01       	movw	r10, r24
     ce4:	d6 2e       	mov	r13, r22
     ce6:	97 2e       	mov	r9, r23
	writeSPIRegister(STATUS, (1 << 6), 1);
     ce8:	cc 24       	eor	r12, r12
     cea:	c3 94       	inc	r12
     cec:	68 94       	set
     cee:	ee 24       	eor	r14, r14
     cf0:	e6 f8       	bld	r14, 6
     cf2:	f1 2c       	mov	r15, r1
     cf4:	00 e0       	ldi	r16, 0x00	; 0
     cf6:	10 e0       	ldi	r17, 0x00	; 0
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	67 e0       	ldi	r22, 0x07	; 7
     d02:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN8NRF24L0116writeSPIRegisterEhyh>
	CSN = 0;
     d06:	40 98       	cbi	0x08, 0	; 8
	SPI_MasterTransmit(0x61);
     d08:	81 e6       	ldi	r24, 0x61	; 97
     d0a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z18SPI_MasterTransmitc>
	for(uint8_t i = 0; i < BufferLength_MasterTX; i++){
     d0e:	f5 01       	movw	r30, r10
     d10:	80 81       	ld	r24, Z
     d12:	88 23       	and	r24, r24
     d14:	61 f0       	breq	.+24     	; 0xd2e <_ZN8NRF24L018readFIFOEPVh+0x62>
     d16:	cd 2d       	mov	r28, r13
     d18:	d9 2d       	mov	r29, r9
		*data =  SPI_MasterTransmit(0x00);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z18SPI_MasterTransmitc>
     d20:	89 93       	st	Y+, r24
     d22:	2c 2f       	mov	r18, r28
     d24:	2d 19       	sub	r18, r13

void NRF24L01::readFIFO(volatile uint8_t *data){
	writeSPIRegister(STATUS, (1 << 6), 1);
	CSN = 0;
	SPI_MasterTransmit(0x61);
	for(uint8_t i = 0; i < BufferLength_MasterTX; i++){
     d26:	f5 01       	movw	r30, r10
     d28:	90 81       	ld	r25, Z
     d2a:	29 17       	cp	r18, r25
     d2c:	b0 f3       	brcs	.-20     	; 0xd1a <_ZN8NRF24L018readFIFOEPVh+0x4e>
		*data =  SPI_MasterTransmit(0x00);
		data += 1;
	}
	CSN = 1;
     d2e:	40 9a       	sbi	0x08, 0	; 8
	if(isRXFull()){
     d30:	c5 01       	movw	r24, r10
     d32:	0e 94 09 04 	call	0x812	; 0x812 <_ZN8NRF24L018isRXFullEv>
     d36:	88 23       	and	r24, r24
     d38:	19 f0       	breq	.+6      	; 0xd40 <_ZN8NRF24L018readFIFOEPVh+0x74>
		flushRX();
     d3a:	c5 01       	movw	r24, r10
     d3c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_ZN8NRF24L017flushRXEv>
	}
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	bf 90       	pop	r11
     d52:	af 90       	pop	r10
     d54:	9f 90       	pop	r9
     d56:	08 95       	ret

00000d58 <_ZN11SwitchClass9doNothingEh>:
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     d58:	08 95       	ret

00000d5a <_ZN11SwitchClass5beginEv>:
     d5a:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <_ZN11SwitchClass1iE>
     d5e:	8c ea       	ldi	r24, 0xAC	; 172
     d60:	96 e0       	ldi	r25, 0x06	; 6
     d62:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     d66:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZN11SwitchClass17PinStateChangePtrE>
     d6a:	08 95       	ret

00000d6c <_ZN11SwitchClass10shortPressEPFvhE>:
     d6c:	fc 01       	movw	r30, r24
     d6e:	77 87       	std	Z+15, r23	; 0x0f
     d70:	66 87       	std	Z+14, r22	; 0x0e
     d72:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     d76:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <_ZN11SwitchClass16AllShortPressPtrE>
     d7a:	21 e0       	ldi	r18, 0x01	; 1
     d7c:	24 8f       	std	Z+28, r18	; 0x1c
     d7e:	08 95       	ret

00000d80 <_ZN11SwitchClass18doubleWaitCompleteEv>:
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	ec 01       	movw	r28, r24
     d86:	1b a2       	std	Y+35, r1	; 0x23
     d88:	1c a2       	std	Y+36, r1	; 0x24
     d8a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN10TimerClass10resetTimerEv>
     d8e:	ce 01       	movw	r24, r28
     d90:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN10TimerClass18resetCallbackTimerEv>
     d94:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d96:	81 11       	cpse	r24, r1
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <_ZN11SwitchClass18doubleWaitCompleteEv+0x22>
     d9a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN11SwitchClass11AllShort_ENE>
     d9e:	88 23       	and	r24, r24
     da0:	c9 f0       	breq	.+50     	; 0xdd4 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     da2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
     da6:	88 23       	and	r24, r24
     da8:	61 f0       	breq	.+24     	; 0xdc2 <_ZN11SwitchClass18doubleWaitCompleteEv+0x42>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     db0:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <_ZN11SwitchClass16AllShortPressPtrE>
     db4:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     db8:	30 97       	sbiw	r30, 0x00	; 0
     dba:	61 f0       	breq	.+24     	; 0xdd4 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     dbc:	8e a1       	ldd	r24, Y+38	; 0x26
     dbe:	09 95       	icall
     dc0:	09 c0       	rjmp	.+18     	; 0xdd4 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     dc8:	ee 85       	ldd	r30, Y+14	; 0x0e
     dca:	ff 85       	ldd	r31, Y+15	; 0x0f
     dcc:	30 97       	sbiw	r30, 0x00	; 0
     dce:	11 f0       	breq	.+4      	; 0xdd4 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     dd0:	8e a1       	ldd	r24, Y+38	; 0x26
     dd2:	09 95       	icall
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <_ZN11SwitchClass17callAllDoubleWaitEh>:
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
     de2:	99 23       	and	r25, r25
     de4:	c1 f0       	breq	.+48     	; 0xe16 <_ZN11SwitchClass17callAllDoubleWaitEh+0x3c>
     de6:	d8 2f       	mov	r29, r24
     de8:	c0 e0       	ldi	r28, 0x00	; 0
     dea:	ec 2f       	mov	r30, r28
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	e0 55       	subi	r30, 0x50	; 80
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	01 90       	ld	r0, Z+
     df8:	f0 81       	ld	r31, Z
     dfa:	e0 2d       	mov	r30, r0
     dfc:	91 a5       	ldd	r25, Z+41	; 0x29
     dfe:	9d 13       	cpse	r25, r29
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     e02:	30 97       	sbiw	r30, 0x00	; 0
     e04:	19 f0       	breq	.+6      	; 0xe0c <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     e06:	cf 01       	movw	r24, r30
     e08:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN11SwitchClass18doubleWaitCompleteEv>
     e0c:	cf 5f       	subi	r28, 0xFF	; 255
     e0e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
     e12:	c9 17       	cp	r28, r25
     e14:	50 f3       	brcs	.-44     	; 0xdea <_ZN11SwitchClass17callAllDoubleWaitEh+0x10>
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <_ZN11SwitchClass17enableSamePtrModeEb>:
     e1c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
     e20:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_ZN11SwitchClass11AllShort_ENE>
     e24:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <_ZN11SwitchClass12AllDouble_ENE>
     e28:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_ZN11SwitchClass10AllLong_ENE>
     e2c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <_ZN11SwitchClass20AllContinuousLong_ENE>
     e30:	08 95       	ret

00000e32 <_ZN11SwitchClass16updatePinBuffersEv>:
     e32:	83 b1       	in	r24, 0x03	; 3
     e34:	eb ea       	ldi	r30, 0xAB	; 171
     e36:	f1 e0       	ldi	r31, 0x01	; 1
     e38:	80 83       	st	Z, r24
     e3a:	86 b1       	in	r24, 0x06	; 6
     e3c:	81 83       	std	Z+1, r24	; 0x01
     e3e:	89 b1       	in	r24, 0x09	; 9
     e40:	82 83       	std	Z+2, r24	; 0x02
     e42:	08 95       	ret

00000e44 <_ZN11SwitchClass10pollSwitchEv>:
     e44:	fc 01       	movw	r30, r24
     e46:	80 a5       	ldd	r24, Z+40	; 0x28
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	49 f0       	breq	.+18     	; 0xe5e <_ZN11SwitchClass10pollSwitchEv+0x1a>
     e4c:	18 f0       	brcs	.+6      	; 0xe54 <_ZN11SwitchClass10pollSwitchEv+0x10>
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	59 f0       	breq	.+22     	; 0xe68 <_ZN11SwitchClass10pollSwitchEv+0x24>
     e52:	0e c0       	rjmp	.+28     	; 0xe70 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e54:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN11SwitchClass9PinBufferE>
     e58:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e5e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <_ZN11SwitchClass9PinBufferE+0x1>
     e62:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e68:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN11SwitchClass9PinBufferE+0x2>
     e6c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e70:	82 8d       	ldd	r24, Z+26	; 0x1a
     e72:	81 a3       	std	Z+33, r24	; 0x21
     e74:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	07 a0       	ldd	r0, Z+39	; 0x27
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <_ZN11SwitchClass10pollSwitchEv+0x3e>
     e7e:	35 95       	asr	r19
     e80:	27 95       	ror	r18
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <_ZN11SwitchClass10pollSwitchEv+0x3a>
     e86:	21 70       	andi	r18, 0x01	; 1
     e88:	22 8f       	std	Z+26, r18	; 0x1a
     e8a:	08 95       	ret

00000e8c <_ZN11SwitchClass16initializeSwitchEhhPS_>:
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ec 01       	movw	r28, r24
     e9a:	f6 2e       	mov	r15, r22
     e9c:	e4 2e       	mov	r14, r20
     e9e:	89 01       	movw	r16, r18
     ea0:	1f 86       	std	Y+15, r1	; 0x0f
     ea2:	1e 86       	std	Y+14, r1	; 0x0e
     ea4:	1b 8a       	std	Y+19, r1	; 0x13
     ea6:	1a 8a       	std	Y+18, r1	; 0x12
     ea8:	19 8a       	std	Y+17, r1	; 0x11
     eaa:	18 8a       	std	Y+16, r1	; 0x10
     eac:	1d 8a       	std	Y+21, r1	; 0x15
     eae:	1c 8a       	std	Y+20, r1	; 0x14
     eb0:	1f 8a       	std	Y+23, r1	; 0x17
     eb2:	1e 8a       	std	Y+22, r1	; 0x16
     eb4:	19 8e       	std	Y+25, r1	; 0x19
     eb6:	18 8e       	std	Y+24, r1	; 0x18
     eb8:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN10TimerClass15initializeTimerEv>
     ebc:	ef a2       	std	Y+39, r14	; 0x27
     ebe:	f8 a6       	std	Y+40, r15	; 0x28
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	6e 2d       	mov	r22, r14
     ec4:	8f 2d       	mov	r24, r15
     ec6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z15setPinDirectionhhb>
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	6f a1       	ldd	r22, Y+39	; 0x27
     ece:	88 a5       	ldd	r24, Y+40	; 0x28
     ed0:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	6e 2d       	mov	r22, r14
     ed8:	8f 2d       	mov	r24, r15
     eda:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z21setPinChangeInterrupthhb>
     ede:	88 a5       	ldd	r24, Y+40	; 0x28
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	41 f0       	breq	.+16     	; 0xef4 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x68>
     ee4:	18 f0       	brcs	.+6      	; 0xeec <_ZN11SwitchClass16initializeSwitchEhhPS_+0x60>
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	49 f0       	breq	.+18     	; 0xefc <_ZN11SwitchClass16initializeSwitchEhhPS_+0x70>
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     eec:	83 b1       	in	r24, 0x03	; 3
     eee:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     ef4:	86 b1       	in	r24, 0x06	; 6
     ef6:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     efc:	89 b1       	in	r24, 0x09	; 9
     efe:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZN11SwitchClass11SwitchStateE>
     f02:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
     f06:	e8 2f       	mov	r30, r24
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	e0 55       	subi	r30, 0x50	; 80
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	11 83       	std	Z+1, r17	; 0x01
     f14:	00 83       	st	Z, r16
     f16:	8e a3       	std	Y+38, r24	; 0x26
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <_ZN11SwitchClass1iE>
     f1e:	ce 01       	movw	r24, r28
     f20:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN11SwitchClass16updatePinBuffersEv>
     f24:	ce 01       	movw	r24, r28
     f26:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN11SwitchClass10pollSwitchEv>
     f2a:	1f 8e       	std	Y+31, r1	; 0x1f
     f2c:	ce 01       	movw	r24, r28
     f2e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_ZN10TimerClass10getTimerIDEv>
     f32:	89 a7       	std	Y+41, r24	; 0x29
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	08 95       	ret

00000f42 <_ZN11SwitchClass18processStateChangeEv>:
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	ec 01       	movw	r28, r24
     f48:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN11SwitchClass10pollSwitchEv>
     f4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f4e:	81 11       	cpse	r24, r1
     f50:	20 c0       	rjmp	.+64     	; 0xf92 <_ZN11SwitchClass18processStateChangeEv+0x50>
     f52:	89 a1       	ldd	r24, Y+33	; 0x21
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <_ZN11SwitchClass18processStateChangeEv+0x18>
     f58:	78 c0       	rjmp	.+240    	; 0x104a <_ZN11SwitchClass18processStateChangeEv+0x108>
     f5a:	8b a1       	ldd	r24, Y+35	; 0x23
     f5c:	81 11       	cpse	r24, r1
     f5e:	08 c0       	rjmp	.+16     	; 0xf70 <_ZN11SwitchClass18processStateChangeEv+0x2e>
     f60:	25 eb       	ldi	r18, 0xB5	; 181
     f62:	38 e0       	ldi	r19, 0x08	; 8
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	6c eb       	ldi	r22, 0xBC	; 188
     f68:	72 e0       	ldi	r23, 0x02	; 2
     f6a:	ce 01       	movw	r24, r28
     f6c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	8a a3       	std	Y+34, r24	; 0x22
     f74:	8b a1       	ldd	r24, Y+35	; 0x23
     f76:	88 23       	and	r24, r24
     f78:	41 f0       	breq	.+16     	; 0xf8a <_ZN11SwitchClass18processStateChangeEv+0x48>
     f7a:	68 e5       	ldi	r22, 0x58	; 88
     f7c:	72 e0       	ldi	r23, 0x02	; 2
     f7e:	ce 01       	movw	r24, r28
     f80:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN10TimerClass7setTimeEj>
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	8c a3       	std	Y+36, r24	; 0x24
     f88:	1b a2       	std	Y+35, r1	; 0x23
     f8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f8c:	88 23       	and	r24, r24
     f8e:	09 f4       	brne	.+2      	; 0xf92 <_ZN11SwitchClass18processStateChangeEv+0x50>
     f90:	5c c0       	rjmp	.+184    	; 0x104a <_ZN11SwitchClass18processStateChangeEv+0x108>
     f92:	89 a1       	ldd	r24, Y+33	; 0x21
     f94:	81 11       	cpse	r24, r1
     f96:	59 c0       	rjmp	.+178    	; 0x104a <_ZN11SwitchClass18processStateChangeEv+0x108>
     f98:	8c a1       	ldd	r24, Y+36	; 0x24
     f9a:	81 11       	cpse	r24, r1
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <_ZN11SwitchClass18processStateChangeEv+0x68>
     f9e:	ce 01       	movw	r24, r28
     fa0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN10TimerClass15getCallBackTimeEv>
     fa4:	9d a7       	std	Y+45, r25	; 0x2d
     fa6:	8c a7       	std	Y+44, r24	; 0x2c
     fa8:	05 c0       	rjmp	.+10     	; 0xfb4 <_ZN11SwitchClass18processStateChangeEv+0x72>
     faa:	ce 01       	movw	r24, r28
     fac:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN10TimerClass7getTimeEv>
     fb0:	9d a7       	std	Y+45, r25	; 0x2d
     fb2:	8c a7       	std	Y+44, r24	; 0x2c
     fb4:	ce 01       	movw	r24, r28
     fb6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN10TimerClass10resetTimerEv>
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN10TimerClass18resetCallbackTimerEv>
     fc0:	1a a2       	std	Y+34, r1	; 0x22
     fc2:	8c a5       	ldd	r24, Y+44	; 0x2c
     fc4:	9d a5       	ldd	r25, Y+45	; 0x2d
     fc6:	0b 97       	sbiw	r24, 0x0b	; 11
     fc8:	8d 34       	cpi	r24, 0x4D	; 77
     fca:	92 40       	sbci	r25, 0x02	; 2
     fcc:	98 f5       	brcc	.+102    	; 0x1034 <_ZN11SwitchClass18processStateChangeEv+0xf2>
     fce:	8c a1       	ldd	r24, Y+36	; 0x24
     fd0:	81 11       	cpse	r24, r1
     fd2:	17 c0       	rjmp	.+46     	; 0x1002 <_ZN11SwitchClass18processStateChangeEv+0xc0>
     fd4:	8d a1       	ldd	r24, Y+37	; 0x25
     fd6:	81 11       	cpse	r24, r1
     fd8:	2f c0       	rjmp	.+94     	; 0x1038 <_ZN11SwitchClass18processStateChangeEv+0xf6>
     fda:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fdc:	88 23       	and	r24, r24
     fde:	59 f0       	breq	.+22     	; 0xff6 <_ZN11SwitchClass18processStateChangeEv+0xb4>
     fe0:	2d ee       	ldi	r18, 0xED	; 237
     fe2:	36 e0       	ldi	r19, 0x06	; 6
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	64 e6       	ldi	r22, 0x64	; 100
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	ce 01       	movw	r24, r28
     fec:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	8b a3       	std	Y+35, r24	; 0x23
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <_ZN11SwitchClass18processStateChangeEv+0xba>
     ff6:	ce 01       	movw	r24, r28
     ff8:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN11SwitchClass18doubleWaitCompleteEv>
     ffc:	8c a1       	ldd	r24, Y+36	; 0x24
     ffe:	88 23       	and	r24, r24
    1000:	09 f1       	breq	.+66     	; 0x1044 <_ZN11SwitchClass18processStateChangeEv+0x102>
    1002:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
    1006:	88 23       	and	r24, r24
    1008:	61 f0       	breq	.+24     	; 0x1022 <_ZN11SwitchClass18processStateChangeEv+0xe0>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1010:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <_ZN11SwitchClass17AllDoublePressPtrE>
    1014:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <_ZN11SwitchClass17AllDoublePressPtrE+0x1>
    1018:	30 97       	sbiw	r30, 0x00	; 0
    101a:	61 f0       	breq	.+24     	; 0x1034 <_ZN11SwitchClass18processStateChangeEv+0xf2>
    101c:	8e a1       	ldd	r24, Y+38	; 0x26
    101e:	09 95       	icall
    1020:	09 c0       	rjmp	.+18     	; 0x1034 <_ZN11SwitchClass18processStateChangeEv+0xf2>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1028:	ea 89       	ldd	r30, Y+18	; 0x12
    102a:	fb 89       	ldd	r31, Y+19	; 0x13
    102c:	30 97       	sbiw	r30, 0x00	; 0
    102e:	11 f0       	breq	.+4      	; 0x1034 <_ZN11SwitchClass18processStateChangeEv+0xf2>
    1030:	8e a1       	ldd	r24, Y+38	; 0x26
    1032:	09 95       	icall
    1034:	8d a1       	ldd	r24, Y+37	; 0x25
    1036:	81 11       	cpse	r24, r1
    1038:	1d a2       	std	Y+37, r1	; 0x25
    103a:	8c a1       	ldd	r24, Y+36	; 0x24
    103c:	88 23       	and	r24, r24
    103e:	29 f0       	breq	.+10     	; 0x104a <_ZN11SwitchClass18processStateChangeEv+0x108>
    1040:	1c a2       	std	Y+36, r1	; 0x24
    1042:	03 c0       	rjmp	.+6      	; 0x104a <_ZN11SwitchClass18processStateChangeEv+0x108>
    1044:	8d a1       	ldd	r24, Y+37	; 0x25
    1046:	81 11       	cpse	r24, r1
    1048:	f7 cf       	rjmp	.-18     	; 0x1038 <_ZN11SwitchClass18processStateChangeEv+0xf6>
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <_ZN11SwitchClass25callAllProcessStateChangeEv>:
    1050:	cf 93       	push	r28
    1052:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    1056:	88 23       	and	r24, r24
    1058:	91 f0       	breq	.+36     	; 0x107e <_ZN11SwitchClass25callAllProcessStateChangeEv+0x2e>
    105a:	c0 e0       	ldi	r28, 0x00	; 0
    105c:	ec 2f       	mov	r30, r28
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	e0 55       	subi	r30, 0x50	; 80
    1066:	fe 4f       	sbci	r31, 0xFE	; 254
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	11 f0       	breq	.+4      	; 0x1074 <_ZN11SwitchClass25callAllProcessStateChangeEv+0x24>
    1070:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN11SwitchClass18processStateChangeEv>
    1074:	cf 5f       	subi	r28, 0xFF	; 255
    1076:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    107a:	c8 17       	cp	r28, r24
    107c:	78 f3       	brcs	.-34     	; 0x105c <_ZN11SwitchClass25callAllProcessStateChangeEv+0xc>
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <_ZN11SwitchClass16longWaitCompleteEv>:
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	ec 01       	movw	r28, r24
    1088:	18 a2       	std	Y+32, r1	; 0x20
    108a:	1b a2       	std	Y+35, r1	; 0x23
    108c:	1c a2       	std	Y+36, r1	; 0x24
    108e:	8d a1       	ldd	r24, Y+37	; 0x25
    1090:	88 23       	and	r24, r24
    1092:	89 f1       	breq	.+98     	; 0x10f6 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1094:	ce 01       	movw	r24, r28
    1096:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN11SwitchClass16updatePinBuffersEv>
    109a:	ce 01       	movw	r24, r28
    109c:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN11SwitchClass10pollSwitchEv>
    10a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10a2:	81 11       	cpse	r24, r1
    10a4:	28 c0       	rjmp	.+80     	; 0x10f6 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10a8:	81 11       	cpse	r24, r1
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <_ZN11SwitchClass16longWaitCompleteEv+0x32>
    10ac:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN11SwitchClass20AllContinuousLong_ENE>
    10b0:	88 23       	and	r24, r24
    10b2:	09 f1       	breq	.+66     	; 0x10f6 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10b4:	25 eb       	ldi	r18, 0xB5	; 181
    10b6:	38 e0       	ldi	r19, 0x08	; 8
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	66 e4       	ldi	r22, 0x46	; 70
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    10c4:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
    10c8:	88 23       	and	r24, r24
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <_ZN11SwitchClass16longWaitCompleteEv+0x62>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    10d2:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <_ZN11SwitchClass25AllContinuousLongPressPtrE>
    10d6:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <_ZN11SwitchClass25AllContinuousLongPressPtrE+0x1>
    10da:	30 97       	sbiw	r30, 0x00	; 0
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10de:	8e a1       	ldd	r24, Y+38	; 0x26
    10e0:	09 95       	icall
    10e2:	09 c0       	rjmp	.+18     	; 0x10f6 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    10ea:	ec 89       	ldd	r30, Y+20	; 0x14
    10ec:	fd 89       	ldd	r31, Y+21	; 0x15
    10ee:	30 97       	sbiw	r30, 0x00	; 0
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10f2:	8e a1       	ldd	r24, Y+38	; 0x26
    10f4:	09 95       	icall
    10f6:	8a a1       	ldd	r24, Y+34	; 0x22
    10f8:	88 23       	and	r24, r24
    10fa:	a1 f1       	breq	.+104    	; 0x1164 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    10fc:	ce 01       	movw	r24, r28
    10fe:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN11SwitchClass16updatePinBuffersEv>
    1102:	ce 01       	movw	r24, r28
    1104:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN11SwitchClass10pollSwitchEv>
    1108:	8a 8d       	ldd	r24, Y+26	; 0x1a
    110a:	81 11       	cpse	r24, r1
    110c:	2b c0       	rjmp	.+86     	; 0x1164 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    110e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1110:	81 11       	cpse	r24, r1
    1112:	04 c0       	rjmp	.+8      	; 0x111c <_ZN11SwitchClass16longWaitCompleteEv+0x9a>
    1114:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN11SwitchClass10AllLong_ENE>
    1118:	88 23       	and	r24, r24
    111a:	21 f1       	breq	.+72     	; 0x1164 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    111c:	1a a2       	std	Y+34, r1	; 0x22
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	8d a3       	std	Y+37, r24	; 0x25
    1122:	25 eb       	ldi	r18, 0xB5	; 181
    1124:	38 e0       	ldi	r19, 0x08	; 8
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	62 e3       	ldi	r22, 0x32	; 50
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	ce 01       	movw	r24, r28
    112e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    1132:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZN11SwitchClass13AllSamePtr_ENE>
    1136:	88 23       	and	r24, r24
    1138:	61 f0       	breq	.+24     	; 0x1152 <_ZN11SwitchClass16longWaitCompleteEv+0xd0>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1140:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <_ZN11SwitchClass15AllLongPressPtrE>
    1144:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <_ZN11SwitchClass15AllLongPressPtrE+0x1>
    1148:	30 97       	sbiw	r30, 0x00	; 0
    114a:	61 f0       	breq	.+24     	; 0x1164 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    114c:	8e a1       	ldd	r24, Y+38	; 0x26
    114e:	09 95       	icall
    1150:	09 c0       	rjmp	.+18     	; 0x1164 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1158:	e8 89       	ldd	r30, Y+16	; 0x10
    115a:	f9 89       	ldd	r31, Y+17	; 0x11
    115c:	30 97       	sbiw	r30, 0x00	; 0
    115e:	11 f0       	breq	.+4      	; 0x1164 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1160:	8e a1       	ldd	r24, Y+38	; 0x26
    1162:	09 95       	icall
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <_ZN11SwitchClass20callAllOjectLongWaitEh>:
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    1172:	99 23       	and	r25, r25
    1174:	c1 f0       	breq	.+48     	; 0x11a6 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x3c>
    1176:	d8 2f       	mov	r29, r24
    1178:	c0 e0       	ldi	r28, 0x00	; 0
    117a:	ec 2f       	mov	r30, r28
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	e0 55       	subi	r30, 0x50	; 80
    1184:	fe 4f       	sbci	r31, 0xFE	; 254
    1186:	01 90       	ld	r0, Z+
    1188:	f0 81       	ld	r31, Z
    118a:	e0 2d       	mov	r30, r0
    118c:	91 a5       	ldd	r25, Z+41	; 0x29
    118e:	9d 13       	cpse	r25, r29
    1190:	05 c0       	rjmp	.+10     	; 0x119c <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    1192:	30 97       	sbiw	r30, 0x00	; 0
    1194:	19 f0       	breq	.+6      	; 0x119c <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    1196:	cf 01       	movw	r24, r30
    1198:	0e 94 41 08 	call	0x1082	; 0x1082 <_ZN11SwitchClass16longWaitCompleteEv>
    119c:	cf 5f       	subi	r28, 0xFF	; 255
    119e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN11SwitchClass1iE>
    11a2:	c9 17       	cp	r28, r25
    11a4:	50 f3       	brcs	.-44     	; 0x117a <_ZN11SwitchClass20callAllOjectLongWaitEh+0x10>
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <__vector_1>:
}

ISR(INT0_vect){
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	2f 93       	push	r18
    11b8:	3f 93       	push	r19
    11ba:	4f 93       	push	r20
    11bc:	5f 93       	push	r21
    11be:	6f 93       	push	r22
    11c0:	7f 93       	push	r23
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
    11c6:	af 93       	push	r26
    11c8:	bf 93       	push	r27
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
	Switch.PinBuffer[0] = PINB;
    11ce:	83 b1       	in	r24, 0x03	; 3
    11d0:	eb ea       	ldi	r30, 0xAB	; 171
    11d2:	f1 e0       	ldi	r31, 0x01	; 1
    11d4:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    11d6:	86 b1       	in	r24, 0x06	; 6
    11d8:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    11da:	89 b1       	in	r24, 0x09	; 9
    11dc:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    11de:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    11e8:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    11ec:	ff 91       	pop	r31
    11ee:	ef 91       	pop	r30
    11f0:	bf 91       	pop	r27
    11f2:	af 91       	pop	r26
    11f4:	9f 91       	pop	r25
    11f6:	8f 91       	pop	r24
    11f8:	7f 91       	pop	r23
    11fa:	6f 91       	pop	r22
    11fc:	5f 91       	pop	r21
    11fe:	4f 91       	pop	r20
    1200:	3f 91       	pop	r19
    1202:	2f 91       	pop	r18
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <__vector_2>:

ISR(INT1_vect){
    120e:	1f 92       	push	r1
    1210:	0f 92       	push	r0
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	0f 92       	push	r0
    1216:	11 24       	eor	r1, r1
    1218:	2f 93       	push	r18
    121a:	3f 93       	push	r19
    121c:	4f 93       	push	r20
    121e:	5f 93       	push	r21
    1220:	6f 93       	push	r22
    1222:	7f 93       	push	r23
    1224:	8f 93       	push	r24
    1226:	9f 93       	push	r25
    1228:	af 93       	push	r26
    122a:	bf 93       	push	r27
    122c:	ef 93       	push	r30
    122e:	ff 93       	push	r31
	wakeUp();
    1230:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    123a:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    123e:	ff 91       	pop	r31
    1240:	ef 91       	pop	r30
    1242:	bf 91       	pop	r27
    1244:	af 91       	pop	r26
    1246:	9f 91       	pop	r25
    1248:	8f 91       	pop	r24
    124a:	7f 91       	pop	r23
    124c:	6f 91       	pop	r22
    124e:	5f 91       	pop	r21
    1250:	4f 91       	pop	r20
    1252:	3f 91       	pop	r19
    1254:	2f 91       	pop	r18
    1256:	0f 90       	pop	r0
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	0f 90       	pop	r0
    125c:	1f 90       	pop	r1
    125e:	18 95       	reti

00001260 <__vector_3>:

ISR(PCINT0_vect){
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_B);
	Switch.PinBuffer[0] = PINB;
    1282:	83 b1       	in	r24, 0x03	; 3
    1284:	eb ea       	ldi	r30, 0xAB	; 171
    1286:	f1 e0       	ldi	r31, 0x01	; 1
    1288:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    128a:	86 b1       	in	r24, 0x06	; 6
    128c:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    128e:	89 b1       	in	r24, 0x09	; 9
    1290:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1292:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    129c:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    12a0:	ff 91       	pop	r31
    12a2:	ef 91       	pop	r30
    12a4:	bf 91       	pop	r27
    12a6:	af 91       	pop	r26
    12a8:	9f 91       	pop	r25
    12aa:	8f 91       	pop	r24
    12ac:	7f 91       	pop	r23
    12ae:	6f 91       	pop	r22
    12b0:	5f 91       	pop	r21
    12b2:	4f 91       	pop	r20
    12b4:	3f 91       	pop	r19
    12b6:	2f 91       	pop	r18
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <__vector_4>:

ISR(PCINT1_vect){
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	3f 93       	push	r19
    12d0:	4f 93       	push	r20
    12d2:	5f 93       	push	r21
    12d4:	6f 93       	push	r22
    12d6:	7f 93       	push	r23
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	af 93       	push	r26
    12de:	bf 93       	push	r27
    12e0:	ef 93       	push	r30
    12e2:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_C);
	Switch.PinBuffer[0] = PINB;
    12e4:	83 b1       	in	r24, 0x03	; 3
    12e6:	eb ea       	ldi	r30, 0xAB	; 171
    12e8:	f1 e0       	ldi	r31, 0x01	; 1
    12ea:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    12ec:	86 b1       	in	r24, 0x06	; 6
    12ee:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    12f0:	89 b1       	in	r24, 0x09	; 9
    12f2:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    12f4:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    12fe:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
	Switch.pinStateChanged();
}
    1302:	ff 91       	pop	r31
    1304:	ef 91       	pop	r30
    1306:	bf 91       	pop	r27
    1308:	af 91       	pop	r26
    130a:	9f 91       	pop	r25
    130c:	8f 91       	pop	r24
    130e:	7f 91       	pop	r23
    1310:	6f 91       	pop	r22
    1312:	5f 91       	pop	r21
    1314:	4f 91       	pop	r20
    1316:	3f 91       	pop	r19
    1318:	2f 91       	pop	r18
    131a:	0f 90       	pop	r0
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	0f 90       	pop	r0
    1320:	1f 90       	pop	r1
    1322:	18 95       	reti

00001324 <__vector_5>:

ISR(PCINT2_vect){
    1324:	1f 92       	push	r1
    1326:	0f 92       	push	r0
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	0f 92       	push	r0
    132c:	11 24       	eor	r1, r1
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_D);
	Switch.PinBuffer[0] = PINB;
    1346:	83 b1       	in	r24, 0x03	; 3
    1348:	eb ea       	ldi	r30, 0xAB	; 171
    134a:	f1 e0       	ldi	r31, 0x01	; 1
    134c:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    134e:	86 b1       	in	r24, 0x06	; 6
    1350:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1352:	89 b1       	in	r24, 0x09	; 9
    1354:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1356:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1360:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <_ZN10TimerClass5beginEv>:
}


uint64_t TimerClass::millis(){
	return Time;
}
    1386:	60 e8       	ldi	r22, 0x80	; 128
    1388:	7e e3       	ldi	r23, 0x3E	; 62
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	0e 94 04 01 	call	0x208	; 0x208 <_Z11Init_CTC_T1hj>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <_ZN10TimerClass1iE>
    1396:	08 95       	ret

00001398 <_ZN10TimerClass15initializeTimerEv>:
    1398:	dc 01       	movw	r26, r24
    139a:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <_ZN10TimerClass1iE>
    139e:	e9 2f       	mov	r30, r25
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	eb 53       	subi	r30, 0x3B	; 59
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	b1 83       	std	Z+1, r27	; 0x01
    13ac:	a0 83       	st	Z, r26
    13ae:	15 96       	adiw	r26, 0x05	; 5
    13b0:	9c 93       	st	X, r25
    13b2:	9f 5f       	subi	r25, 0xFF	; 255
    13b4:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <_ZN10TimerClass1iE>
    13b8:	08 95       	ret

000013ba <_ZN10TimerClass15setCallBackTimeEjhPFvhE>:
    13ba:	fc 01       	movw	r30, r24
    13bc:	71 83       	std	Z+1, r23	; 0x01
    13be:	60 83       	st	Z, r22
    13c0:	73 83       	std	Z+3, r23	; 0x03
    13c2:	62 83       	std	Z+2, r22	; 0x02
    13c4:	35 87       	std	Z+13, r19	; 0x0d
    13c6:	24 87       	std	Z+12, r18	; 0x0c
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	83 87       	std	Z+11, r24	; 0x0b
    13cc:	44 83       	std	Z+4, r20	; 0x04
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    13d4:	08 95       	ret

000013d6 <_ZN10TimerClass18resetCallbackTimerEv>:
    13d6:	fc 01       	movw	r30, r24
    13d8:	13 86       	std	Z+11, r1	; 0x0b
    13da:	11 82       	std	Z+1, r1	; 0x01
    13dc:	10 82       	st	Z, r1
    13de:	08 95       	ret

000013e0 <_ZN10TimerClass15getCallBackTimeEv>:
    13e0:	fc 01       	movw	r30, r24
    13e2:	82 81       	ldd	r24, Z+2	; 0x02
    13e4:	93 81       	ldd	r25, Z+3	; 0x03
    13e6:	20 81       	ld	r18, Z
    13e8:	31 81       	ldd	r19, Z+1	; 0x01
    13ea:	82 1b       	sub	r24, r18
    13ec:	93 0b       	sbc	r25, r19
    13ee:	08 95       	ret

000013f0 <_ZN10TimerClass7setTimeEj>:
    13f0:	fc 01       	movw	r30, r24
    13f2:	77 83       	std	Z+7, r23	; 0x07
    13f4:	66 83       	std	Z+6, r22	; 0x06
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	82 87       	std	Z+10, r24	; 0x0a
    13fa:	71 87       	std	Z+9, r23	; 0x09
    13fc:	60 87       	std	Z+8, r22	; 0x08
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1404:	08 95       	ret

00001406 <_ZN10TimerClass7getTimeEv>:
    1406:	fc 01       	movw	r30, r24
    1408:	80 85       	ldd	r24, Z+8	; 0x08
    140a:	91 85       	ldd	r25, Z+9	; 0x09
    140c:	26 81       	ldd	r18, Z+6	; 0x06
    140e:	37 81       	ldd	r19, Z+7	; 0x07
    1410:	82 1b       	sub	r24, r18
    1412:	93 0b       	sbc	r25, r19
    1414:	08 95       	ret

00001416 <_ZN10TimerClass10resetTimerEv>:
    1416:	fc 01       	movw	r30, r24
    1418:	17 82       	std	Z+7, r1	; 0x07
    141a:	16 82       	std	Z+6, r1	; 0x06
    141c:	12 86       	std	Z+10, r1	; 0x0a
    141e:	08 95       	ret

00001420 <_ZN10TimerClass11milliPassedEv>:

void TimerClass::milliPassed(){
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	ec 01       	movw	r28, r24
	if(Count_EN){
    1426:	8b 85       	ldd	r24, Y+11	; 0x0b
    1428:	88 23       	and	r24, r24
    142a:	e1 f0       	breq	.+56     	; 0x1464 <_ZN10TimerClass11milliPassedEv+0x44>
		#ifdef DEBUG_TIMER
		//printChar('T');
		#endif
		if(Count)
    142c:	88 81       	ld	r24, Y
    142e:	99 81       	ldd	r25, Y+1	; 0x01
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	29 f0       	breq	.+10     	; 0x143e <_ZN10TimerClass11milliPassedEv+0x1e>
		Count -= 1;
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	99 83       	std	Y+1, r25	; 0x01
    1438:	88 83       	st	Y, r24
		if(!Count){
    143a:	89 2b       	or	r24, r25
    143c:	99 f4       	brne	.+38     	; 0x1464 <_ZN10TimerClass11milliPassedEv+0x44>
			if(Mode == TIMER_MODE_REPEAT){
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	29 f4       	brne	.+10     	; 0x144e <_ZN10TimerClass11milliPassedEv+0x2e>
				Count = Count_Save;
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	9b 81       	ldd	r25, Y+3	; 0x03
    1448:	99 83       	std	Y+1, r25	; 0x01
    144a:	88 83       	st	Y, r24
    144c:	05 c0       	rjmp	.+10     	; 0x1458 <_ZN10TimerClass11milliPassedEv+0x38>
			}
			if(Mode == TIMER_MODE_ONCE){
    144e:	81 11       	cpse	r24, r1
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <_ZN10TimerClass11milliPassedEv+0x38>
				Count_EN = 0;
    1452:	1b 86       	std	Y+11, r1	; 0x0b
				Count = 0;
    1454:	19 82       	std	Y+1, r1	; 0x01
    1456:	18 82       	st	Y, r1
			}
			if(CallBackPtr != NULL){
    1458:	ec 85       	ldd	r30, Y+12	; 0x0c
    145a:	fd 85       	ldd	r31, Y+13	; 0x0d
    145c:	30 97       	sbiw	r30, 0x00	; 0
    145e:	11 f0       	breq	.+4      	; 0x1464 <_ZN10TimerClass11milliPassedEv+0x44>
				#ifdef DEBUG_TIMER
				printStringCRNL("Timer Done : ");
				printNumber(Timer_ID);
				#endif
				//allowSleep(1);
				CallBackPtr(Timer_ID);
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	09 95       	icall
			}
		}
	}
	if(NCount_EN){
    1464:	8a 85       	ldd	r24, Y+10	; 0x0a
    1466:	88 23       	and	r24, r24
    1468:	51 f0       	breq	.+20     	; 0x147e <_ZN10TimerClass11milliPassedEv+0x5e>
		if(NCount)
    146a:	8e 81       	ldd	r24, Y+6	; 0x06
    146c:	9f 81       	ldd	r25, Y+7	; 0x07
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	29 f0       	breq	.+10     	; 0x147c <_ZN10TimerClass11milliPassedEv+0x5c>
		NCount -= 1;
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	9f 83       	std	Y+7, r25	; 0x07
    1476:	8e 83       	std	Y+6, r24	; 0x06
		if(!NCount){
    1478:	89 2b       	or	r24, r25
    147a:	09 f4       	brne	.+2      	; 0x147e <_ZN10TimerClass11milliPassedEv+0x5e>
			NCount_EN = 0;
    147c:	1a 86       	std	Y+10, r1	; 0x0a
		}
	}
}
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <_ZN10TimerClass19callAllTimerObjectsEv>:

void TimerClass::callAllTimerObjects(){
    1484:	cf 93       	push	r28
	for(uint8_t a = 0; a < i; a += 1){
    1486:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZN10TimerClass1iE>
    148a:	88 23       	and	r24, r24
    148c:	91 f0       	breq	.+36     	; 0x14b2 <_ZN10TimerClass19callAllTimerObjectsEv+0x2e>
    148e:	c0 e0       	ldi	r28, 0x00	; 0
		if(Timers[a] != NULL)
    1490:	ec 2f       	mov	r30, r28
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	ee 0f       	add	r30, r30
    1496:	ff 1f       	adc	r31, r31
    1498:	eb 53       	subi	r30, 0x3B	; 59
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <_ZN10TimerClass19callAllTimerObjectsEv+0x24>
		Timers[a]->milliPassed();
    14a4:	0e 94 10 0a 	call	0x1420	; 0x1420 <_ZN10TimerClass11milliPassedEv>
		}
	}
}

void TimerClass::callAllTimerObjects(){
	for(uint8_t a = 0; a < i; a += 1){
    14a8:	cf 5f       	subi	r28, 0xFF	; 255
    14aa:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZN10TimerClass1iE>
    14ae:	c8 17       	cp	r28, r24
    14b0:	78 f3       	brcs	.-34     	; 0x1490 <_ZN10TimerClass19callAllTimerObjectsEv+0xc>
		if(Timers[a] != NULL)
		Timers[a]->milliPassed();
	}
}
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <_ZN10TimerClass10getTimerIDEv>:

uint8_t TimerClass::getTimerID(){
	return Timer_ID;
}
    14b6:	fc 01       	movw	r30, r24
    14b8:	85 81       	ldd	r24, Z+5	; 0x05
    14ba:	08 95       	ret

000014bc <__vector_11>:



ISR(TIMER1_COMPA_vect){
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	8f 93       	push	r24
    14d4:	9f 93       	push	r25
    14d6:	af 93       	push	r26
    14d8:	bf 93       	push	r27
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
	//printChar('I');
	milliHappened();
    14de:	0e 94 22 02 	call	0x444	; 0x444 <_Z13milliHappenedv>
	Timer.Time += 1;
    14e2:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <_ZN10TimerClass4TimeE>
    14e6:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <_ZN10TimerClass4TimeE+0x1>
    14ea:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <_ZN10TimerClass4TimeE+0x2>
    14ee:	50 91 c0 01 	lds	r21, 0x01C0	; 0x8001c0 <_ZN10TimerClass4TimeE+0x3>
    14f2:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <_ZN10TimerClass4TimeE+0x4>
    14f6:	70 91 c2 01 	lds	r23, 0x01C2	; 0x8001c2 <_ZN10TimerClass4TimeE+0x5>
    14fa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <_ZN10TimerClass4TimeE+0x6>
    14fe:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <_ZN10TimerClass4TimeE+0x7>
    1502:	a1 e0       	ldi	r26, 0x01	; 1
    1504:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__adddi3_s8>
    1508:	20 93 bd 01 	sts	0x01BD, r18	; 0x8001bd <_ZN10TimerClass4TimeE>
    150c:	30 93 be 01 	sts	0x01BE, r19	; 0x8001be <_ZN10TimerClass4TimeE+0x1>
    1510:	40 93 bf 01 	sts	0x01BF, r20	; 0x8001bf <_ZN10TimerClass4TimeE+0x2>
    1514:	50 93 c0 01 	sts	0x01C0, r21	; 0x8001c0 <_ZN10TimerClass4TimeE+0x3>
    1518:	60 93 c1 01 	sts	0x01C1, r22	; 0x8001c1 <_ZN10TimerClass4TimeE+0x4>
    151c:	70 93 c2 01 	sts	0x01C2, r23	; 0x8001c2 <_ZN10TimerClass4TimeE+0x5>
    1520:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <_ZN10TimerClass4TimeE+0x6>
    1524:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <_ZN10TimerClass4TimeE+0x7>
	Timer.callAllTimerObjects();
    1528:	0e 94 42 0a 	call	0x1484	; 0x1484 <_ZN10TimerClass19callAllTimerObjectsEv>
	//printChar('O');
}
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	bf 91       	pop	r27
    1532:	af 91       	pop	r26
    1534:	9f 91       	pop	r25
    1536:	8f 91       	pop	r24
    1538:	7f 91       	pop	r23
    153a:	6f 91       	pop	r22
    153c:	5f 91       	pop	r21
    153e:	4f 91       	pop	r20
    1540:	3f 91       	pop	r19
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <_Z13switchPressedh>:
void portStateChange(uint8_t PortNo){
	printStringCRNL("Pin state changed");
	if(PortNo == PORT_C){
		setPinState(PORT_C, 2, getPinState(PORT_C, 0));
	}
}
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <SwitchFlag>
    1554:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <SwitchID>
    1558:	08 95       	ret

0000155a <_Z9timerDoneh>:
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Timer1_Flag>
    1560:	43 99       	sbic	0x08, 3	; 8
    1562:	43 98       	cbi	0x08, 3	; 8
    1564:	08 95       	ret

00001566 <_Z17setAllSocketStateb>:
    1566:	cf 93       	push	r28
    1568:	c8 2f       	mov	r28, r24
    156a:	48 2f       	mov	r20, r24
    156c:	63 e0       	ldi	r22, 0x03	; 3
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
    1574:	4c 2f       	mov	r20, r28
    1576:	62 e0       	ldi	r22, 0x02	; 2
    1578:	82 e0       	ldi	r24, 0x02	; 2
    157a:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
    157e:	4c 2f       	mov	r20, r28
    1580:	65 e0       	ldi	r22, 0x05	; 5
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
    1588:	4c 2f       	mov	r20, r28
    158a:	64 e0       	ldi	r22, 0x04	; 4
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <_Z14setSocketStatehb>:
    1596:	82 30       	cpi	r24, 0x02	; 2
    1598:	79 f0       	breq	.+30     	; 0x15b8 <_Z14setSocketStatehb+0x22>
    159a:	18 f4       	brcc	.+6      	; 0x15a2 <_Z14setSocketStatehb+0xc>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	31 f0       	breq	.+12     	; 0x15ac <_Z14setSocketStatehb+0x16>
    15a0:	08 95       	ret
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	79 f0       	breq	.+30     	; 0x15c4 <_Z14setSocketStatehb+0x2e>
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	99 f0       	breq	.+38     	; 0x15d0 <_Z14setSocketStatehb+0x3a>
    15aa:	08 95       	ret
    15ac:	46 2f       	mov	r20, r22
    15ae:	63 e0       	ldi	r22, 0x03	; 3
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
    15b6:	08 95       	ret
    15b8:	46 2f       	mov	r20, r22
    15ba:	62 e0       	ldi	r22, 0x02	; 2
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
    15c2:	08 95       	ret
    15c4:	46 2f       	mov	r20, r22
    15c6:	65 e0       	ldi	r22, 0x05	; 5
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
    15ce:	08 95       	ret
    15d0:	46 2f       	mov	r20, r22
    15d2:	64 e0       	ldi	r22, 0x04	; 4
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
    15da:	08 95       	ret

000015dc <_Z14getSocketStateh>:
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	71 f0       	breq	.+28     	; 0x15fc <_Z14getSocketStateh+0x20>
    15e0:	18 f4       	brcc	.+6      	; 0x15e8 <_Z14getSocketStateh+0xc>
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <_Z14getSocketStateh+0x16>
    15e6:	19 c0       	rjmp	.+50     	; 0x161a <_Z14getSocketStateh+0x3e>
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	69 f0       	breq	.+26     	; 0x1606 <_Z14getSocketStateh+0x2a>
    15ec:	84 30       	cpi	r24, 0x04	; 4
    15ee:	81 f0       	breq	.+32     	; 0x1610 <_Z14getSocketStateh+0x34>
    15f0:	14 c0       	rjmp	.+40     	; 0x161a <_Z14getSocketStateh+0x3e>
    15f2:	63 e0       	ldi	r22, 0x03	; 3
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_Z11getPinStatehh>
    15fa:	08 95       	ret
    15fc:	62 e0       	ldi	r22, 0x02	; 2
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_Z11getPinStatehh>
    1604:	08 95       	ret
    1606:	65 e0       	ldi	r22, 0x05	; 5
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_Z11getPinStatehh>
    160e:	08 95       	ret
    1610:	64 e0       	ldi	r22, 0x04	; 4
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_Z11getPinStatehh>
    1618:	08 95       	ret
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	08 95       	ret

0000161e <_Z8runSetupv>:

void runSetup(){
	
	USART_Init(MYUBRR);
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z10USART_Initj>
	//Init_CTC_T1(2,2000);
	setPinDirection(PORT_C, 2, OUTPUT);
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	62 e0       	ldi	r22, 0x02	; 2
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_C, 3, OUTPUT);
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	63 e0       	ldi	r22, 0x03	; 3
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 2, OUTPUT);
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 3, OUTPUT);
    1644:	41 e0       	ldi	r20, 0x01	; 1
    1646:	63 e0       	ldi	r22, 0x03	; 3
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 4, OUTPUT);
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	64 e0       	ldi	r22, 0x04	; 4
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 5, OUTPUT);
    1658:	41 e0       	ldi	r20, 0x01	; 1
    165a:	65 e0       	ldi	r22, 0x05	; 5
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z15setPinDirectionhhb>
	setPinState(PORT_D, 2, LOW);
    1662:	40 e0       	ldi	r20, 0x00	; 0
    1664:	62 e0       	ldi	r22, 0x02	; 2
    1666:	82 e0       	ldi	r24, 0x02	; 2
    1668:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
	setPinState(PORT_D, 3, LOW);
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	63 e0       	ldi	r22, 0x03	; 3
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
	setPinState(PORT_D, 4, LOW);
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	64 e0       	ldi	r22, 0x04	; 4
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
	setPinState(PORT_D, 5, LOW);
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	65 e0       	ldi	r22, 0x05	; 5
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
	setPinState(PORT_C, 2, LOW);
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	0e 94 13 01 	call	0x226	; 0x226 <_Z11setPinStatehhb>
	setPinDirection(PORT_C, 0, INPUT);
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z15setPinDirectionhhb>
	SPI_MasterInit();
    169e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
    16a2:	08 95       	ret

000016a4 <main>:
volatile bool newSPIData, Timer1_Flag, SwitchFlag = false;
uint8_t Socket, State, Payload, StateAll, CurrentState;
TimerClass Timer1;
SwitchClass S1, S2, S3, S4;
int main(void)
{
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	29 97       	sbiw	r28, 0x09	; 9
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    runSetup();
    16b8:	0e 94 0f 0b 	call	0x161e	; 0x161e <_Z8runSetupv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16bc:	2f ef       	ldi	r18, 0xFF	; 255
    16be:	89 e6       	ldi	r24, 0x69	; 105
    16c0:	98 e1       	ldi	r25, 0x18	; 24
    16c2:	21 50       	subi	r18, 0x01	; 1
    16c4:	80 40       	sbci	r24, 0x00	; 0
    16c6:	90 40       	sbci	r25, 0x00	; 0
    16c8:	e1 f7       	brne	.-8      	; 0x16c2 <main+0x1e>
    16ca:	00 c0       	rjmp	.+0      	; 0x16cc <main+0x28>
    16cc:	00 00       	nop
	_delay_ms(500);
	Notify(PSTR("Powering on..."));
    16ce:	8d e4       	ldi	r24, 0x4D	; 77
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	0e 94 2e 03 	call	0x65c	; 0x65c <_Z6NotifyPKc>
	NRF24L01 Radio(1,1,1);
    16d6:	21 e0       	ldi	r18, 0x01	; 1
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	0e 94 50 06 	call	0xca0	; 0xca0 <_ZN8NRF24L01C1Ehhb>
	Radio.powerON(true);
    16e4:	61 e0       	ldi	r22, 0x01	; 1
    16e6:	ce 01       	movw	r24, r28
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN8NRF24L017powerONEb>
	initSPISlave();
    16ee:	0e 94 df 00 	call	0x1be	; 0x1be <_Z12initSPISlavev>
	enableSPIInterrupt(true);
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z18enableSPIInterruptb>
	sei();
    16f8:	78 94       	sei
	Timer1.begin();
    16fa:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN10TimerClass5beginEv>
	Timer1.initializeTimer();
    16fe:	89 eb       	ldi	r24, 0xB9	; 185
    1700:	92 e0       	ldi	r25, 0x02	; 2
    1702:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN10TimerClass15initializeTimerEv>
	Timer1.setCallBackTime(100, 0, timerDone);
    1706:	2d ea       	ldi	r18, 0xAD	; 173
    1708:	3a e0       	ldi	r19, 0x0A	; 10
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	64 e6       	ldi	r22, 0x64	; 100
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	89 eb       	ldi	r24, 0xB9	; 185
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
	S1.begin();
    1718:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN11SwitchClass5beginEv>
	S1.initializeSwitch(PORT_D, 6, &S1);
    171c:	2b e8       	ldi	r18, 0x8B	; 139
    171e:	32 e0       	ldi	r19, 0x02	; 2
    1720:	46 e0       	ldi	r20, 0x06	; 6
    1722:	62 e0       	ldi	r22, 0x02	; 2
    1724:	c9 01       	movw	r24, r18
    1726:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S2.initializeSwitch(PORT_D, 7, &S2);
    172a:	2d e5       	ldi	r18, 0x5D	; 93
    172c:	32 e0       	ldi	r19, 0x02	; 2
    172e:	47 e0       	ldi	r20, 0x07	; 7
    1730:	62 e0       	ldi	r22, 0x02	; 2
    1732:	c9 01       	movw	r24, r18
    1734:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S3.initializeSwitch(PORT_B, 0, &S3);
    1738:	2f e2       	ldi	r18, 0x2F	; 47
    173a:	32 e0       	ldi	r19, 0x02	; 2
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	c9 01       	movw	r24, r18
    1742:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S4.initializeSwitch(PORT_B, 1, &S4);
    1746:	21 e0       	ldi	r18, 0x01	; 1
    1748:	32 e0       	ldi	r19, 0x02	; 2
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	c9 01       	movw	r24, r18
    1750:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S1.shortPress(switchPressed);
    1754:	67 ea       	ldi	r22, 0xA7	; 167
    1756:	7a e0       	ldi	r23, 0x0A	; 10
    1758:	8b e8       	ldi	r24, 0x8B	; 139
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_ZN11SwitchClass10shortPressEPFvhE>
	S1.enableSamePtrMode(true);
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN11SwitchClass17enableSamePtrModeEb>
	Notify(PSTR("Done"));
    1766:	88 e4       	ldi	r24, 0x48	; 72
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	0e 94 2e 03 	call	0x65c	; 0x65c <_Z6NotifyPKc>
    while (1) 
    {
		if(newSPIData)	{
    176e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <newSPIData>
    1772:	88 23       	and	r24, r24
    1774:	09 f4       	brne	.+2      	; 0x1778 <main+0xd4>
    1776:	e0 c0       	rjmp	.+448    	; 0x1938 <main+0x294>
			newSPIData = false;
    1778:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <newSPIData>
			if(SPIdata != 0xAA){
    177c:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <SPIdata>
    1780:	8a 3a       	cpi	r24, 0xAA	; 170
    1782:	09 f4       	brne	.+2      	; 0x1786 <main+0xe2>
    1784:	46 c0       	rjmp	.+140    	; 0x1812 <main+0x16e>
				Socket = SPIdata & 0xF0;
    1786:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <SPIdata>
    178a:	80 7f       	andi	r24, 0xF0	; 240
				Socket = Socket >> 4;
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	95 95       	asr	r25
    1790:	87 95       	ror	r24
    1792:	95 95       	asr	r25
    1794:	87 95       	ror	r24
    1796:	95 95       	asr	r25
    1798:	87 95       	ror	r24
    179a:	95 95       	asr	r25
    179c:	87 95       	ror	r24
    179e:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <Socket>
				State = SPIdata & 0x0F;
    17a2:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SPIdata>
    17a6:	2f 70       	andi	r18, 0x0F	; 15
    17a8:	20 93 c9 02 	sts	0x02C9, r18	; 0x8002c9 <State>
				if((SPIdata & 0xD0) == 0xD0){
    17ac:	30 91 cf 02 	lds	r19, 0x02CF	; 0x8002cf <SPIdata>
    17b0:	30 7d       	andi	r19, 0xD0	; 208
    17b2:	30 3d       	cpi	r19, 0xD0	; 208
    17b4:	69 f4       	brne	.+26     	; 0x17d0 <main+0x12c>
					printStringCRNL("Changing all");
    17b6:	82 e1       	ldi	r24, 0x12	; 18
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	0e 94 47 03 	call	0x68e	; 0x68e <_Z15printStringCRNLPKc>
					setAllSocketState(State);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <State>
    17c4:	91 11       	cpse	r25, r1
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <main+0x126>
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	0e 94 b3 0a 	call	0x1566	; 0x1566 <_Z17setAllSocketStateb>
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <main+0x138>
				}
				else{
				setSocketState(Socket, State);
    17d0:	61 e0       	ldi	r22, 0x01	; 1
    17d2:	21 11       	cpse	r18, r1
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <main+0x134>
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_Z14setSocketStatehb>
				}
				BEEP = 1;
    17dc:	43 9a       	sbi	0x08, 3	; 8
				Timer1.setCallBackTime(BEEP_TIME, 0, timerDone);
    17de:	2d ea       	ldi	r18, 0xAD	; 173
    17e0:	3a e0       	ldi	r19, 0x0A	; 10
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	6e e1       	ldi	r22, 0x1E	; 30
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	89 eb       	ldi	r24, 0xB9	; 185
    17ea:	92 e0       	ldi	r25, 0x02	; 2
    17ec:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
				printStringCRNL("Command received: ");
    17f0:	8f e1       	ldi	r24, 0x1F	; 31
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	0e 94 47 03 	call	0x68e	; 0x68e <_Z15printStringCRNLPKc>
				printHexNumber(SPIdata, 1);
    17f8:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SPIdata>
    17fc:	01 e0       	ldi	r16, 0x01	; 1
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 9c 03 	call	0x738	; 0x738 <_Z14printHexNumberyh>
    1810:	73 c0       	rjmp	.+230    	; 0x18f8 <main+0x254>
			}
			else{
				enableSPIInterrupt(false);
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z18enableSPIInterruptb>
				enableSPI(false);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z9enableSPIb>
				SPI_MasterInit();
    181e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1822:	87 ec       	ldi	r24, 0xC7	; 199
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <main+0x182>
    182a:	00 c0       	rjmp	.+0      	; 0x182c <main+0x188>
    182c:	00 00       	nop
				_delay_us(50);
				if(Radio.isDataReady()){
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	0e 94 10 04 	call	0x820	; 0x820 <_ZN8NRF24L0111isDataReadyEv>
    1836:	88 23       	and	r24, r24
    1838:	09 f4       	brne	.+2      	; 0x183c <main+0x198>
    183a:	56 c0       	rjmp	.+172    	; 0x18e8 <main+0x244>
					Radio.readFIFO(&Payload);
    183c:	68 ec       	ldi	r22, 0xC8	; 200
    183e:	72 e0       	ldi	r23, 0x02	; 2
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	0e 94 66 06 	call	0xccc	; 0xccc <_ZN8NRF24L018readFIFOEPVh>
					Radio.clearRX_DR();
    1848:	ce 01       	movw	r24, r28
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN8NRF24L0110clearRX_DREv>
					Radio.flushRX();
    1850:	ce 01       	movw	r24, r28
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_ZN8NRF24L017flushRXEv>
					if(Payload & 0xF0){
    1858:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <Payload>
    185c:	28 2f       	mov	r18, r24
    185e:	20 7f       	andi	r18, 0xF0	; 240
    1860:	09 f1       	breq	.+66     	; 0x18a4 <main+0x200>
						Socket = Payload & 0xF0;
						Socket = Socket >> 4;
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	35 95       	asr	r19
    1866:	27 95       	ror	r18
    1868:	35 95       	asr	r19
    186a:	27 95       	ror	r18
    186c:	35 95       	asr	r19
    186e:	27 95       	ror	r18
    1870:	35 95       	asr	r19
    1872:	27 95       	ror	r18
    1874:	20 93 ca 02 	sts	0x02CA, r18	; 0x8002ca <Socket>
						State = Payload & 0x0F;
    1878:	98 2f       	mov	r25, r24
    187a:	9f 70       	andi	r25, 0x0F	; 15
    187c:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <State>
						if((Payload & 0xD0) == 0xD0){
    1880:	80 7d       	andi	r24, 0xD0	; 208
    1882:	80 3d       	cpi	r24, 0xD0	; 208
    1884:	39 f4       	brne	.+14     	; 0x1894 <main+0x1f0>
							setAllSocketState(State);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	91 11       	cpse	r25, r1
    188a:	01 c0       	rjmp	.+2      	; 0x188e <main+0x1ea>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <_Z17setAllSocketStateb>
    1892:	10 c0       	rjmp	.+32     	; 0x18b4 <main+0x210>
						}
						else{
							setSocketState(Socket, State);
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	91 11       	cpse	r25, r1
    1898:	01 c0       	rjmp	.+2      	; 0x189c <main+0x1f8>
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	82 2f       	mov	r24, r18
    189e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_Z14setSocketStatehb>
    18a2:	08 c0       	rjmp	.+16     	; 0x18b4 <main+0x210>
						}
					}
					else{
						setSocketState(Payload, !getSocketState(Payload));
    18a4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_Z14getSocketStateh>
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	68 27       	eor	r22, r24
    18ac:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <Payload>
    18b0:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_Z14setSocketStatehb>
					}
					BEEP = 1;
    18b4:	43 9a       	sbi	0x08, 3	; 8
					Timer1.setCallBackTime(BEEP_TIME, 0, timerDone);
    18b6:	2d ea       	ldi	r18, 0xAD	; 173
    18b8:	3a e0       	ldi	r19, 0x0A	; 10
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	6e e1       	ldi	r22, 0x1E	; 30
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	89 eb       	ldi	r24, 0xB9	; 185
    18c2:	92 e0       	ldi	r25, 0x02	; 2
    18c4:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
					printStringCRNL("Data received: ");
    18c8:	82 e3       	ldi	r24, 0x32	; 50
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	0e 94 47 03 	call	0x68e	; 0x68e <_Z15printStringCRNLPKc>
					printHexNumber(Payload, 1);
    18d0:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <Payload>
    18d4:	01 e0       	ldi	r16, 0x01	; 1
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 9c 03 	call	0x738	; 0x738 <_Z14printHexNumberyh>
				}
				//printStringCRNL("Tick");
				enableSPI(false);
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z9enableSPIb>
				initSPISlave();
    18ee:	0e 94 df 00 	call	0x1be	; 0x1be <_Z12initSPISlavev>
				enableSPIInterrupt(true);
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z18enableSPIInterruptb>
			}
			CurrentState = (getSocketState(1) << 0) | (getSocketState(2) << 1) | (getSocketState(3) << 2) | (getSocketState(4) << 3);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_Z14getSocketStateh>
    18fe:	08 2f       	mov	r16, r24
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_Z14getSocketStateh>
    1906:	18 2f       	mov	r17, r24
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_Z14getSocketStateh>
    190e:	11 0f       	add	r17, r17
    1910:	24 e0       	ldi	r18, 0x04	; 4
    1912:	82 9f       	mul	r24, r18
    1914:	c0 01       	movw	r24, r0
    1916:	11 24       	eor	r1, r1
    1918:	21 2f       	mov	r18, r17
    191a:	28 2b       	or	r18, r24
    191c:	12 2f       	mov	r17, r18
    191e:	10 2b       	or	r17, r16
    1920:	84 e0       	ldi	r24, 0x04	; 4
    1922:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_Z14getSocketStateh>
    1926:	28 e0       	ldi	r18, 0x08	; 8
    1928:	82 9f       	mul	r24, r18
    192a:	c0 01       	movw	r24, r0
    192c:	11 24       	eor	r1, r1
    192e:	21 2f       	mov	r18, r17
    1930:	28 2b       	or	r18, r24
    1932:	20 93 c7 02 	sts	0x02C7, r18	; 0x8002c7 <CurrentState>
			SPDR = CurrentState;
    1936:	2e bd       	out	0x2e, r18	; 46
		}
		if(SwitchFlag){
    1938:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <SwitchFlag>
    193c:	88 23       	and	r24, r24
    193e:	c9 f0       	breq	.+50     	; 0x1972 <main+0x2ce>
			SwitchFlag = false;
    1940:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <SwitchFlag>
			setSocketState(SwitchID + 1, !getSocketState(SwitchID + 1));
    1944:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SwitchID>
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_Z14getSocketStateh>
    194e:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <SwitchID>
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	68 27       	eor	r22, r24
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	89 0f       	add	r24, r25
    195a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_Z14setSocketStatehb>
			BEEP = 1;
    195e:	43 9a       	sbi	0x08, 3	; 8
			Timer1.setCallBackTime(BEEP_TIME, 0, timerDone);
    1960:	2d ea       	ldi	r18, 0xAD	; 173
    1962:	3a e0       	ldi	r19, 0x0A	; 10
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	6e e1       	ldi	r22, 0x1E	; 30
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	89 eb       	ldi	r24, 0xB9	; 185
    196c:	92 e0       	ldi	r25, 0x02	; 2
    196e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
		}
		if(Timer1_Flag){
    1972:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1_Flag>
    1976:	88 23       	and	r24, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <main+0x2d8>
    197a:	f9 ce       	rjmp	.-526    	; 0x176e <main+0xca>
			Timer1_Flag = false;
    197c:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <Timer1_Flag>
    1980:	f6 ce       	rjmp	.-532    	; 0x176e <main+0xca>

00001982 <__vector_17>:
	//enableSPIInterrupt(true);
	//sei();
}

ISR(SPI_STC_vect)
{															//Grab the data byte from the SPI Data Register (SPDR)
    1982:	1f 92       	push	r1
    1984:	0f 92       	push	r0
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	0f 92       	push	r0
    198a:	11 24       	eor	r1, r1
    198c:	8f 93       	push	r24
	SPIdata = SPDR;                                         //Put the byte into a temporary variable for processin                                       //process the data byte and put it back into the SPDR for the Master to read it
    198e:	8e b5       	in	r24, 0x2e	; 46
    1990:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <SPIdata>
	newSPIData = true;                                       //Set the Flag as TRUE
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <newSPIData>
    199a:	8f 91       	pop	r24
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	0f 90       	pop	r0
    19a2:	1f 90       	pop	r1
    19a4:	18 95       	reti

000019a6 <__umoddi3>:
    19a6:	68 94       	set
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <__udivdi3_umoddi3>

000019aa <__udivdi3>:
    19aa:	e8 94       	clt

000019ac <__udivdi3_umoddi3>:
    19ac:	8f 92       	push	r8
    19ae:	9f 92       	push	r9
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__udivmod64>
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	9f 90       	pop	r9
    19be:	8f 90       	pop	r8
    19c0:	08 95       	ret

000019c2 <__udivmod64>:
    19c2:	88 24       	eor	r8, r8
    19c4:	99 24       	eor	r9, r9
    19c6:	f4 01       	movw	r30, r8
    19c8:	e4 01       	movw	r28, r8
    19ca:	b0 e4       	ldi	r27, 0x40	; 64
    19cc:	9f 93       	push	r25
    19ce:	aa 27       	eor	r26, r26
    19d0:	9a 15       	cp	r25, r10
    19d2:	8b 04       	cpc	r8, r11
    19d4:	9c 04       	cpc	r9, r12
    19d6:	ed 05       	cpc	r30, r13
    19d8:	fe 05       	cpc	r31, r14
    19da:	cf 05       	cpc	r28, r15
    19dc:	d0 07       	cpc	r29, r16
    19de:	a1 07       	cpc	r26, r17
    19e0:	98 f4       	brcc	.+38     	; 0x1a08 <__udivmod64+0x46>
    19e2:	ad 2f       	mov	r26, r29
    19e4:	dc 2f       	mov	r29, r28
    19e6:	cf 2f       	mov	r28, r31
    19e8:	fe 2f       	mov	r31, r30
    19ea:	e9 2d       	mov	r30, r9
    19ec:	98 2c       	mov	r9, r8
    19ee:	89 2e       	mov	r8, r25
    19f0:	98 2f       	mov	r25, r24
    19f2:	87 2f       	mov	r24, r23
    19f4:	76 2f       	mov	r23, r22
    19f6:	65 2f       	mov	r22, r21
    19f8:	54 2f       	mov	r21, r20
    19fa:	43 2f       	mov	r20, r19
    19fc:	32 2f       	mov	r19, r18
    19fe:	22 27       	eor	r18, r18
    1a00:	b8 50       	subi	r27, 0x08	; 8
    1a02:	31 f7       	brne	.-52     	; 0x19d0 <__udivmod64+0xe>
    1a04:	bf 91       	pop	r27
    1a06:	27 c0       	rjmp	.+78     	; 0x1a56 <__udivmod64+0x94>
    1a08:	1b 2e       	mov	r1, r27
    1a0a:	bf 91       	pop	r27
    1a0c:	bb 27       	eor	r27, r27
    1a0e:	22 0f       	add	r18, r18
    1a10:	33 1f       	adc	r19, r19
    1a12:	44 1f       	adc	r20, r20
    1a14:	55 1f       	adc	r21, r21
    1a16:	66 1f       	adc	r22, r22
    1a18:	77 1f       	adc	r23, r23
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	88 1c       	adc	r8, r8
    1a20:	99 1c       	adc	r9, r9
    1a22:	ee 1f       	adc	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	cc 1f       	adc	r28, r28
    1a28:	dd 1f       	adc	r29, r29
    1a2a:	aa 1f       	adc	r26, r26
    1a2c:	bb 1f       	adc	r27, r27
    1a2e:	8a 14       	cp	r8, r10
    1a30:	9b 04       	cpc	r9, r11
    1a32:	ec 05       	cpc	r30, r12
    1a34:	fd 05       	cpc	r31, r13
    1a36:	ce 05       	cpc	r28, r14
    1a38:	df 05       	cpc	r29, r15
    1a3a:	a0 07       	cpc	r26, r16
    1a3c:	b1 07       	cpc	r27, r17
    1a3e:	48 f0       	brcs	.+18     	; 0x1a52 <__udivmod64+0x90>
    1a40:	8a 18       	sub	r8, r10
    1a42:	9b 08       	sbc	r9, r11
    1a44:	ec 09       	sbc	r30, r12
    1a46:	fd 09       	sbc	r31, r13
    1a48:	ce 09       	sbc	r28, r14
    1a4a:	df 09       	sbc	r29, r15
    1a4c:	a0 0b       	sbc	r26, r16
    1a4e:	b1 0b       	sbc	r27, r17
    1a50:	21 60       	ori	r18, 0x01	; 1
    1a52:	1a 94       	dec	r1
    1a54:	e1 f6       	brne	.-72     	; 0x1a0e <__udivmod64+0x4c>
    1a56:	2e f4       	brtc	.+10     	; 0x1a62 <__udivmod64+0xa0>
    1a58:	94 01       	movw	r18, r8
    1a5a:	af 01       	movw	r20, r30
    1a5c:	be 01       	movw	r22, r28
    1a5e:	cd 01       	movw	r24, r26
    1a60:	00 0c       	add	r0, r0
    1a62:	08 95       	ret

00001a64 <__ashldi3>:
    1a64:	0f 93       	push	r16
    1a66:	08 30       	cpi	r16, 0x08	; 8
    1a68:	90 f0       	brcs	.+36     	; 0x1a8e <__ashldi3+0x2a>
    1a6a:	98 2f       	mov	r25, r24
    1a6c:	87 2f       	mov	r24, r23
    1a6e:	76 2f       	mov	r23, r22
    1a70:	65 2f       	mov	r22, r21
    1a72:	54 2f       	mov	r21, r20
    1a74:	43 2f       	mov	r20, r19
    1a76:	32 2f       	mov	r19, r18
    1a78:	22 27       	eor	r18, r18
    1a7a:	08 50       	subi	r16, 0x08	; 8
    1a7c:	f4 cf       	rjmp	.-24     	; 0x1a66 <__ashldi3+0x2>
    1a7e:	22 0f       	add	r18, r18
    1a80:	33 1f       	adc	r19, r19
    1a82:	44 1f       	adc	r20, r20
    1a84:	55 1f       	adc	r21, r21
    1a86:	66 1f       	adc	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 95       	dec	r16
    1a90:	b2 f7       	brpl	.-20     	; 0x1a7e <__ashldi3+0x1a>
    1a92:	0f 91       	pop	r16
    1a94:	08 95       	ret

00001a96 <__ashrdi3>:
    1a96:	97 fb       	bst	r25, 7
    1a98:	10 f8       	bld	r1, 0

00001a9a <__lshrdi3>:
    1a9a:	16 94       	lsr	r1
    1a9c:	00 08       	sbc	r0, r0
    1a9e:	0f 93       	push	r16
    1aa0:	08 30       	cpi	r16, 0x08	; 8
    1aa2:	98 f0       	brcs	.+38     	; 0x1aca <__lshrdi3+0x30>
    1aa4:	08 50       	subi	r16, 0x08	; 8
    1aa6:	23 2f       	mov	r18, r19
    1aa8:	34 2f       	mov	r19, r20
    1aaa:	45 2f       	mov	r20, r21
    1aac:	56 2f       	mov	r21, r22
    1aae:	67 2f       	mov	r22, r23
    1ab0:	78 2f       	mov	r23, r24
    1ab2:	89 2f       	mov	r24, r25
    1ab4:	90 2d       	mov	r25, r0
    1ab6:	f4 cf       	rjmp	.-24     	; 0x1aa0 <__lshrdi3+0x6>
    1ab8:	05 94       	asr	r0
    1aba:	97 95       	ror	r25
    1abc:	87 95       	ror	r24
    1abe:	77 95       	ror	r23
    1ac0:	67 95       	ror	r22
    1ac2:	57 95       	ror	r21
    1ac4:	47 95       	ror	r20
    1ac6:	37 95       	ror	r19
    1ac8:	27 95       	ror	r18
    1aca:	0a 95       	dec	r16
    1acc:	aa f7       	brpl	.-22     	; 0x1ab8 <__lshrdi3+0x1e>
    1ace:	0f 91       	pop	r16
    1ad0:	08 95       	ret

00001ad2 <__adddi3_s8>:
    1ad2:	00 24       	eor	r0, r0
    1ad4:	a7 fd       	sbrc	r26, 7
    1ad6:	00 94       	com	r0
    1ad8:	2a 0f       	add	r18, r26
    1ada:	30 1d       	adc	r19, r0
    1adc:	40 1d       	adc	r20, r0
    1ade:	50 1d       	adc	r21, r0
    1ae0:	60 1d       	adc	r22, r0
    1ae2:	70 1d       	adc	r23, r0
    1ae4:	80 1d       	adc	r24, r0
    1ae6:	90 1d       	adc	r25, r0
    1ae8:	08 95       	ret

00001aea <__cmpdi2>:
    1aea:	2a 15       	cp	r18, r10
    1aec:	3b 05       	cpc	r19, r11
    1aee:	4c 05       	cpc	r20, r12
    1af0:	5d 05       	cpc	r21, r13
    1af2:	6e 05       	cpc	r22, r14
    1af4:	7f 05       	cpc	r23, r15
    1af6:	80 07       	cpc	r24, r16
    1af8:	91 07       	cpc	r25, r17
    1afa:	08 95       	ret

00001afc <__cmpdi2_s8>:
    1afc:	00 24       	eor	r0, r0
    1afe:	a7 fd       	sbrc	r26, 7
    1b00:	00 94       	com	r0
    1b02:	2a 17       	cp	r18, r26
    1b04:	30 05       	cpc	r19, r0
    1b06:	40 05       	cpc	r20, r0
    1b08:	50 05       	cpc	r21, r0
    1b0a:	60 05       	cpc	r22, r0
    1b0c:	70 05       	cpc	r23, r0
    1b0e:	80 05       	cpc	r24, r0
    1b10:	90 05       	cpc	r25, r0
    1b12:	08 95       	ret

00001b14 <_exit>:
    1b14:	f8 94       	cli

00001b16 <__stop_program>:
    1b16:	ff cf       	rjmp	.-2      	; 0x1b16 <__stop_program>
